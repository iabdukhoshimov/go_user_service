// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: booked_appointment.proto

package pos_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BookedAppointmentServiceClient is the client API for BookedAppointmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookedAppointmentServiceClient interface {
	GetList(ctx context.Context, in *GetAllBookedAppointmentsRequest, opts ...grpc.CallOption) (*GetAllBookedAppointmentsResponse, error)
	GetSingle(ctx context.Context, in *BookedAppointmentPrimaryKey, opts ...grpc.CallOption) (*GetSingleBookedAppointmentResponse, error)
}

type bookedAppointmentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBookedAppointmentServiceClient(cc grpc.ClientConnInterface) BookedAppointmentServiceClient {
	return &bookedAppointmentServiceClient{cc}
}

func (c *bookedAppointmentServiceClient) GetList(ctx context.Context, in *GetAllBookedAppointmentsRequest, opts ...grpc.CallOption) (*GetAllBookedAppointmentsResponse, error) {
	out := new(GetAllBookedAppointmentsResponse)
	err := c.cc.Invoke(ctx, "/pos_service.BookedAppointmentService/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookedAppointmentServiceClient) GetSingle(ctx context.Context, in *BookedAppointmentPrimaryKey, opts ...grpc.CallOption) (*GetSingleBookedAppointmentResponse, error) {
	out := new(GetSingleBookedAppointmentResponse)
	err := c.cc.Invoke(ctx, "/pos_service.BookedAppointmentService/GetSingle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookedAppointmentServiceServer is the server API for BookedAppointmentService service.
// All implementations must embed UnimplementedBookedAppointmentServiceServer
// for forward compatibility
type BookedAppointmentServiceServer interface {
	GetList(context.Context, *GetAllBookedAppointmentsRequest) (*GetAllBookedAppointmentsResponse, error)
	GetSingle(context.Context, *BookedAppointmentPrimaryKey) (*GetSingleBookedAppointmentResponse, error)
	mustEmbedUnimplementedBookedAppointmentServiceServer()
}

// UnimplementedBookedAppointmentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBookedAppointmentServiceServer struct {
}

func (UnimplementedBookedAppointmentServiceServer) GetList(context.Context, *GetAllBookedAppointmentsRequest) (*GetAllBookedAppointmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedBookedAppointmentServiceServer) GetSingle(context.Context, *BookedAppointmentPrimaryKey) (*GetSingleBookedAppointmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSingle not implemented")
}
func (UnimplementedBookedAppointmentServiceServer) mustEmbedUnimplementedBookedAppointmentServiceServer() {
}

// UnsafeBookedAppointmentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookedAppointmentServiceServer will
// result in compilation errors.
type UnsafeBookedAppointmentServiceServer interface {
	mustEmbedUnimplementedBookedAppointmentServiceServer()
}

func RegisterBookedAppointmentServiceServer(s grpc.ServiceRegistrar, srv BookedAppointmentServiceServer) {
	s.RegisterService(&BookedAppointmentService_ServiceDesc, srv)
}

func _BookedAppointmentService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllBookedAppointmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookedAppointmentServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos_service.BookedAppointmentService/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookedAppointmentServiceServer).GetList(ctx, req.(*GetAllBookedAppointmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookedAppointmentService_GetSingle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookedAppointmentPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookedAppointmentServiceServer).GetSingle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos_service.BookedAppointmentService/GetSingle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookedAppointmentServiceServer).GetSingle(ctx, req.(*BookedAppointmentPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

// BookedAppointmentService_ServiceDesc is the grpc.ServiceDesc for BookedAppointmentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookedAppointmentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pos_service.BookedAppointmentService",
	HandlerType: (*BookedAppointmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetList",
			Handler:    _BookedAppointmentService_GetList_Handler,
		},
		{
			MethodName: "GetSingle",
			Handler:    _BookedAppointmentService_GetSingle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "booked_appointment.proto",
}
