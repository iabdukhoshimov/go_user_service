// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: offline_appointment.proto

package pos_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OfflineAppointmentServiceClient is the client API for OfflineAppointmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OfflineAppointmentServiceClient interface {
	GetList(ctx context.Context, in *GetAllOfflineAppointmentsRequest, opts ...grpc.CallOption) (*GetAllOfflineAppointmentsResponse, error)
	GetSingle(ctx context.Context, in *OfflineAppointmentPrimaryKey, opts ...grpc.CallOption) (*GetSingleOfflineAppointmentResponse, error)
	UpdatePaymentStatus(ctx context.Context, in *UpdatePaymentStatusBody, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetCloseCashboxInfo(ctx context.Context, in *CashboxRequestBody, opts ...grpc.CallOption) (*CashboxResponse, error)
	GetOpenCashboxInfo(ctx context.Context, in *CashboxRequestBody, opts ...grpc.CallOption) (*CashboxResponse, error)
	CreateCashboxTransaction(ctx context.Context, in *CreateCashboxTransactionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type offlineAppointmentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOfflineAppointmentServiceClient(cc grpc.ClientConnInterface) OfflineAppointmentServiceClient {
	return &offlineAppointmentServiceClient{cc}
}

func (c *offlineAppointmentServiceClient) GetList(ctx context.Context, in *GetAllOfflineAppointmentsRequest, opts ...grpc.CallOption) (*GetAllOfflineAppointmentsResponse, error) {
	out := new(GetAllOfflineAppointmentsResponse)
	err := c.cc.Invoke(ctx, "/pos_service.OfflineAppointmentService/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offlineAppointmentServiceClient) GetSingle(ctx context.Context, in *OfflineAppointmentPrimaryKey, opts ...grpc.CallOption) (*GetSingleOfflineAppointmentResponse, error) {
	out := new(GetSingleOfflineAppointmentResponse)
	err := c.cc.Invoke(ctx, "/pos_service.OfflineAppointmentService/GetSingle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offlineAppointmentServiceClient) UpdatePaymentStatus(ctx context.Context, in *UpdatePaymentStatusBody, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/pos_service.OfflineAppointmentService/UpdatePaymentStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offlineAppointmentServiceClient) GetCloseCashboxInfo(ctx context.Context, in *CashboxRequestBody, opts ...grpc.CallOption) (*CashboxResponse, error) {
	out := new(CashboxResponse)
	err := c.cc.Invoke(ctx, "/pos_service.OfflineAppointmentService/GetCloseCashboxInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offlineAppointmentServiceClient) GetOpenCashboxInfo(ctx context.Context, in *CashboxRequestBody, opts ...grpc.CallOption) (*CashboxResponse, error) {
	out := new(CashboxResponse)
	err := c.cc.Invoke(ctx, "/pos_service.OfflineAppointmentService/GetOpenCashboxInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offlineAppointmentServiceClient) CreateCashboxTransaction(ctx context.Context, in *CreateCashboxTransactionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/pos_service.OfflineAppointmentService/CreateCashboxTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OfflineAppointmentServiceServer is the server API for OfflineAppointmentService service.
// All implementations must embed UnimplementedOfflineAppointmentServiceServer
// for forward compatibility
type OfflineAppointmentServiceServer interface {
	GetList(context.Context, *GetAllOfflineAppointmentsRequest) (*GetAllOfflineAppointmentsResponse, error)
	GetSingle(context.Context, *OfflineAppointmentPrimaryKey) (*GetSingleOfflineAppointmentResponse, error)
	UpdatePaymentStatus(context.Context, *UpdatePaymentStatusBody) (*emptypb.Empty, error)
	GetCloseCashboxInfo(context.Context, *CashboxRequestBody) (*CashboxResponse, error)
	GetOpenCashboxInfo(context.Context, *CashboxRequestBody) (*CashboxResponse, error)
	CreateCashboxTransaction(context.Context, *CreateCashboxTransactionRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedOfflineAppointmentServiceServer()
}

// UnimplementedOfflineAppointmentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOfflineAppointmentServiceServer struct {
}

func (UnimplementedOfflineAppointmentServiceServer) GetList(context.Context, *GetAllOfflineAppointmentsRequest) (*GetAllOfflineAppointmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedOfflineAppointmentServiceServer) GetSingle(context.Context, *OfflineAppointmentPrimaryKey) (*GetSingleOfflineAppointmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSingle not implemented")
}
func (UnimplementedOfflineAppointmentServiceServer) UpdatePaymentStatus(context.Context, *UpdatePaymentStatusBody) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePaymentStatus not implemented")
}
func (UnimplementedOfflineAppointmentServiceServer) GetCloseCashboxInfo(context.Context, *CashboxRequestBody) (*CashboxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCloseCashboxInfo not implemented")
}
func (UnimplementedOfflineAppointmentServiceServer) GetOpenCashboxInfo(context.Context, *CashboxRequestBody) (*CashboxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpenCashboxInfo not implemented")
}
func (UnimplementedOfflineAppointmentServiceServer) CreateCashboxTransaction(context.Context, *CreateCashboxTransactionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCashboxTransaction not implemented")
}
func (UnimplementedOfflineAppointmentServiceServer) mustEmbedUnimplementedOfflineAppointmentServiceServer() {
}

// UnsafeOfflineAppointmentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OfflineAppointmentServiceServer will
// result in compilation errors.
type UnsafeOfflineAppointmentServiceServer interface {
	mustEmbedUnimplementedOfflineAppointmentServiceServer()
}

func RegisterOfflineAppointmentServiceServer(s grpc.ServiceRegistrar, srv OfflineAppointmentServiceServer) {
	s.RegisterService(&OfflineAppointmentService_ServiceDesc, srv)
}

func _OfflineAppointmentService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllOfflineAppointmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfflineAppointmentServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos_service.OfflineAppointmentService/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfflineAppointmentServiceServer).GetList(ctx, req.(*GetAllOfflineAppointmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OfflineAppointmentService_GetSingle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OfflineAppointmentPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfflineAppointmentServiceServer).GetSingle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos_service.OfflineAppointmentService/GetSingle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfflineAppointmentServiceServer).GetSingle(ctx, req.(*OfflineAppointmentPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _OfflineAppointmentService_UpdatePaymentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePaymentStatusBody)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfflineAppointmentServiceServer).UpdatePaymentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos_service.OfflineAppointmentService/UpdatePaymentStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfflineAppointmentServiceServer).UpdatePaymentStatus(ctx, req.(*UpdatePaymentStatusBody))
	}
	return interceptor(ctx, in, info, handler)
}

func _OfflineAppointmentService_GetCloseCashboxInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CashboxRequestBody)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfflineAppointmentServiceServer).GetCloseCashboxInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos_service.OfflineAppointmentService/GetCloseCashboxInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfflineAppointmentServiceServer).GetCloseCashboxInfo(ctx, req.(*CashboxRequestBody))
	}
	return interceptor(ctx, in, info, handler)
}

func _OfflineAppointmentService_GetOpenCashboxInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CashboxRequestBody)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfflineAppointmentServiceServer).GetOpenCashboxInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos_service.OfflineAppointmentService/GetOpenCashboxInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfflineAppointmentServiceServer).GetOpenCashboxInfo(ctx, req.(*CashboxRequestBody))
	}
	return interceptor(ctx, in, info, handler)
}

func _OfflineAppointmentService_CreateCashboxTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCashboxTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfflineAppointmentServiceServer).CreateCashboxTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pos_service.OfflineAppointmentService/CreateCashboxTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfflineAppointmentServiceServer).CreateCashboxTransaction(ctx, req.(*CreateCashboxTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OfflineAppointmentService_ServiceDesc is the grpc.ServiceDesc for OfflineAppointmentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OfflineAppointmentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pos_service.OfflineAppointmentService",
	HandlerType: (*OfflineAppointmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetList",
			Handler:    _OfflineAppointmentService_GetList_Handler,
		},
		{
			MethodName: "GetSingle",
			Handler:    _OfflineAppointmentService_GetSingle_Handler,
		},
		{
			MethodName: "UpdatePaymentStatus",
			Handler:    _OfflineAppointmentService_UpdatePaymentStatus_Handler,
		},
		{
			MethodName: "GetCloseCashboxInfo",
			Handler:    _OfflineAppointmentService_GetCloseCashboxInfo_Handler,
		},
		{
			MethodName: "GetOpenCashboxInfo",
			Handler:    _OfflineAppointmentService_GetOpenCashboxInfo_Handler,
		},
		{
			MethodName: "CreateCashboxTransaction",
			Handler:    _OfflineAppointmentService_CreateCashboxTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "offline_appointment.proto",
}
