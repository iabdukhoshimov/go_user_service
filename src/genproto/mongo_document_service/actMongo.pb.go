// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: actMongo.proto

package mongo_document_service

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MongoActDoc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActNo   string `protobuf:"bytes,1,opt,name=ActNo,proto3" json:"ActNo,omitempty"`
	ActDate string `protobuf:"bytes,2,opt,name=ActDate,proto3" json:"ActDate,omitempty"`
	ActText string `protobuf:"bytes,3,opt,name=ActText,proto3" json:"ActText,omitempty"`
}

func (x *MongoActDoc) Reset() {
	*x = MongoActDoc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actMongo_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MongoActDoc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongoActDoc) ProtoMessage() {}

func (x *MongoActDoc) ProtoReflect() protoreflect.Message {
	mi := &file_actMongo_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongoActDoc.ProtoReflect.Descriptor instead.
func (*MongoActDoc) Descriptor() ([]byte, []int) {
	return file_actMongo_proto_rawDescGZIP(), []int{0}
}

func (x *MongoActDoc) GetActNo() string {
	if x != nil {
		return x.ActNo
	}
	return ""
}

func (x *MongoActDoc) GetActDate() string {
	if x != nil {
		return x.ActDate
	}
	return ""
}

func (x *MongoActDoc) GetActText() string {
	if x != nil {
		return x.ActText
	}
	return ""
}

type MongoProduct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrdNo              int32                   `protobuf:"varint,1,opt,name=OrdNo,proto3" json:"OrdNo,omitempty"`
	CatalogCode        string                  `protobuf:"bytes,2,opt,name=CatalogCode,proto3" json:"CatalogCode,omitempty"`
	CatalogName        string                  `protobuf:"bytes,3,opt,name=CatalogName,proto3" json:"CatalogName,omitempty"`
	BarCode            *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=BarCode,proto3" json:"BarCode,omitempty"`
	Name               string                  `protobuf:"bytes,5,opt,name=Name,proto3" json:"Name,omitempty"`
	MeasureId          string                  `protobuf:"bytes,6,opt,name=MeasureId,proto3" json:"MeasureId,omitempty"`
	Count              int32                   `protobuf:"varint,7,opt,name=Count,proto3" json:"Count,omitempty"`
	Summa              float32                 `protobuf:"fixed32,8,opt,name=Summa,proto3" json:"Summa,omitempty"`
	DeliverySum        float32                 `protobuf:"fixed32,9,opt,name=DeliverySum,proto3" json:"DeliverySum,omitempty"`
	VatRate            int32                   `protobuf:"varint,10,opt,name=VatRate,proto3" json:"VatRate,omitempty"`
	VatSum             float32                 `protobuf:"fixed32,11,opt,name=VatSum,proto3" json:"VatSum,omitempty"`
	DeliverySumWithVat float32                 `protobuf:"fixed32,12,opt,name=DeliverySumWithVat,proto3" json:"DeliverySumWithVat,omitempty"`
	WithoutVat         bool                    `protobuf:"varint,13,opt,name=WithoutVat,proto3" json:"WithoutVat,omitempty"`
	ActId              string                  `protobuf:"bytes,14,opt,name=ActId,proto3" json:"ActId,omitempty"`
	TotalSum           float32                 `protobuf:"fixed32,15,opt,name=TotalSum,proto3" json:"TotalSum,omitempty"`
	Index              int64                   `protobuf:"varint,16,opt,name=Index,proto3" json:"Index,omitempty"`
	MeasureName        string                  `protobuf:"bytes,17,opt,name=MeasureName,proto3" json:"MeasureName,omitempty"`
}

func (x *MongoProduct) Reset() {
	*x = MongoProduct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actMongo_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MongoProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongoProduct) ProtoMessage() {}

func (x *MongoProduct) ProtoReflect() protoreflect.Message {
	mi := &file_actMongo_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongoProduct.ProtoReflect.Descriptor instead.
func (*MongoProduct) Descriptor() ([]byte, []int) {
	return file_actMongo_proto_rawDescGZIP(), []int{1}
}

func (x *MongoProduct) GetOrdNo() int32 {
	if x != nil {
		return x.OrdNo
	}
	return 0
}

func (x *MongoProduct) GetCatalogCode() string {
	if x != nil {
		return x.CatalogCode
	}
	return ""
}

func (x *MongoProduct) GetCatalogName() string {
	if x != nil {
		return x.CatalogName
	}
	return ""
}

func (x *MongoProduct) GetBarCode() *wrapperspb.StringValue {
	if x != nil {
		return x.BarCode
	}
	return nil
}

func (x *MongoProduct) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MongoProduct) GetMeasureId() string {
	if x != nil {
		return x.MeasureId
	}
	return ""
}

func (x *MongoProduct) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *MongoProduct) GetSumma() float32 {
	if x != nil {
		return x.Summa
	}
	return 0
}

func (x *MongoProduct) GetDeliverySum() float32 {
	if x != nil {
		return x.DeliverySum
	}
	return 0
}

func (x *MongoProduct) GetVatRate() int32 {
	if x != nil {
		return x.VatRate
	}
	return 0
}

func (x *MongoProduct) GetVatSum() float32 {
	if x != nil {
		return x.VatSum
	}
	return 0
}

func (x *MongoProduct) GetDeliverySumWithVat() float32 {
	if x != nil {
		return x.DeliverySumWithVat
	}
	return 0
}

func (x *MongoProduct) GetWithoutVat() bool {
	if x != nil {
		return x.WithoutVat
	}
	return false
}

func (x *MongoProduct) GetActId() string {
	if x != nil {
		return x.ActId
	}
	return ""
}

func (x *MongoProduct) GetTotalSum() float32 {
	if x != nil {
		return x.TotalSum
	}
	return 0
}

func (x *MongoProduct) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *MongoProduct) GetMeasureName() string {
	if x != nil {
		return x.MeasureName
	}
	return ""
}

type MongoProductList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActProductId string          `protobuf:"bytes,1,opt,name=ActProductId,proto3" json:"ActProductId,omitempty"`
	Tin          string          `protobuf:"bytes,2,opt,name=Tin,proto3" json:"Tin,omitempty"`
	Products     []*MongoProduct `protobuf:"bytes,3,rep,name=Products,proto3" json:"Products,omitempty"`
}

func (x *MongoProductList) Reset() {
	*x = MongoProductList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actMongo_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MongoProductList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongoProductList) ProtoMessage() {}

func (x *MongoProductList) ProtoReflect() protoreflect.Message {
	mi := &file_actMongo_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongoProductList.ProtoReflect.Descriptor instead.
func (*MongoProductList) Descriptor() ([]byte, []int) {
	return file_actMongo_proto_rawDescGZIP(), []int{2}
}

func (x *MongoProductList) GetActProductId() string {
	if x != nil {
		return x.ActProductId
	}
	return ""
}

func (x *MongoProductList) GetTin() string {
	if x != nil {
		return x.Tin
	}
	return ""
}

func (x *MongoProductList) GetProducts() []*MongoProduct {
	if x != nil {
		return x.Products
	}
	return nil
}

type MongoAct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActId            string            `protobuf:"bytes,1,opt,name=ActId,proto3" json:"ActId,omitempty"`
	ActDoc           *MongoActDoc      `protobuf:"bytes,2,opt,name=ActDoc,proto3" json:"ActDoc,omitempty"`
	ContractDoc      *ContractDoc      `protobuf:"bytes,3,opt,name=ContractDoc,proto3" json:"ContractDoc,omitempty"`
	SellerTin        string            `protobuf:"bytes,4,opt,name=SellerTin,proto3" json:"SellerTin,omitempty"`
	SellerName       string            `protobuf:"bytes,5,opt,name=SellerName,proto3" json:"SellerName,omitempty"`
	SellerBranchCode string            `protobuf:"bytes,6,opt,name=SellerBranchCode,proto3" json:"SellerBranchCode,omitempty"`
	SellerBranchName string            `protobuf:"bytes,7,opt,name=SellerBranchName,proto3" json:"SellerBranchName,omitempty"`
	BuyerTin         string            `protobuf:"bytes,8,opt,name=BuyerTin,proto3" json:"BuyerTin,omitempty"`
	BuyerName        string            `protobuf:"bytes,9,opt,name=BuyerName,proto3" json:"BuyerName,omitempty"`
	BuyerBranchCode  string            `protobuf:"bytes,10,opt,name=BuyerBranchCode,proto3" json:"BuyerBranchCode,omitempty"`
	BuyerBranchName  string            `protobuf:"bytes,11,opt,name=BuyerBranchName,proto3" json:"BuyerBranchName,omitempty"`
	ProductList      *MongoProductList `protobuf:"bytes,12,opt,name=ProductList,proto3" json:"ProductList,omitempty"`
	Notes            string            `protobuf:"bytes,13,opt,name=Notes,proto3" json:"Notes,omitempty"`
	TotalDeliverySum float32           `protobuf:"fixed32,14,opt,name=TotalDeliverySum,proto3" json:"TotalDeliverySum,omitempty"`
	TotalValue       float32           `protobuf:"fixed32,15,opt,name=TotalValue,proto3" json:"TotalValue,omitempty"`
}

func (x *MongoAct) Reset() {
	*x = MongoAct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actMongo_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MongoAct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongoAct) ProtoMessage() {}

func (x *MongoAct) ProtoReflect() protoreflect.Message {
	mi := &file_actMongo_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongoAct.ProtoReflect.Descriptor instead.
func (*MongoAct) Descriptor() ([]byte, []int) {
	return file_actMongo_proto_rawDescGZIP(), []int{3}
}

func (x *MongoAct) GetActId() string {
	if x != nil {
		return x.ActId
	}
	return ""
}

func (x *MongoAct) GetActDoc() *MongoActDoc {
	if x != nil {
		return x.ActDoc
	}
	return nil
}

func (x *MongoAct) GetContractDoc() *ContractDoc {
	if x != nil {
		return x.ContractDoc
	}
	return nil
}

func (x *MongoAct) GetSellerTin() string {
	if x != nil {
		return x.SellerTin
	}
	return ""
}

func (x *MongoAct) GetSellerName() string {
	if x != nil {
		return x.SellerName
	}
	return ""
}

func (x *MongoAct) GetSellerBranchCode() string {
	if x != nil {
		return x.SellerBranchCode
	}
	return ""
}

func (x *MongoAct) GetSellerBranchName() string {
	if x != nil {
		return x.SellerBranchName
	}
	return ""
}

func (x *MongoAct) GetBuyerTin() string {
	if x != nil {
		return x.BuyerTin
	}
	return ""
}

func (x *MongoAct) GetBuyerName() string {
	if x != nil {
		return x.BuyerName
	}
	return ""
}

func (x *MongoAct) GetBuyerBranchCode() string {
	if x != nil {
		return x.BuyerBranchCode
	}
	return ""
}

func (x *MongoAct) GetBuyerBranchName() string {
	if x != nil {
		return x.BuyerBranchName
	}
	return ""
}

func (x *MongoAct) GetProductList() *MongoProductList {
	if x != nil {
		return x.ProductList
	}
	return nil
}

func (x *MongoAct) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *MongoAct) GetTotalDeliverySum() float32 {
	if x != nil {
		return x.TotalDeliverySum
	}
	return 0
}

func (x *MongoAct) GetTotalValue() float32 {
	if x != nil {
		return x.TotalValue
	}
	return 0
}

type MongoActResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Act        *MongoAct `protobuf:"bytes,1,opt,name=Act,proto3" json:"Act,omitempty"`
	Sign       string    `protobuf:"bytes,2,opt,name=Sign,proto3" json:"Sign,omitempty"`
	Status     string    `protobuf:"bytes,3,opt,name=Status,proto3" json:"Status,omitempty"`
	PdfUrlUz   string    `protobuf:"bytes,4,opt,name=PdfUrlUz,proto3" json:"PdfUrlUz,omitempty"`
	PdfUrlRu   string    `protobuf:"bytes,5,opt,name=PdfUrlRu,proto3" json:"PdfUrlRu,omitempty"`
	PageStatus string    `protobuf:"bytes,6,opt,name=PageStatus,proto3" json:"PageStatus,omitempty"`
	CreatedAt  string    `protobuf:"bytes,7,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt  string    `protobuf:"bytes,8,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	HtmlUz     string    `protobuf:"bytes,9,opt,name=HtmlUz,proto3" json:"HtmlUz,omitempty"`
	HtmlRu     string    `protobuf:"bytes,10,opt,name=HtmlRu,proto3" json:"HtmlRu,omitempty"`
}

func (x *MongoActResponse) Reset() {
	*x = MongoActResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actMongo_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MongoActResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongoActResponse) ProtoMessage() {}

func (x *MongoActResponse) ProtoReflect() protoreflect.Message {
	mi := &file_actMongo_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongoActResponse.ProtoReflect.Descriptor instead.
func (*MongoActResponse) Descriptor() ([]byte, []int) {
	return file_actMongo_proto_rawDescGZIP(), []int{4}
}

func (x *MongoActResponse) GetAct() *MongoAct {
	if x != nil {
		return x.Act
	}
	return nil
}

func (x *MongoActResponse) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

func (x *MongoActResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *MongoActResponse) GetPdfUrlUz() string {
	if x != nil {
		return x.PdfUrlUz
	}
	return ""
}

func (x *MongoActResponse) GetPdfUrlRu() string {
	if x != nil {
		return x.PdfUrlRu
	}
	return ""
}

func (x *MongoActResponse) GetPageStatus() string {
	if x != nil {
		return x.PageStatus
	}
	return ""
}

func (x *MongoActResponse) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *MongoActResponse) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *MongoActResponse) GetHtmlUz() string {
	if x != nil {
		return x.HtmlUz
	}
	return ""
}

func (x *MongoActResponse) GetHtmlRu() string {
	if x != nil {
		return x.HtmlRu
	}
	return ""
}

type MongoActUpsertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActId            string            `protobuf:"bytes,1,opt,name=ActId,proto3" json:"ActId,omitempty"`
	ActDoc           *MongoActDoc      `protobuf:"bytes,2,opt,name=ActDoc,proto3" json:"ActDoc,omitempty"`
	ContractDoc      *ContractDoc      `protobuf:"bytes,3,opt,name=ContractDoc,proto3" json:"ContractDoc,omitempty"`
	SellerTin        string            `protobuf:"bytes,4,opt,name=SellerTin,proto3" json:"SellerTin,omitempty"`
	SellerName       string            `protobuf:"bytes,5,opt,name=SellerName,proto3" json:"SellerName,omitempty"`
	SellerBranchCode string            `protobuf:"bytes,6,opt,name=SellerBranchCode,proto3" json:"SellerBranchCode,omitempty"`
	SellerBranchName string            `protobuf:"bytes,7,opt,name=SellerBranchName,proto3" json:"SellerBranchName,omitempty"`
	BuyerTin         string            `protobuf:"bytes,8,opt,name=BuyerTin,proto3" json:"BuyerTin,omitempty"`
	BuyerName        string            `protobuf:"bytes,9,opt,name=BuyerName,proto3" json:"BuyerName,omitempty"`
	BuyerBranchCode  string            `protobuf:"bytes,10,opt,name=BuyerBranchCode,proto3" json:"BuyerBranchCode,omitempty"`
	BuyerBranchName  string            `protobuf:"bytes,11,opt,name=BuyerBranchName,proto3" json:"BuyerBranchName,omitempty"`
	ProductList      *MongoProductList `protobuf:"bytes,12,opt,name=ProductList,proto3" json:"ProductList,omitempty"`
	Sign             string            `protobuf:"bytes,13,opt,name=Sign,proto3" json:"Sign,omitempty"`
	Status           string            `protobuf:"bytes,14,opt,name=Status,proto3" json:"Status,omitempty"`
	Notes            string            `protobuf:"bytes,15,opt,name=Notes,proto3" json:"Notes,omitempty"`
	TotalDeliverySum float32           `protobuf:"fixed32,16,opt,name=TotalDeliverySum,proto3" json:"TotalDeliverySum,omitempty"`
	TotalValue       float32           `protobuf:"fixed32,17,opt,name=TotalValue,proto3" json:"TotalValue,omitempty"`
}

func (x *MongoActUpsertRequest) Reset() {
	*x = MongoActUpsertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actMongo_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MongoActUpsertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongoActUpsertRequest) ProtoMessage() {}

func (x *MongoActUpsertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_actMongo_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongoActUpsertRequest.ProtoReflect.Descriptor instead.
func (*MongoActUpsertRequest) Descriptor() ([]byte, []int) {
	return file_actMongo_proto_rawDescGZIP(), []int{5}
}

func (x *MongoActUpsertRequest) GetActId() string {
	if x != nil {
		return x.ActId
	}
	return ""
}

func (x *MongoActUpsertRequest) GetActDoc() *MongoActDoc {
	if x != nil {
		return x.ActDoc
	}
	return nil
}

func (x *MongoActUpsertRequest) GetContractDoc() *ContractDoc {
	if x != nil {
		return x.ContractDoc
	}
	return nil
}

func (x *MongoActUpsertRequest) GetSellerTin() string {
	if x != nil {
		return x.SellerTin
	}
	return ""
}

func (x *MongoActUpsertRequest) GetSellerName() string {
	if x != nil {
		return x.SellerName
	}
	return ""
}

func (x *MongoActUpsertRequest) GetSellerBranchCode() string {
	if x != nil {
		return x.SellerBranchCode
	}
	return ""
}

func (x *MongoActUpsertRequest) GetSellerBranchName() string {
	if x != nil {
		return x.SellerBranchName
	}
	return ""
}

func (x *MongoActUpsertRequest) GetBuyerTin() string {
	if x != nil {
		return x.BuyerTin
	}
	return ""
}

func (x *MongoActUpsertRequest) GetBuyerName() string {
	if x != nil {
		return x.BuyerName
	}
	return ""
}

func (x *MongoActUpsertRequest) GetBuyerBranchCode() string {
	if x != nil {
		return x.BuyerBranchCode
	}
	return ""
}

func (x *MongoActUpsertRequest) GetBuyerBranchName() string {
	if x != nil {
		return x.BuyerBranchName
	}
	return ""
}

func (x *MongoActUpsertRequest) GetProductList() *MongoProductList {
	if x != nil {
		return x.ProductList
	}
	return nil
}

func (x *MongoActUpsertRequest) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

func (x *MongoActUpsertRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *MongoActUpsertRequest) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *MongoActUpsertRequest) GetTotalDeliverySum() float32 {
	if x != nil {
		return x.TotalDeliverySum
	}
	return 0
}

func (x *MongoActUpsertRequest) GetTotalValue() float32 {
	if x != nil {
		return x.TotalValue
	}
	return 0
}

var File_actMongo_proto protoreflect.FileDescriptor

var file_actMongo_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x61, 0x63, 0x74, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x16, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x57, 0x0a, 0x0b, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x41, 0x63, 0x74, 0x44, 0x6f,
	0x63, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x63, 0x74, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x41, 0x63, 0x74, 0x4e, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x63, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x63, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x63, 0x74, 0x54, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x41, 0x63, 0x74, 0x54, 0x65, 0x78, 0x74, 0x22, 0x8c, 0x04, 0x0a, 0x0c,
	0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x4f, 0x72, 0x64, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4f, 0x72, 0x64,
	0x4e, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x42, 0x61, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x42, 0x61, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x49, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x12, 0x20, 0x0a, 0x0b,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0b, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x75, 0x6d, 0x12, 0x18,
	0x0a, 0x07, 0x56, 0x61, 0x74, 0x52, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x56, 0x61, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x61, 0x74, 0x53,
	0x75, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x56, 0x61, 0x74, 0x53, 0x75, 0x6d,
	0x12, 0x2e, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x75, 0x6d, 0x57,
	0x69, 0x74, 0x68, 0x56, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x75, 0x6d, 0x57, 0x69, 0x74, 0x68, 0x56, 0x61, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x56, 0x61, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x56, 0x61, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x41, 0x63, 0x74, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x41, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53,
	0x75, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53,
	0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x10, 0x4d,
	0x6f, 0x6e, 0x67, 0x6f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x41, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x54, 0x69, 0x6e, 0x12, 0x40, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x08, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x22, 0xf6, 0x04, 0x0a, 0x08, 0x4d, 0x6f, 0x6e, 0x67,
	0x6f, 0x41, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x63, 0x74, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x06, 0x41, 0x63,
	0x74, 0x44, 0x6f, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x6f, 0x6e,
	0x67, 0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x41, 0x63, 0x74, 0x44, 0x6f, 0x63, 0x52,
	0x06, 0x41, 0x63, 0x74, 0x44, 0x6f, 0x63, 0x12, 0x45, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x44, 0x6f, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d,
	0x6f, 0x6e, 0x67, 0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x6f,
	0x63, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x6f, 0x63, 0x12, 0x1c,
	0x0a, 0x09, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x54, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x54, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a,
	0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10,
	0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x53, 0x65, 0x6c, 0x6c,
	0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x75, 0x79, 0x65, 0x72, 0x54, 0x69, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x75, 0x79, 0x65, 0x72, 0x54, 0x69, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x42, 0x75, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x42, 0x75, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x42, 0x75, 0x79, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x42, 0x75, 0x79, 0x65, 0x72, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x42, 0x75, 0x79, 0x65,
	0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x42, 0x75, 0x79, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e,
	0x6f, 0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x75, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x75, 0x6d,
	0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0xb6, 0x02, 0x0a, 0x10, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x41, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x03, 0x41, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x67,
	0x6f, 0x41, 0x63, 0x74, 0x52, 0x03, 0x41, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x69, 0x67,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x64, 0x66, 0x55, 0x72, 0x6c, 0x55,
	0x7a, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x64, 0x66, 0x55, 0x72, 0x6c, 0x55,
	0x7a, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x64, 0x66, 0x55, 0x72, 0x6c, 0x52, 0x75, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x64, 0x66, 0x55, 0x72, 0x6c, 0x52, 0x75, 0x12, 0x1e, 0x0a,
	0x0a, 0x50, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x74, 0x6d,
	0x6c, 0x55, 0x7a, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x48, 0x74, 0x6d, 0x6c, 0x55,
	0x7a, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x74, 0x6d, 0x6c, 0x52, 0x75, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x48, 0x74, 0x6d, 0x6c, 0x52, 0x75, 0x22, 0xaf, 0x05, 0x0a, 0x15, 0x4d, 0x6f,
	0x6e, 0x67, 0x6f, 0x41, 0x63, 0x74, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x41, 0x63, 0x74, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x06, 0x41, 0x63, 0x74,
	0x44, 0x6f, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x6f, 0x6e, 0x67,
	0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x41, 0x63, 0x74, 0x44, 0x6f, 0x63, 0x52, 0x06,
	0x41, 0x63, 0x74, 0x44, 0x6f, 0x63, 0x12, 0x45, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x44, 0x6f, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x6f,
	0x6e, 0x67, 0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x6f, 0x63,
	0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x6f, 0x63, 0x12, 0x1c, 0x0a,
	0x09, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x54, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x54, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x53,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x53,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x53, 0x65, 0x6c, 0x6c, 0x65,
	0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x75, 0x79, 0x65, 0x72, 0x54, 0x69, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x75, 0x79, 0x65, 0x72, 0x54, 0x69, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x42, 0x75, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x42, 0x75, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x42, 0x75, 0x79, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x42, 0x75, 0x79, 0x65, 0x72, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x42, 0x75, 0x79, 0x65, 0x72,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x42, 0x75, 0x79, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x53, 0x69, 0x67, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x53, 0x69, 0x67,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74,
	0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12,
	0x2a, 0x0a, 0x10, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x53, 0x75, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x32, 0xc9, 0x02, 0x0a, 0x0f,
	0x41, 0x63, 0x74, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x4c, 0x0a, 0x06, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x12, 0x28, 0x2e, 0x6d, 0x6f, 0x6e, 0x67,
	0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x41, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x53, 0x0a,
	0x07, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f,
	0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x42, 0x79, 0x49, 0x64, 0x1a, 0x28, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x41, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x51, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x27, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12,
	0x1c, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x79, 0x49, 0x64, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x21, 0x5a, 0x1f, 0x67, 0x65, 0x6e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_actMongo_proto_rawDescOnce sync.Once
	file_actMongo_proto_rawDescData = file_actMongo_proto_rawDesc
)

func file_actMongo_proto_rawDescGZIP() []byte {
	file_actMongo_proto_rawDescOnce.Do(func() {
		file_actMongo_proto_rawDescData = protoimpl.X.CompressGZIP(file_actMongo_proto_rawDescData)
	})
	return file_actMongo_proto_rawDescData
}

var file_actMongo_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_actMongo_proto_goTypes = []interface{}{
	(*MongoActDoc)(nil),            // 0: mongo_document_service.MongoActDoc
	(*MongoProduct)(nil),           // 1: mongo_document_service.MongoProduct
	(*MongoProductList)(nil),       // 2: mongo_document_service.MongoProductList
	(*MongoAct)(nil),               // 3: mongo_document_service.MongoAct
	(*MongoActResponse)(nil),       // 4: mongo_document_service.MongoActResponse
	(*MongoActUpsertRequest)(nil),  // 5: mongo_document_service.MongoActUpsertRequest
	(*wrapperspb.StringValue)(nil), // 6: google.protobuf.StringValue
	(*ContractDoc)(nil),            // 7: mongo_document_service.ContractDoc
	(*ById)(nil),                   // 8: mongo_document_service.ById
	(*UpdateStatusReq)(nil),        // 9: mongo_document_service.UpdateStatusReq
	(*emptypb.Empty)(nil),          // 10: google.protobuf.Empty
}
var file_actMongo_proto_depIdxs = []int32{
	6,  // 0: mongo_document_service.MongoProduct.BarCode:type_name -> google.protobuf.StringValue
	1,  // 1: mongo_document_service.MongoProductList.Products:type_name -> mongo_document_service.MongoProduct
	0,  // 2: mongo_document_service.MongoAct.ActDoc:type_name -> mongo_document_service.MongoActDoc
	7,  // 3: mongo_document_service.MongoAct.ContractDoc:type_name -> mongo_document_service.ContractDoc
	2,  // 4: mongo_document_service.MongoAct.ProductList:type_name -> mongo_document_service.MongoProductList
	3,  // 5: mongo_document_service.MongoActResponse.Act:type_name -> mongo_document_service.MongoAct
	0,  // 6: mongo_document_service.MongoActUpsertRequest.ActDoc:type_name -> mongo_document_service.MongoActDoc
	7,  // 7: mongo_document_service.MongoActUpsertRequest.ContractDoc:type_name -> mongo_document_service.ContractDoc
	2,  // 8: mongo_document_service.MongoActUpsertRequest.ProductList:type_name -> mongo_document_service.MongoProductList
	4,  // 9: mongo_document_service.ActMongoService.Upsert:input_type -> mongo_document_service.MongoActResponse
	8,  // 10: mongo_document_service.ActMongoService.GetById:input_type -> mongo_document_service.ById
	9,  // 11: mongo_document_service.ActMongoService.UpdateStatus:input_type -> mongo_document_service.UpdateStatusReq
	8,  // 12: mongo_document_service.ActMongoService.Delete:input_type -> mongo_document_service.ById
	10, // 13: mongo_document_service.ActMongoService.Upsert:output_type -> google.protobuf.Empty
	4,  // 14: mongo_document_service.ActMongoService.GetById:output_type -> mongo_document_service.MongoActResponse
	10, // 15: mongo_document_service.ActMongoService.UpdateStatus:output_type -> google.protobuf.Empty
	10, // 16: mongo_document_service.ActMongoService.Delete:output_type -> google.protobuf.Empty
	13, // [13:17] is the sub-list for method output_type
	9,  // [9:13] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_actMongo_proto_init() }
func file_actMongo_proto_init() {
	if File_actMongo_proto != nil {
		return
	}
	file_mongo_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_actMongo_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MongoActDoc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_actMongo_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MongoProduct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_actMongo_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MongoProductList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_actMongo_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MongoAct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_actMongo_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MongoActResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_actMongo_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MongoActUpsertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_actMongo_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_actMongo_proto_goTypes,
		DependencyIndexes: file_actMongo_proto_depIdxs,
		MessageInfos:      file_actMongo_proto_msgTypes,
	}.Build()
	File_actMongo_proto = out.File
	file_actMongo_proto_rawDesc = nil
	file_actMongo_proto_goTypes = nil
	file_actMongo_proto_depIdxs = nil
}
