// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: bFactura.proto

package mongo_document_service

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BFactura struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuildingFacturaId             string                           `protobuf:"bytes,1,opt,name=BuildingFacturaId,proto3" json:"BuildingFacturaId,omitempty"`
	GeneralContractorTinOrPinfl   string                           `protobuf:"bytes,2,opt,name=GeneralContractorTinOrPinfl,proto3" json:"GeneralContractorTinOrPinfl,omitempty"`
	CustomerTinOrPinfl            string                           `protobuf:"bytes,3,opt,name=CustomerTinOrPinfl,proto3" json:"CustomerTinOrPinfl,omitempty"`
	GeneralContractor             *Client                          `protobuf:"bytes,4,opt,name=GeneralContractor,proto3" json:"GeneralContractor,omitempty"`
	Customer                      *Client                          `protobuf:"bytes,5,opt,name=Customer,proto3" json:"Customer,omitempty"`
	TechnicalManagerFullName      string                           `protobuf:"bytes,6,opt,name=TechnicalManagerFullName,proto3" json:"TechnicalManagerFullName,omitempty"`
	TechnicalManagerPinfl         string                           `protobuf:"bytes,7,opt,name=TechnicalManagerPinfl,proto3" json:"TechnicalManagerPinfl,omitempty"`
	SubcontractorBuildingFacturas []*SubcontractorBuildingFacturas `protobuf:"bytes,8,rep,name=SubcontractorBuildingFacturas,proto3" json:"SubcontractorBuildingFacturas,omitempty"`
	BuildingFacturaDoc            *BuildingFacturaDoc              `protobuf:"bytes,9,opt,name=BuildingFacturaDoc,proto3" json:"BuildingFacturaDoc,omitempty"`
	ContractDoc                   *ContractDoc                     `protobuf:"bytes,10,opt,name=ContractDoc,proto3" json:"ContractDoc,omitempty"`
	ReportingPeriodDoc            *ReportingPeriodDoc              `protobuf:"bytes,11,opt,name=ReportingPeriodDoc,proto3" json:"ReportingPeriodDoc,omitempty"`
	BuildingObjectDoc             *BuildingObjectDoc               `protobuf:"bytes,12,opt,name=BuildingObjectDoc,proto3" json:"BuildingObjectDoc,omitempty"`
	WorkingDesign                 *WorkingDesign                   `protobuf:"bytes,13,opt,name=WorkingDesign,proto3" json:"WorkingDesign,omitempty"`
	ConstructionWork              *WorkingDesign                   `protobuf:"bytes,14,opt,name=ConstructionWork,proto3" json:"ConstructionWork,omitempty"`
	Equipment                     *WorkingDesign                   `protobuf:"bytes,15,opt,name=Equipment,proto3" json:"Equipment,omitempty"`
	Total                         *Total                           `protobuf:"bytes,16,opt,name=Total,proto3" json:"Total,omitempty"`
	TotalPrice                    int32                            `protobuf:"varint,17,opt,name=TotalPrice,proto3" json:"TotalPrice,omitempty"`
}

func (x *BFactura) Reset() {
	*x = BFactura{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bFactura_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BFactura) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BFactura) ProtoMessage() {}

func (x *BFactura) ProtoReflect() protoreflect.Message {
	mi := &file_bFactura_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BFactura.ProtoReflect.Descriptor instead.
func (*BFactura) Descriptor() ([]byte, []int) {
	return file_bFactura_proto_rawDescGZIP(), []int{0}
}

func (x *BFactura) GetBuildingFacturaId() string {
	if x != nil {
		return x.BuildingFacturaId
	}
	return ""
}

func (x *BFactura) GetGeneralContractorTinOrPinfl() string {
	if x != nil {
		return x.GeneralContractorTinOrPinfl
	}
	return ""
}

func (x *BFactura) GetCustomerTinOrPinfl() string {
	if x != nil {
		return x.CustomerTinOrPinfl
	}
	return ""
}

func (x *BFactura) GetGeneralContractor() *Client {
	if x != nil {
		return x.GeneralContractor
	}
	return nil
}

func (x *BFactura) GetCustomer() *Client {
	if x != nil {
		return x.Customer
	}
	return nil
}

func (x *BFactura) GetTechnicalManagerFullName() string {
	if x != nil {
		return x.TechnicalManagerFullName
	}
	return ""
}

func (x *BFactura) GetTechnicalManagerPinfl() string {
	if x != nil {
		return x.TechnicalManagerPinfl
	}
	return ""
}

func (x *BFactura) GetSubcontractorBuildingFacturas() []*SubcontractorBuildingFacturas {
	if x != nil {
		return x.SubcontractorBuildingFacturas
	}
	return nil
}

func (x *BFactura) GetBuildingFacturaDoc() *BuildingFacturaDoc {
	if x != nil {
		return x.BuildingFacturaDoc
	}
	return nil
}

func (x *BFactura) GetContractDoc() *ContractDoc {
	if x != nil {
		return x.ContractDoc
	}
	return nil
}

func (x *BFactura) GetReportingPeriodDoc() *ReportingPeriodDoc {
	if x != nil {
		return x.ReportingPeriodDoc
	}
	return nil
}

func (x *BFactura) GetBuildingObjectDoc() *BuildingObjectDoc {
	if x != nil {
		return x.BuildingObjectDoc
	}
	return nil
}

func (x *BFactura) GetWorkingDesign() *WorkingDesign {
	if x != nil {
		return x.WorkingDesign
	}
	return nil
}

func (x *BFactura) GetConstructionWork() *WorkingDesign {
	if x != nil {
		return x.ConstructionWork
	}
	return nil
}

func (x *BFactura) GetEquipment() *WorkingDesign {
	if x != nil {
		return x.Equipment
	}
	return nil
}

func (x *BFactura) GetTotal() *Total {
	if x != nil {
		return x.Total
	}
	return nil
}

func (x *BFactura) GetTotalPrice() int32 {
	if x != nil {
		return x.TotalPrice
	}
	return 0
}

type BuildingFactura struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuildingFactura *BFactura `protobuf:"bytes,1,opt,name=BuildingFactura,proto3" json:"BuildingFactura,omitempty"`
	Status          string    `protobuf:"bytes,2,opt,name=Status,proto3" json:"Status,omitempty"`
	Sign            string    `protobuf:"bytes,3,opt,name=Sign,proto3" json:"Sign,omitempty"`
	PageStatus      string    `protobuf:"bytes,4,opt,name=PageStatus,proto3" json:"PageStatus,omitempty"`
	ContractPdfUz   string    `protobuf:"bytes,5,opt,name=ContractPdfUz,proto3" json:"ContractPdfUz,omitempty"`
	ContractPdfRu   string    `protobuf:"bytes,6,opt,name=ContractPdfRu,proto3" json:"ContractPdfRu,omitempty"`
	CreatedAt       string    `protobuf:"bytes,7,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt       string    `protobuf:"bytes,8,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	HtmlUz          string    `protobuf:"bytes,9,opt,name=HtmlUz,proto3" json:"HtmlUz,omitempty"`
	HtmlRu          string    `protobuf:"bytes,10,opt,name=HtmlRu,proto3" json:"HtmlRu,omitempty"`
}

func (x *BuildingFactura) Reset() {
	*x = BuildingFactura{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bFactura_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildingFactura) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildingFactura) ProtoMessage() {}

func (x *BuildingFactura) ProtoReflect() protoreflect.Message {
	mi := &file_bFactura_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildingFactura.ProtoReflect.Descriptor instead.
func (*BuildingFactura) Descriptor() ([]byte, []int) {
	return file_bFactura_proto_rawDescGZIP(), []int{1}
}

func (x *BuildingFactura) GetBuildingFactura() *BFactura {
	if x != nil {
		return x.BuildingFactura
	}
	return nil
}

func (x *BuildingFactura) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *BuildingFactura) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

func (x *BuildingFactura) GetPageStatus() string {
	if x != nil {
		return x.PageStatus
	}
	return ""
}

func (x *BuildingFactura) GetContractPdfUz() string {
	if x != nil {
		return x.ContractPdfUz
	}
	return ""
}

func (x *BuildingFactura) GetContractPdfRu() string {
	if x != nil {
		return x.ContractPdfRu
	}
	return ""
}

func (x *BuildingFactura) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *BuildingFactura) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *BuildingFactura) GetHtmlUz() string {
	if x != nil {
		return x.HtmlUz
	}
	return ""
}

func (x *BuildingFactura) GetHtmlRu() string {
	if x != nil {
		return x.HtmlRu
	}
	return ""
}

type Client struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Account      string                 `protobuf:"bytes,2,opt,name=Account,proto3" json:"Account,omitempty"`
	BankId       string                 `protobuf:"bytes,3,opt,name=BankId,proto3" json:"BankId,omitempty"`
	Address      string                 `protobuf:"bytes,4,opt,name=Address,proto3" json:"Address,omitempty"`
	Mobile       string                 `protobuf:"bytes,5,opt,name=Mobile,proto3" json:"Mobile,omitempty"`
	WorkPhone    string                 `protobuf:"bytes,6,opt,name=WorkPhone,proto3" json:"WorkPhone,omitempty"`
	Oked         string                 `protobuf:"bytes,7,opt,name=Oked,proto3" json:"Oked,omitempty"`
	DistrictId   string                 `protobuf:"bytes,8,opt,name=DistrictId,proto3" json:"DistrictId,omitempty"`
	Director     string                 `protobuf:"bytes,9,opt,name=Director,proto3" json:"Director,omitempty"`
	Accountant   string                 `protobuf:"bytes,10,opt,name=Accountant,proto3" json:"Accountant,omitempty"`
	VatRegCode   string                 `protobuf:"bytes,11,opt,name=VatRegCode,proto3" json:"VatRegCode,omitempty"`
	VatRegStatus *wrapperspb.Int32Value `protobuf:"bytes,12,opt,name=VatRegStatus,proto3" json:"VatRegStatus,omitempty"`
	BranchCode   string                 `protobuf:"bytes,13,opt,name=BranchCode,proto3" json:"BranchCode,omitempty"`
	BranchName   string                 `protobuf:"bytes,14,opt,name=BranchName,proto3" json:"BranchName,omitempty"`
	TaxGap       *wrapperspb.FloatValue `protobuf:"bytes,15,opt,name=TaxGap,proto3" json:"TaxGap,omitempty"`
}

func (x *Client) Reset() {
	*x = Client{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bFactura_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Client) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Client) ProtoMessage() {}

func (x *Client) ProtoReflect() protoreflect.Message {
	mi := &file_bFactura_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Client.ProtoReflect.Descriptor instead.
func (*Client) Descriptor() ([]byte, []int) {
	return file_bFactura_proto_rawDescGZIP(), []int{2}
}

func (x *Client) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Client) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *Client) GetBankId() string {
	if x != nil {
		return x.BankId
	}
	return ""
}

func (x *Client) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Client) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *Client) GetWorkPhone() string {
	if x != nil {
		return x.WorkPhone
	}
	return ""
}

func (x *Client) GetOked() string {
	if x != nil {
		return x.Oked
	}
	return ""
}

func (x *Client) GetDistrictId() string {
	if x != nil {
		return x.DistrictId
	}
	return ""
}

func (x *Client) GetDirector() string {
	if x != nil {
		return x.Director
	}
	return ""
}

func (x *Client) GetAccountant() string {
	if x != nil {
		return x.Accountant
	}
	return ""
}

func (x *Client) GetVatRegCode() string {
	if x != nil {
		return x.VatRegCode
	}
	return ""
}

func (x *Client) GetVatRegStatus() *wrapperspb.Int32Value {
	if x != nil {
		return x.VatRegStatus
	}
	return nil
}

func (x *Client) GetBranchCode() string {
	if x != nil {
		return x.BranchCode
	}
	return ""
}

func (x *Client) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

func (x *Client) GetTaxGap() *wrapperspb.FloatValue {
	if x != nil {
		return x.TaxGap
	}
	return nil
}

type SubcontractorBuildingFacturas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuildingFacturaId   string `protobuf:"bytes,1,opt,name=BuildingFacturaId,proto3" json:"BuildingFacturaId,omitempty"`
	BuildingFacturaNo   string `protobuf:"bytes,2,opt,name=BuildingFacturaNo,proto3" json:"BuildingFacturaNo,omitempty"`
	BuildingFacturaDate string `protobuf:"bytes,3,opt,name=BuildingFacturaDate,proto3" json:"BuildingFacturaDate,omitempty"`
}

func (x *SubcontractorBuildingFacturas) Reset() {
	*x = SubcontractorBuildingFacturas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bFactura_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubcontractorBuildingFacturas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubcontractorBuildingFacturas) ProtoMessage() {}

func (x *SubcontractorBuildingFacturas) ProtoReflect() protoreflect.Message {
	mi := &file_bFactura_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubcontractorBuildingFacturas.ProtoReflect.Descriptor instead.
func (*SubcontractorBuildingFacturas) Descriptor() ([]byte, []int) {
	return file_bFactura_proto_rawDescGZIP(), []int{3}
}

func (x *SubcontractorBuildingFacturas) GetBuildingFacturaId() string {
	if x != nil {
		return x.BuildingFacturaId
	}
	return ""
}

func (x *SubcontractorBuildingFacturas) GetBuildingFacturaNo() string {
	if x != nil {
		return x.BuildingFacturaNo
	}
	return ""
}

func (x *SubcontractorBuildingFacturas) GetBuildingFacturaDate() string {
	if x != nil {
		return x.BuildingFacturaDate
	}
	return ""
}

type ReportingPeriodDoc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportingPeriodFrom string `protobuf:"bytes,1,opt,name=ReportingPeriodFrom,proto3" json:"ReportingPeriodFrom,omitempty"`
	ReportingPeriodTo   string `protobuf:"bytes,2,opt,name=ReportingPeriodTo,proto3" json:"ReportingPeriodTo,omitempty"`
}

func (x *ReportingPeriodDoc) Reset() {
	*x = ReportingPeriodDoc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bFactura_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportingPeriodDoc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportingPeriodDoc) ProtoMessage() {}

func (x *ReportingPeriodDoc) ProtoReflect() protoreflect.Message {
	mi := &file_bFactura_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportingPeriodDoc.ProtoReflect.Descriptor instead.
func (*ReportingPeriodDoc) Descriptor() ([]byte, []int) {
	return file_bFactura_proto_rawDescGZIP(), []int{4}
}

func (x *ReportingPeriodDoc) GetReportingPeriodFrom() string {
	if x != nil {
		return x.ReportingPeriodFrom
	}
	return ""
}

func (x *ReportingPeriodDoc) GetReportingPeriodTo() string {
	if x != nil {
		return x.ReportingPeriodTo
	}
	return ""
}

type BuildingObjectDoc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId      string `protobuf:"bytes,1,opt,name=ObjectId,proto3" json:"ObjectId,omitempty"`
	ObjectName    string `protobuf:"bytes,2,opt,name=ObjectName,proto3" json:"ObjectName,omitempty"`
	ObjectAddress string `protobuf:"bytes,3,opt,name=ObjectAddress,proto3" json:"ObjectAddress,omitempty"`
}

func (x *BuildingObjectDoc) Reset() {
	*x = BuildingObjectDoc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bFactura_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildingObjectDoc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildingObjectDoc) ProtoMessage() {}

func (x *BuildingObjectDoc) ProtoReflect() protoreflect.Message {
	mi := &file_bFactura_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildingObjectDoc.ProtoReflect.Descriptor instead.
func (*BuildingObjectDoc) Descriptor() ([]byte, []int) {
	return file_bFactura_proto_rawDescGZIP(), []int{5}
}

func (x *BuildingObjectDoc) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

func (x *BuildingObjectDoc) GetObjectName() string {
	if x != nil {
		return x.ObjectName
	}
	return ""
}

func (x *BuildingObjectDoc) GetObjectAddress() string {
	if x != nil {
		return x.ObjectAddress
	}
	return ""
}

type WorkingDesign struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Works   []*Works  `protobuf:"bytes,1,rep,name=Works,proto3" json:"Works,omitempty"`
	Summary *SummaryB `protobuf:"bytes,2,opt,name=Summary,proto3" json:"Summary,omitempty"`
}

func (x *WorkingDesign) Reset() {
	*x = WorkingDesign{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bFactura_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkingDesign) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkingDesign) ProtoMessage() {}

func (x *WorkingDesign) ProtoReflect() protoreflect.Message {
	mi := &file_bFactura_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkingDesign.ProtoReflect.Descriptor instead.
func (*WorkingDesign) Descriptor() ([]byte, []int) {
	return file_bFactura_proto_rawDescGZIP(), []int{6}
}

func (x *WorkingDesign) GetWorks() []*Works {
	if x != nil {
		return x.Works
	}
	return nil
}

func (x *WorkingDesign) GetSummary() *SummaryB {
	if x != nil {
		return x.Summary
	}
	return nil
}

type Works struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkloadTotal           float32 `protobuf:"fixed32,1,opt,name=WorkloadTotal,proto3" json:"WorkloadTotal,omitempty"`
	WorkloadCurrentYear     int32   `protobuf:"varint,2,opt,name=WorkloadCurrentYear,proto3" json:"WorkloadCurrentYear,omitempty"`
	PriceTotal              float32 `protobuf:"fixed32,3,opt,name=PriceTotal,proto3" json:"PriceTotal,omitempty"`
	PriceCurrentYear        int32   `protobuf:"varint,4,opt,name=PriceCurrentYear,proto3" json:"PriceCurrentYear,omitempty"`
	FromStartOfConstruction *Report `protobuf:"bytes,5,opt,name=FromStartOfConstruction,proto3" json:"FromStartOfConstruction,omitempty"`
	FromBeginningOfYear     *Report `protobuf:"bytes,6,opt,name=FromBeginningOfYear,proto3" json:"FromBeginningOfYear,omitempty"`
	ForReportingMonth       *Report `protobuf:"bytes,7,opt,name=ForReportingMonth,proto3" json:"ForReportingMonth,omitempty"`
	OrdNo                   int32   `protobuf:"varint,8,opt,name=OrdNo,proto3" json:"OrdNo,omitempty"`
	NormativeNumber         string  `protobuf:"bytes,9,opt,name=NormativeNumber,proto3" json:"NormativeNumber,omitempty"`
	Name                    string  `protobuf:"bytes,10,opt,name=Name,proto3" json:"Name,omitempty"`
	MeasureId               int32   `protobuf:"varint,11,opt,name=MeasureId,proto3" json:"MeasureId,omitempty"`
	MeasureName             string  `protobuf:"bytes,12,opt,name=MeasureName,proto3" json:"MeasureName,omitempty"`
}

func (x *Works) Reset() {
	*x = Works{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bFactura_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Works) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Works) ProtoMessage() {}

func (x *Works) ProtoReflect() protoreflect.Message {
	mi := &file_bFactura_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Works.ProtoReflect.Descriptor instead.
func (*Works) Descriptor() ([]byte, []int) {
	return file_bFactura_proto_rawDescGZIP(), []int{7}
}

func (x *Works) GetWorkloadTotal() float32 {
	if x != nil {
		return x.WorkloadTotal
	}
	return 0
}

func (x *Works) GetWorkloadCurrentYear() int32 {
	if x != nil {
		return x.WorkloadCurrentYear
	}
	return 0
}

func (x *Works) GetPriceTotal() float32 {
	if x != nil {
		return x.PriceTotal
	}
	return 0
}

func (x *Works) GetPriceCurrentYear() int32 {
	if x != nil {
		return x.PriceCurrentYear
	}
	return 0
}

func (x *Works) GetFromStartOfConstruction() *Report {
	if x != nil {
		return x.FromStartOfConstruction
	}
	return nil
}

func (x *Works) GetFromBeginningOfYear() *Report {
	if x != nil {
		return x.FromBeginningOfYear
	}
	return nil
}

func (x *Works) GetForReportingMonth() *Report {
	if x != nil {
		return x.ForReportingMonth
	}
	return nil
}

func (x *Works) GetOrdNo() int32 {
	if x != nil {
		return x.OrdNo
	}
	return 0
}

func (x *Works) GetNormativeNumber() string {
	if x != nil {
		return x.NormativeNumber
	}
	return ""
}

func (x *Works) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Works) GetMeasureId() int32 {
	if x != nil {
		return x.MeasureId
	}
	return 0
}

func (x *Works) GetMeasureName() string {
	if x != nil {
		return x.MeasureName
	}
	return ""
}

type Report struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Physical   float32 `protobuf:"fixed32,1,opt,name=Physical,proto3" json:"Physical,omitempty"`
	Percentage float32 `protobuf:"fixed32,2,opt,name=Percentage,proto3" json:"Percentage,omitempty"`
	Price      float32 `protobuf:"fixed32,3,opt,name=Price,proto3" json:"Price,omitempty"`
}

func (x *Report) Reset() {
	*x = Report{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bFactura_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Report) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Report) ProtoMessage() {}

func (x *Report) ProtoReflect() protoreflect.Message {
	mi := &file_bFactura_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Report.ProtoReflect.Descriptor instead.
func (*Report) Descriptor() ([]byte, []int) {
	return file_bFactura_proto_rawDescGZIP(), []int{8}
}

func (x *Report) GetPhysical() float32 {
	if x != nil {
		return x.Physical
	}
	return 0
}

func (x *Report) GetPercentage() float32 {
	if x != nil {
		return x.Percentage
	}
	return 0
}

func (x *Report) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

type SummaryB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total    *Total `protobuf:"bytes,1,opt,name=Total,proto3" json:"Total,omitempty"`
	Vat      *Vat   `protobuf:"bytes,2,opt,name=Vat,proto3" json:"Vat,omitempty"`
	TotalVat *Vat   `protobuf:"bytes,3,opt,name=TotalVat,proto3" json:"TotalVat,omitempty"`
}

func (x *SummaryB) Reset() {
	*x = SummaryB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bFactura_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummaryB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummaryB) ProtoMessage() {}

func (x *SummaryB) ProtoReflect() protoreflect.Message {
	mi := &file_bFactura_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummaryB.ProtoReflect.Descriptor instead.
func (*SummaryB) Descriptor() ([]byte, []int) {
	return file_bFactura_proto_rawDescGZIP(), []int{9}
}

func (x *SummaryB) GetTotal() *Total {
	if x != nil {
		return x.Total
	}
	return nil
}

func (x *SummaryB) GetVat() *Vat {
	if x != nil {
		return x.Vat
	}
	return nil
}

func (x *SummaryB) GetTotalVat() *Vat {
	if x != nil {
		return x.TotalVat
	}
	return nil
}

type Total struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkloadTotal           float32 `protobuf:"fixed32,1,opt,name=WorkloadTotal,proto3" json:"WorkloadTotal,omitempty"`
	WorkloadCurrentYear     float32 `protobuf:"fixed32,2,opt,name=WorkloadCurrentYear,proto3" json:"WorkloadCurrentYear,omitempty"`
	PriceTotal              float32 `protobuf:"fixed32,3,opt,name=PriceTotal,proto3" json:"PriceTotal,omitempty"`
	PriceCurrentYear        float32 `protobuf:"fixed32,4,opt,name=PriceCurrentYear,proto3" json:"PriceCurrentYear,omitempty"`
	FromStartOfConstruction *Report `protobuf:"bytes,5,opt,name=FromStartOfConstruction,proto3" json:"FromStartOfConstruction,omitempty"`
	FromBeginningOfYear     *Report `protobuf:"bytes,6,opt,name=FromBeginningOfYear,proto3" json:"FromBeginningOfYear,omitempty"`
	ForReportingMonth       *Report `protobuf:"bytes,7,opt,name=ForReportingMonth,proto3" json:"ForReportingMonth,omitempty"`
}

func (x *Total) Reset() {
	*x = Total{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bFactura_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Total) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Total) ProtoMessage() {}

func (x *Total) ProtoReflect() protoreflect.Message {
	mi := &file_bFactura_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Total.ProtoReflect.Descriptor instead.
func (*Total) Descriptor() ([]byte, []int) {
	return file_bFactura_proto_rawDescGZIP(), []int{10}
}

func (x *Total) GetWorkloadTotal() float32 {
	if x != nil {
		return x.WorkloadTotal
	}
	return 0
}

func (x *Total) GetWorkloadCurrentYear() float32 {
	if x != nil {
		return x.WorkloadCurrentYear
	}
	return 0
}

func (x *Total) GetPriceTotal() float32 {
	if x != nil {
		return x.PriceTotal
	}
	return 0
}

func (x *Total) GetPriceCurrentYear() float32 {
	if x != nil {
		return x.PriceCurrentYear
	}
	return 0
}

func (x *Total) GetFromStartOfConstruction() *Report {
	if x != nil {
		return x.FromStartOfConstruction
	}
	return nil
}

func (x *Total) GetFromBeginningOfYear() *Report {
	if x != nil {
		return x.FromBeginningOfYear
	}
	return nil
}

func (x *Total) GetForReportingMonth() *Report {
	if x != nil {
		return x.ForReportingMonth
	}
	return nil
}

type Vat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PriceTotal              float32 `protobuf:"fixed32,1,opt,name=PriceTotal,proto3" json:"PriceTotal,omitempty"`
	PriceCurrentYear        float32 `protobuf:"fixed32,2,opt,name=PriceCurrentYear,proto3" json:"PriceCurrentYear,omitempty"`
	FromStartOfConstruction float32 `protobuf:"fixed32,3,opt,name=FromStartOfConstruction,proto3" json:"FromStartOfConstruction,omitempty"`
	FromBeginningOfYear     float32 `protobuf:"fixed32,4,opt,name=FromBeginningOfYear,proto3" json:"FromBeginningOfYear,omitempty"`
	ForReportingMonth       float32 `protobuf:"fixed32,5,opt,name=ForReportingMonth,proto3" json:"ForReportingMonth,omitempty"`
}

func (x *Vat) Reset() {
	*x = Vat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bFactura_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vat) ProtoMessage() {}

func (x *Vat) ProtoReflect() protoreflect.Message {
	mi := &file_bFactura_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vat.ProtoReflect.Descriptor instead.
func (*Vat) Descriptor() ([]byte, []int) {
	return file_bFactura_proto_rawDescGZIP(), []int{11}
}

func (x *Vat) GetPriceTotal() float32 {
	if x != nil {
		return x.PriceTotal
	}
	return 0
}

func (x *Vat) GetPriceCurrentYear() float32 {
	if x != nil {
		return x.PriceCurrentYear
	}
	return 0
}

func (x *Vat) GetFromStartOfConstruction() float32 {
	if x != nil {
		return x.FromStartOfConstruction
	}
	return 0
}

func (x *Vat) GetFromBeginningOfYear() float32 {
	if x != nil {
		return x.FromBeginningOfYear
	}
	return 0
}

func (x *Vat) GetForReportingMonth() float32 {
	if x != nil {
		return x.ForReportingMonth
	}
	return 0
}

var File_bFactura_proto protoreflect.FileDescriptor

var file_bFactura_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x62, 0x46, 0x61, 0x63, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x16, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x17, 0x62, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb5, 0x09, 0x0a, 0x08,
	0x42, 0x46, 0x61, 0x63, 0x74, 0x75, 0x72, 0x61, 0x12, 0x2c, 0x0a, 0x11, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x74, 0x75, 0x72, 0x61, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63,
	0x74, 0x75, 0x72, 0x61, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x1b, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x69, 0x6e, 0x4f, 0x72,
	0x50, 0x69, 0x6e, 0x66, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x69,
	0x6e, 0x4f, 0x72, 0x50, 0x69, 0x6e, 0x66, 0x6c, 0x12, 0x2e, 0x0a, 0x12, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x54, 0x69, 0x6e, 0x4f, 0x72, 0x50, 0x69, 0x6e, 0x66, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x69,
	0x6e, 0x4f, 0x72, 0x50, 0x69, 0x6e, 0x66, 0x6c, 0x12, 0x4c, 0x0a, 0x11, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x52, 0x11, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x3a, 0x0a, 0x08, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f,
	0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x12, 0x3a, 0x0a, 0x18, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34,
	0x0a, 0x15, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x50, 0x69, 0x6e, 0x66, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x54,
	0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50,
	0x69, 0x6e, 0x66, 0x6c, 0x12, 0x7b, 0x0a, 0x1d, 0x53, 0x75, 0x62, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63,
	0x74, 0x75, 0x72, 0x61, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6d, 0x6f,
	0x6e, 0x67, 0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x74, 0x75, 0x72,
	0x61, 0x73, 0x52, 0x1d, 0x53, 0x75, 0x62, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x74, 0x75, 0x72, 0x61,
	0x73, 0x12, 0x5a, 0x0a, 0x12, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63,
	0x74, 0x75, 0x72, 0x61, 0x44, 0x6f, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x46,
	0x61, 0x63, 0x74, 0x75, 0x72, 0x61, 0x44, 0x6f, 0x63, 0x52, 0x12, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x74, 0x75, 0x72, 0x61, 0x44, 0x6f, 0x63, 0x12, 0x45, 0x0a,
	0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x6f, 0x63, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x44, 0x6f, 0x63, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x44, 0x6f, 0x63, 0x12, 0x5a, 0x0a, 0x12, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x44, 0x6f, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x44, 0x6f, 0x63, 0x52, 0x12, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x44, 0x6f, 0x63,
	0x12, 0x57, 0x0a, 0x11, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x44, 0x6f, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x6f,
	0x6e, 0x67, 0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x44, 0x6f, 0x63, 0x52, 0x11, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x6f, 0x63, 0x12, 0x4b, 0x0a, 0x0d, 0x57, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x0d, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67,
	0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x51, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x10, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x12, 0x43, 0x0a, 0x09, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d,
	0x6f, 0x6e, 0x67, 0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x73,
	0x69, 0x67, 0x6e, 0x52, 0x09, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x33,
	0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x05, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x22, 0xe1, 0x02, 0x0a, 0x0f, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67,
	0x46, 0x61, 0x63, 0x74, 0x75, 0x72, 0x61, 0x12, 0x4a, 0x0a, 0x0f, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x74, 0x75, 0x72, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x46, 0x61, 0x63, 0x74, 0x75,
	0x72, 0x61, 0x52, 0x0f, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x74,
	0x75, 0x72, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x53,
	0x69, 0x67, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x53, 0x69, 0x67, 0x6e, 0x12,
	0x1e, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x64, 0x66, 0x55, 0x7a,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x50, 0x64, 0x66, 0x55, 0x7a, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x50, 0x64, 0x66, 0x52, 0x75, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x64, 0x66, 0x52, 0x75, 0x12, 0x1c, 0x0a, 0x09, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x74, 0x6d, 0x6c, 0x55,
	0x7a, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x48, 0x74, 0x6d, 0x6c, 0x55, 0x7a, 0x12,
	0x16, 0x0a, 0x06, 0x48, 0x74, 0x6d, 0x6c, 0x52, 0x75, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x48, 0x74, 0x6d, 0x6c, 0x52, 0x75, 0x22, 0xe4, 0x03, 0x0a, 0x06, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x57, 0x6f,
	0x72, 0x6b, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x57,
	0x6f, 0x72, 0x6b, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4f, 0x6b, 0x65, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4f, 0x6b, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x56, 0x61, 0x74, 0x52,
	0x65, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x56, 0x61,
	0x74, 0x52, 0x65, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x56, 0x61, 0x74, 0x52,
	0x65, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x56, 0x61, 0x74,
	0x52, 0x65, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x54, 0x61, 0x78,
	0x47, 0x61, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x54, 0x61, 0x78, 0x47, 0x61, 0x70, 0x22, 0xad,
	0x01, 0x0a, 0x1d, 0x53, 0x75, 0x62, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x74, 0x75, 0x72, 0x61, 0x73,
	0x12, 0x2c, 0x0a, 0x11, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x74,
	0x75, 0x72, 0x61, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x74, 0x75, 0x72, 0x61, 0x49, 0x64, 0x12, 0x2c,
	0x0a, 0x11, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x74, 0x75, 0x72,
	0x61, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x74, 0x75, 0x72, 0x61, 0x4e, 0x6f, 0x12, 0x30, 0x0a, 0x13,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x74, 0x75, 0x72, 0x61, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x74, 0x75, 0x72, 0x61, 0x44, 0x61, 0x74, 0x65, 0x22, 0x74,
	0x0a, 0x12, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x44, 0x6f, 0x63, 0x12, 0x30, 0x0a, 0x13, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x2c, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x54, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x54, 0x6f, 0x22, 0x75, 0x0a, 0x11, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x6f, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x0d,
	0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x33, 0x0a,
	0x05, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d,
	0x6f, 0x6e, 0x67, 0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x52, 0x05, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x12, 0x3a, 0x0a, 0x07, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x42, 0x52, 0x07, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0xb9,
	0x04, 0x0a, 0x05, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x57, 0x6f, 0x72, 0x6b,
	0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0d, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x30,
	0x0a, 0x13, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x59, 0x65, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x57, 0x6f, 0x72,
	0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x59, 0x65, 0x61, 0x72,
	0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x2a, 0x0a, 0x10, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x59, 0x65, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x59, 0x65, 0x61, 0x72, 0x12, 0x58, 0x0a, 0x17,
	0x46, 0x72, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x17, 0x46,
	0x72, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x13, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x65,
	0x67, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x59, 0x65, 0x61, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x13, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x4f, 0x66, 0x59, 0x65, 0x61, 0x72, 0x12, 0x4c, 0x0a, 0x11, 0x46, 0x6f, 0x72, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x11, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x4e, 0x6f, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4f, 0x72, 0x64, 0x4e, 0x6f, 0x12, 0x28, 0x0a, 0x0f,
	0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x5a, 0x0a, 0x06, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c,
	0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0xa7, 0x01, 0x0a, 0x08, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x42, 0x12, 0x33, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2d, 0x0a, 0x03, 0x56, 0x61, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56,
	0x61, 0x74, 0x52, 0x03, 0x56, 0x61, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x56, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x6e, 0x67,
	0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x56, 0x61, 0x74, 0x52, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x61, 0x74,
	0x22, 0xa5, 0x03, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x57, 0x6f,
	0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0d, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x30, 0x0a, 0x13, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x59, 0x65, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x57,
	0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x59, 0x65,
	0x61, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x59, 0x65, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x59, 0x65, 0x61, 0x72, 0x12, 0x58,
	0x0a, 0x17, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x17, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x13, 0x46, 0x72, 0x6f, 0x6d,
	0x42, 0x65, 0x67, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x59, 0x65, 0x61, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x13, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x65, 0x67, 0x69, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x59, 0x65, 0x61, 0x72, 0x12, 0x4c, 0x0a, 0x11, 0x46, 0x6f,
	0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x11, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x22, 0xeb, 0x01, 0x0a, 0x03, 0x56, 0x61, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x2a, 0x0a, 0x10, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x59, 0x65, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x59, 0x65, 0x61, 0x72, 0x12, 0x38, 0x0a, 0x17,
	0x46, 0x72, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x17, 0x46,
	0x72, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x13, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x65,
	0x67, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x59, 0x65, 0x61, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x13, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x4f, 0x66, 0x59, 0x65, 0x61, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x46, 0x6f, 0x72, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x11, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x32, 0xca, 0x02, 0x0a, 0x16, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x74, 0x75, 0x72, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x4b, 0x0a, 0x06, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x12, 0x27, 0x2e, 0x6d, 0x6f,
	0x6e, 0x67, 0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63,
	0x74, 0x75, 0x72, 0x61, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4e,
	0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x1c, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42,
	0x79, 0x49, 0x64, 0x1a, 0x27, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x74, 0x75, 0x72, 0x61, 0x22, 0x00, 0x12, 0x40,
	0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1c, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f,
	0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x42, 0x79, 0x49, 0x64, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x51, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x27, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x42, 0x21, 0x5a, 0x1f, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bFactura_proto_rawDescOnce sync.Once
	file_bFactura_proto_rawDescData = file_bFactura_proto_rawDesc
)

func file_bFactura_proto_rawDescGZIP() []byte {
	file_bFactura_proto_rawDescOnce.Do(func() {
		file_bFactura_proto_rawDescData = protoimpl.X.CompressGZIP(file_bFactura_proto_rawDescData)
	})
	return file_bFactura_proto_rawDescData
}

var file_bFactura_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_bFactura_proto_goTypes = []interface{}{
	(*BFactura)(nil),                      // 0: mongo_document_service.BFactura
	(*BuildingFactura)(nil),               // 1: mongo_document_service.BuildingFactura
	(*Client)(nil),                        // 2: mongo_document_service.Client
	(*SubcontractorBuildingFacturas)(nil), // 3: mongo_document_service.SubcontractorBuildingFacturas
	(*ReportingPeriodDoc)(nil),            // 4: mongo_document_service.ReportingPeriodDoc
	(*BuildingObjectDoc)(nil),             // 5: mongo_document_service.BuildingObjectDoc
	(*WorkingDesign)(nil),                 // 6: mongo_document_service.WorkingDesign
	(*Works)(nil),                         // 7: mongo_document_service.Works
	(*Report)(nil),                        // 8: mongo_document_service.Report
	(*SummaryB)(nil),                      // 9: mongo_document_service.SummaryB
	(*Total)(nil),                         // 10: mongo_document_service.Total
	(*Vat)(nil),                           // 11: mongo_document_service.Vat
	(*BuildingFacturaDoc)(nil),            // 12: mongo_document_service.BuildingFacturaDoc
	(*ContractDoc)(nil),                   // 13: mongo_document_service.ContractDoc
	(*wrapperspb.Int32Value)(nil),         // 14: google.protobuf.Int32Value
	(*wrapperspb.FloatValue)(nil),         // 15: google.protobuf.FloatValue
	(*ById)(nil),                          // 16: mongo_document_service.ById
	(*UpdateStatusReq)(nil),               // 17: mongo_document_service.UpdateStatusReq
	(*emptypb.Empty)(nil),                 // 18: google.protobuf.Empty
}
var file_bFactura_proto_depIdxs = []int32{
	2,  // 0: mongo_document_service.BFactura.GeneralContractor:type_name -> mongo_document_service.Client
	2,  // 1: mongo_document_service.BFactura.Customer:type_name -> mongo_document_service.Client
	3,  // 2: mongo_document_service.BFactura.SubcontractorBuildingFacturas:type_name -> mongo_document_service.SubcontractorBuildingFacturas
	12, // 3: mongo_document_service.BFactura.BuildingFacturaDoc:type_name -> mongo_document_service.BuildingFacturaDoc
	13, // 4: mongo_document_service.BFactura.ContractDoc:type_name -> mongo_document_service.ContractDoc
	4,  // 5: mongo_document_service.BFactura.ReportingPeriodDoc:type_name -> mongo_document_service.ReportingPeriodDoc
	5,  // 6: mongo_document_service.BFactura.BuildingObjectDoc:type_name -> mongo_document_service.BuildingObjectDoc
	6,  // 7: mongo_document_service.BFactura.WorkingDesign:type_name -> mongo_document_service.WorkingDesign
	6,  // 8: mongo_document_service.BFactura.ConstructionWork:type_name -> mongo_document_service.WorkingDesign
	6,  // 9: mongo_document_service.BFactura.Equipment:type_name -> mongo_document_service.WorkingDesign
	10, // 10: mongo_document_service.BFactura.Total:type_name -> mongo_document_service.Total
	0,  // 11: mongo_document_service.BuildingFactura.BuildingFactura:type_name -> mongo_document_service.BFactura
	14, // 12: mongo_document_service.Client.VatRegStatus:type_name -> google.protobuf.Int32Value
	15, // 13: mongo_document_service.Client.TaxGap:type_name -> google.protobuf.FloatValue
	7,  // 14: mongo_document_service.WorkingDesign.Works:type_name -> mongo_document_service.Works
	9,  // 15: mongo_document_service.WorkingDesign.Summary:type_name -> mongo_document_service.SummaryB
	8,  // 16: mongo_document_service.Works.FromStartOfConstruction:type_name -> mongo_document_service.Report
	8,  // 17: mongo_document_service.Works.FromBeginningOfYear:type_name -> mongo_document_service.Report
	8,  // 18: mongo_document_service.Works.ForReportingMonth:type_name -> mongo_document_service.Report
	10, // 19: mongo_document_service.SummaryB.Total:type_name -> mongo_document_service.Total
	11, // 20: mongo_document_service.SummaryB.Vat:type_name -> mongo_document_service.Vat
	11, // 21: mongo_document_service.SummaryB.TotalVat:type_name -> mongo_document_service.Vat
	8,  // 22: mongo_document_service.Total.FromStartOfConstruction:type_name -> mongo_document_service.Report
	8,  // 23: mongo_document_service.Total.FromBeginningOfYear:type_name -> mongo_document_service.Report
	8,  // 24: mongo_document_service.Total.ForReportingMonth:type_name -> mongo_document_service.Report
	1,  // 25: mongo_document_service.BuildingFacturaService.Upsert:input_type -> mongo_document_service.BuildingFactura
	16, // 26: mongo_document_service.BuildingFacturaService.Get:input_type -> mongo_document_service.ById
	16, // 27: mongo_document_service.BuildingFacturaService.Delete:input_type -> mongo_document_service.ById
	17, // 28: mongo_document_service.BuildingFacturaService.UpdateStatus:input_type -> mongo_document_service.UpdateStatusReq
	18, // 29: mongo_document_service.BuildingFacturaService.Upsert:output_type -> google.protobuf.Empty
	1,  // 30: mongo_document_service.BuildingFacturaService.Get:output_type -> mongo_document_service.BuildingFactura
	18, // 31: mongo_document_service.BuildingFacturaService.Delete:output_type -> google.protobuf.Empty
	18, // 32: mongo_document_service.BuildingFacturaService.UpdateStatus:output_type -> google.protobuf.Empty
	29, // [29:33] is the sub-list for method output_type
	25, // [25:29] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_bFactura_proto_init() }
func file_bFactura_proto_init() {
	if File_bFactura_proto != nil {
		return
	}
	file_mongo_proto_init()
	file_bCalculationTable_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_bFactura_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BFactura); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bFactura_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildingFactura); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bFactura_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Client); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bFactura_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubcontractorBuildingFacturas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bFactura_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportingPeriodDoc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bFactura_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildingObjectDoc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bFactura_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkingDesign); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bFactura_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Works); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bFactura_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Report); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bFactura_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SummaryB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bFactura_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Total); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bFactura_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bFactura_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bFactura_proto_goTypes,
		DependencyIndexes: file_bFactura_proto_depIdxs,
		MessageInfos:      file_bFactura_proto_msgTypes,
	}.Build()
	File_bFactura_proto = out.File
	file_bFactura_proto_rawDesc = nil
	file_bFactura_proto_goTypes = nil
	file_bFactura_proto_depIdxs = nil
}
