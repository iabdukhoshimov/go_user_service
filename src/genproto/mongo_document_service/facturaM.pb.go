// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: facturaM.proto

package mongo_document_service

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FacturaMongo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version               int32                  `protobuf:"varint,1,opt,name=Version,proto3" json:"Version,omitempty"`
	FacturaType           int32                  `protobuf:"varint,2,opt,name=FacturaType,proto3" json:"FacturaType,omitempty"`
	SingleSidedType       int32                  `protobuf:"varint,3,opt,name=SingleSidedType,proto3" json:"SingleSidedType,omitempty"`
	HasMarking            bool                   `protobuf:"varint,4,opt,name=HasMarking,proto3" json:"HasMarking,omitempty"`
	FacturaId             string                 `protobuf:"bytes,5,opt,name=FacturaId,proto3" json:"FacturaId,omitempty"`
	FacturaDoc            *FacturaDoc            `protobuf:"bytes,6,opt,name=FacturaDoc,proto3" json:"FacturaDoc,omitempty"`
	OldFacturaDoc         *OldFacturaDoc         `protobuf:"bytes,7,opt,name=OldFacturaDoc,proto3" json:"OldFacturaDoc,omitempty"`
	ContractDoc           *ContractDoc           `protobuf:"bytes,8,opt,name=ContractDoc,proto3" json:"ContractDoc,omitempty"`
	FacturaEmpowermentDoc *FacturaEmpowermentDoc `protobuf:"bytes,9,opt,name=FacturaEmpowermentDoc,proto3" json:"FacturaEmpowermentDoc,omitempty"`
	ItemReleasedDoc       *ItemReleasedDoc       `protobuf:"bytes,10,opt,name=ItemReleasedDoc,proto3" json:"ItemReleasedDoc,omitempty"`
	SellerTin             string                 `protobuf:"bytes,11,opt,name=SellerTin,proto3" json:"SellerTin,omitempty"`
	BuyerTin              string                 `protobuf:"bytes,12,opt,name=BuyerTin,proto3" json:"BuyerTin,omitempty"`
	Seller                *Client                `protobuf:"bytes,13,opt,name=Seller,proto3" json:"Seller,omitempty"`
	Buyer                 *Client                `protobuf:"bytes,14,opt,name=Buyer,proto3" json:"Buyer,omitempty"`
	ForeignCompany        *ForeignCompany        `protobuf:"bytes,15,opt,name=ForeignCompany,proto3" json:"ForeignCompany,omitempty"`
	ProductList           *ProductListFac        `protobuf:"bytes,16,opt,name=ProductList,proto3" json:"ProductList,omitempty"`
	IncomeType            int32                  `protobuf:"varint,17,opt,name=IncomeType,proto3" json:"IncomeType,omitempty"`
	LotId                 string                 `protobuf:"bytes,18,opt,name=LotId,proto3" json:"LotId,omitempty"`
	ContractId            string                 `protobuf:"bytes,19,opt,name=ContractId,proto3" json:"ContractId,omitempty"`
	WaybillId             string                 `protobuf:"bytes,20,opt,name=WaybillId,proto3" json:"WaybillId,omitempty"`
	Status                string                 `protobuf:"bytes,21,opt,name=Status,proto3" json:"Status,omitempty"`
}

func (x *FacturaMongo) Reset() {
	*x = FacturaMongo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_facturaM_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FacturaMongo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FacturaMongo) ProtoMessage() {}

func (x *FacturaMongo) ProtoReflect() protoreflect.Message {
	mi := &file_facturaM_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FacturaMongo.ProtoReflect.Descriptor instead.
func (*FacturaMongo) Descriptor() ([]byte, []int) {
	return file_facturaM_proto_rawDescGZIP(), []int{0}
}

func (x *FacturaMongo) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *FacturaMongo) GetFacturaType() int32 {
	if x != nil {
		return x.FacturaType
	}
	return 0
}

func (x *FacturaMongo) GetSingleSidedType() int32 {
	if x != nil {
		return x.SingleSidedType
	}
	return 0
}

func (x *FacturaMongo) GetHasMarking() bool {
	if x != nil {
		return x.HasMarking
	}
	return false
}

func (x *FacturaMongo) GetFacturaId() string {
	if x != nil {
		return x.FacturaId
	}
	return ""
}

func (x *FacturaMongo) GetFacturaDoc() *FacturaDoc {
	if x != nil {
		return x.FacturaDoc
	}
	return nil
}

func (x *FacturaMongo) GetOldFacturaDoc() *OldFacturaDoc {
	if x != nil {
		return x.OldFacturaDoc
	}
	return nil
}

func (x *FacturaMongo) GetContractDoc() *ContractDoc {
	if x != nil {
		return x.ContractDoc
	}
	return nil
}

func (x *FacturaMongo) GetFacturaEmpowermentDoc() *FacturaEmpowermentDoc {
	if x != nil {
		return x.FacturaEmpowermentDoc
	}
	return nil
}

func (x *FacturaMongo) GetItemReleasedDoc() *ItemReleasedDoc {
	if x != nil {
		return x.ItemReleasedDoc
	}
	return nil
}

func (x *FacturaMongo) GetSellerTin() string {
	if x != nil {
		return x.SellerTin
	}
	return ""
}

func (x *FacturaMongo) GetBuyerTin() string {
	if x != nil {
		return x.BuyerTin
	}
	return ""
}

func (x *FacturaMongo) GetSeller() *Client {
	if x != nil {
		return x.Seller
	}
	return nil
}

func (x *FacturaMongo) GetBuyer() *Client {
	if x != nil {
		return x.Buyer
	}
	return nil
}

func (x *FacturaMongo) GetForeignCompany() *ForeignCompany {
	if x != nil {
		return x.ForeignCompany
	}
	return nil
}

func (x *FacturaMongo) GetProductList() *ProductListFac {
	if x != nil {
		return x.ProductList
	}
	return nil
}

func (x *FacturaMongo) GetIncomeType() int32 {
	if x != nil {
		return x.IncomeType
	}
	return 0
}

func (x *FacturaMongo) GetLotId() string {
	if x != nil {
		return x.LotId
	}
	return ""
}

func (x *FacturaMongo) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *FacturaMongo) GetWaybillId() string {
	if x != nil {
		return x.WaybillId
	}
	return ""
}

func (x *FacturaMongo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type Factura struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Factura    *FacturaMongo `protobuf:"bytes,1,opt,name=Factura,proto3" json:"Factura,omitempty"`
	PdfUrlUz   string        `protobuf:"bytes,2,opt,name=PdfUrlUz,proto3" json:"PdfUrlUz,omitempty"`
	PdfUrlRu   string        `protobuf:"bytes,3,opt,name=PdfUrlRu,proto3" json:"PdfUrlRu,omitempty"`
	Status     string        `protobuf:"bytes,4,opt,name=Status,proto3" json:"Status,omitempty"`
	PageStatus string        `protobuf:"bytes,5,opt,name=PageStatus,proto3" json:"PageStatus,omitempty"`
	CreatedAt  string        `protobuf:"bytes,6,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt  string        `protobuf:"bytes,7,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	Sign       string        `protobuf:"bytes,8,opt,name=Sign,proto3" json:"Sign,omitempty"`
	HtmlUz     string        `protobuf:"bytes,9,opt,name=HtmlUz,proto3" json:"HtmlUz,omitempty"`
	HtmlRu     string        `protobuf:"bytes,10,opt,name=HtmlRu,proto3" json:"HtmlRu,omitempty"`
}

func (x *Factura) Reset() {
	*x = Factura{}
	if protoimpl.UnsafeEnabled {
		mi := &file_facturaM_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Factura) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Factura) ProtoMessage() {}

func (x *Factura) ProtoReflect() protoreflect.Message {
	mi := &file_facturaM_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Factura.ProtoReflect.Descriptor instead.
func (*Factura) Descriptor() ([]byte, []int) {
	return file_facturaM_proto_rawDescGZIP(), []int{1}
}

func (x *Factura) GetFactura() *FacturaMongo {
	if x != nil {
		return x.Factura
	}
	return nil
}

func (x *Factura) GetPdfUrlUz() string {
	if x != nil {
		return x.PdfUrlUz
	}
	return ""
}

func (x *Factura) GetPdfUrlRu() string {
	if x != nil {
		return x.PdfUrlRu
	}
	return ""
}

func (x *Factura) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Factura) GetPageStatus() string {
	if x != nil {
		return x.PageStatus
	}
	return ""
}

func (x *Factura) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Factura) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *Factura) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

func (x *Factura) GetHtmlUz() string {
	if x != nil {
		return x.HtmlUz
	}
	return ""
}

func (x *Factura) GetHtmlRu() string {
	if x != nil {
		return x.HtmlRu
	}
	return ""
}

type FacturaDoc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FacturaNo   string `protobuf:"bytes,1,opt,name=FacturaNo,proto3" json:"FacturaNo,omitempty"`
	FacturaDate string `protobuf:"bytes,2,opt,name=FacturaDate,proto3" json:"FacturaDate,omitempty"`
}

func (x *FacturaDoc) Reset() {
	*x = FacturaDoc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_facturaM_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FacturaDoc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FacturaDoc) ProtoMessage() {}

func (x *FacturaDoc) ProtoReflect() protoreflect.Message {
	mi := &file_facturaM_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FacturaDoc.ProtoReflect.Descriptor instead.
func (*FacturaDoc) Descriptor() ([]byte, []int) {
	return file_facturaM_proto_rawDescGZIP(), []int{2}
}

func (x *FacturaDoc) GetFacturaNo() string {
	if x != nil {
		return x.FacturaNo
	}
	return ""
}

func (x *FacturaDoc) GetFacturaDate() string {
	if x != nil {
		return x.FacturaDate
	}
	return ""
}

type OldFacturaDoc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OldFacturaId   string `protobuf:"bytes,1,opt,name=OldFacturaId,proto3" json:"OldFacturaId,omitempty"`
	OldFacturaNo   string `protobuf:"bytes,2,opt,name=OldFacturaNo,proto3" json:"OldFacturaNo,omitempty"`
	OldFacturaDate string `protobuf:"bytes,3,opt,name=OldFacturaDate,proto3" json:"OldFacturaDate,omitempty"`
}

func (x *OldFacturaDoc) Reset() {
	*x = OldFacturaDoc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_facturaM_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OldFacturaDoc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OldFacturaDoc) ProtoMessage() {}

func (x *OldFacturaDoc) ProtoReflect() protoreflect.Message {
	mi := &file_facturaM_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OldFacturaDoc.ProtoReflect.Descriptor instead.
func (*OldFacturaDoc) Descriptor() ([]byte, []int) {
	return file_facturaM_proto_rawDescGZIP(), []int{3}
}

func (x *OldFacturaDoc) GetOldFacturaId() string {
	if x != nil {
		return x.OldFacturaId
	}
	return ""
}

func (x *OldFacturaDoc) GetOldFacturaNo() string {
	if x != nil {
		return x.OldFacturaNo
	}
	return ""
}

func (x *OldFacturaDoc) GetOldFacturaDate() string {
	if x != nil {
		return x.OldFacturaDate
	}
	return ""
}

type FacturaEmpowermentDoc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EmpowermentNo          string `protobuf:"bytes,1,opt,name=EmpowermentNo,proto3" json:"EmpowermentNo,omitempty"`
	EmpowermentDateOfIssue string `protobuf:"bytes,2,opt,name=EmpowermentDateOfIssue,proto3" json:"EmpowermentDateOfIssue,omitempty"`
	AgentFacturaId         string `protobuf:"bytes,3,opt,name=AgentFacturaId,proto3" json:"AgentFacturaId,omitempty"`
	AgentFio               string `protobuf:"bytes,4,opt,name=AgentFio,proto3" json:"AgentFio,omitempty"`
	AgentPinfl             string `protobuf:"bytes,5,opt,name=AgentPinfl,proto3" json:"AgentPinfl,omitempty"`
}

func (x *FacturaEmpowermentDoc) Reset() {
	*x = FacturaEmpowermentDoc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_facturaM_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FacturaEmpowermentDoc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FacturaEmpowermentDoc) ProtoMessage() {}

func (x *FacturaEmpowermentDoc) ProtoReflect() protoreflect.Message {
	mi := &file_facturaM_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FacturaEmpowermentDoc.ProtoReflect.Descriptor instead.
func (*FacturaEmpowermentDoc) Descriptor() ([]byte, []int) {
	return file_facturaM_proto_rawDescGZIP(), []int{4}
}

func (x *FacturaEmpowermentDoc) GetEmpowermentNo() string {
	if x != nil {
		return x.EmpowermentNo
	}
	return ""
}

func (x *FacturaEmpowermentDoc) GetEmpowermentDateOfIssue() string {
	if x != nil {
		return x.EmpowermentDateOfIssue
	}
	return ""
}

func (x *FacturaEmpowermentDoc) GetAgentFacturaId() string {
	if x != nil {
		return x.AgentFacturaId
	}
	return ""
}

func (x *FacturaEmpowermentDoc) GetAgentFio() string {
	if x != nil {
		return x.AgentFio
	}
	return ""
}

func (x *FacturaEmpowermentDoc) GetAgentPinfl() string {
	if x != nil {
		return x.AgentPinfl
	}
	return ""
}

type ItemReleasedDoc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemReleasedFio   string `protobuf:"bytes,1,opt,name=ItemReleasedFio,proto3" json:"ItemReleasedFio,omitempty"`
	ItemReleasedPinfl string `protobuf:"bytes,2,opt,name=ItemReleasedPinfl,proto3" json:"ItemReleasedPinfl,omitempty"`
}

func (x *ItemReleasedDoc) Reset() {
	*x = ItemReleasedDoc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_facturaM_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemReleasedDoc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemReleasedDoc) ProtoMessage() {}

func (x *ItemReleasedDoc) ProtoReflect() protoreflect.Message {
	mi := &file_facturaM_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemReleasedDoc.ProtoReflect.Descriptor instead.
func (*ItemReleasedDoc) Descriptor() ([]byte, []int) {
	return file_facturaM_proto_rawDescGZIP(), []int{5}
}

func (x *ItemReleasedDoc) GetItemReleasedFio() string {
	if x != nil {
		return x.ItemReleasedFio
	}
	return ""
}

func (x *ItemReleasedDoc) GetItemReleasedPinfl() string {
	if x != nil {
		return x.ItemReleasedPinfl
	}
	return ""
}

type ForeignCompany struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CountryId string `protobuf:"bytes,1,opt,name=CountryId,proto3" json:"CountryId,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Address   string `protobuf:"bytes,3,opt,name=Address,proto3" json:"Address,omitempty"`
	Bank      string `protobuf:"bytes,4,opt,name=Bank,proto3" json:"Bank,omitempty"`
	Account   string `protobuf:"bytes,5,opt,name=Account,proto3" json:"Account,omitempty"`
}

func (x *ForeignCompany) Reset() {
	*x = ForeignCompany{}
	if protoimpl.UnsafeEnabled {
		mi := &file_facturaM_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForeignCompany) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForeignCompany) ProtoMessage() {}

func (x *ForeignCompany) ProtoReflect() protoreflect.Message {
	mi := &file_facturaM_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForeignCompany.ProtoReflect.Descriptor instead.
func (*ForeignCompany) Descriptor() ([]byte, []int) {
	return file_facturaM_proto_rawDescGZIP(), []int{6}
}

func (x *ForeignCompany) GetCountryId() string {
	if x != nil {
		return x.CountryId
	}
	return ""
}

func (x *ForeignCompany) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ForeignCompany) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ForeignCompany) GetBank() string {
	if x != nil {
		return x.Bank
	}
	return ""
}

func (x *ForeignCompany) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

type ProductListFac struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FacturaProductId     string             `protobuf:"bytes,1,opt,name=FacturaProductId,proto3" json:"FacturaProductId,omitempty"`
	Tin                  string             `protobuf:"bytes,2,opt,name=Tin,proto3" json:"Tin,omitempty"`
	HasExcise            bool               `protobuf:"varint,3,opt,name=HasExcise,proto3" json:"HasExcise,omitempty"`
	HasVat               bool               `protobuf:"varint,4,opt,name=HasVat,proto3" json:"HasVat,omitempty"`
	HasCommittent        bool               `protobuf:"varint,5,opt,name=HasCommittent,proto3" json:"HasCommittent,omitempty"`
	HasLgota             bool               `protobuf:"varint,6,opt,name=HasLgota,proto3" json:"HasLgota,omitempty"`
	HasMedical           bool               `protobuf:"varint,7,opt,name=HasMedical,proto3" json:"HasMedical,omitempty"`
	HideReportCommittent bool               `protobuf:"varint,8,opt,name=HideReportCommittent,proto3" json:"HideReportCommittent,omitempty"`
	Products             []*FacturaProducts `protobuf:"bytes,9,rep,name=Products,proto3" json:"Products,omitempty"`
}

func (x *ProductListFac) Reset() {
	*x = ProductListFac{}
	if protoimpl.UnsafeEnabled {
		mi := &file_facturaM_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductListFac) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductListFac) ProtoMessage() {}

func (x *ProductListFac) ProtoReflect() protoreflect.Message {
	mi := &file_facturaM_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductListFac.ProtoReflect.Descriptor instead.
func (*ProductListFac) Descriptor() ([]byte, []int) {
	return file_facturaM_proto_rawDescGZIP(), []int{7}
}

func (x *ProductListFac) GetFacturaProductId() string {
	if x != nil {
		return x.FacturaProductId
	}
	return ""
}

func (x *ProductListFac) GetTin() string {
	if x != nil {
		return x.Tin
	}
	return ""
}

func (x *ProductListFac) GetHasExcise() bool {
	if x != nil {
		return x.HasExcise
	}
	return false
}

func (x *ProductListFac) GetHasVat() bool {
	if x != nil {
		return x.HasVat
	}
	return false
}

func (x *ProductListFac) GetHasCommittent() bool {
	if x != nil {
		return x.HasCommittent
	}
	return false
}

func (x *ProductListFac) GetHasLgota() bool {
	if x != nil {
		return x.HasLgota
	}
	return false
}

func (x *ProductListFac) GetHasMedical() bool {
	if x != nil {
		return x.HasMedical
	}
	return false
}

func (x *ProductListFac) GetHideReportCommittent() bool {
	if x != nil {
		return x.HideReportCommittent
	}
	return false
}

func (x *ProductListFac) GetProducts() []*FacturaProducts {
	if x != nil {
		return x.Products
	}
	return nil
}

type FacturaProducts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index                  int32                  `protobuf:"varint,1,opt,name=Index,proto3" json:"Index,omitempty"`
	OrdNo                  string                 `protobuf:"bytes,2,opt,name=OrdNo,proto3" json:"OrdNo,omitempty"`
	CommittentName         string                 `protobuf:"bytes,3,opt,name=CommittentName,proto3" json:"CommittentName,omitempty"`
	CommittentTin          string                 `protobuf:"bytes,4,opt,name=CommittentTin,proto3" json:"CommittentTin,omitempty"`
	CommittentVatRegCode   string                 `protobuf:"bytes,5,opt,name=CommittentVatRegCode,proto3" json:"CommittentVatRegCode,omitempty"`
	CatalogCode            string                 `protobuf:"bytes,6,opt,name=CatalogCode,proto3" json:"CatalogCode,omitempty"`
	CatalogName            string                 `protobuf:"bytes,7,opt,name=CatalogName,proto3" json:"CatalogName,omitempty"`
	Barcode                string                 `protobuf:"bytes,8,opt,name=Barcode,proto3" json:"Barcode,omitempty"`
	Name                   string                 `protobuf:"bytes,9,opt,name=Name,proto3" json:"Name,omitempty"`
	Serial                 string                 `protobuf:"bytes,10,opt,name=Serial,proto3" json:"Serial,omitempty"`
	MeasureId              string                 `protobuf:"bytes,11,opt,name=MeasureId,proto3" json:"MeasureId,omitempty"`
	BaseSumma              float32                `protobuf:"fixed32,12,opt,name=BaseSumma,proto3" json:"BaseSumma,omitempty"`
	ProfitRate             float32                `protobuf:"fixed32,13,opt,name=ProfitRate,proto3" json:"ProfitRate,omitempty"`
	Count                  float32                `protobuf:"fixed32,14,opt,name=Count,proto3" json:"Count,omitempty"`
	Summa                  float32                `protobuf:"fixed32,15,opt,name=Summa,proto3" json:"Summa,omitempty"`
	DeliverySum            float32                `protobuf:"fixed32,16,opt,name=DeliverySum,proto3" json:"DeliverySum,omitempty"`
	ExciseRate             float32                `protobuf:"fixed32,17,opt,name=ExciseRate,proto3" json:"ExciseRate,omitempty"`
	ExciseSum              float32                `protobuf:"fixed32,18,opt,name=ExciseSum,proto3" json:"ExciseSum,omitempty"`
	VatRate                float32                `protobuf:"fixed32,19,opt,name=VatRate,proto3" json:"VatRate,omitempty"`
	VatSum                 float32                `protobuf:"fixed32,20,opt,name=VatSum,proto3" json:"VatSum,omitempty"`
	DeliverySumWithVat     float32                `protobuf:"fixed32,21,opt,name=DeliverySumWithVat,proto3" json:"DeliverySumWithVat,omitempty"`
	WithoutVat             bool                   `protobuf:"varint,22,opt,name=WithoutVat,proto3" json:"WithoutVat,omitempty"`
	PackageCode            string                 `protobuf:"bytes,23,opt,name=PackageCode,proto3" json:"PackageCode,omitempty"`
	PackageName            string                 `protobuf:"bytes,24,opt,name=PackageName,proto3" json:"PackageName,omitempty"`
	LgotaId                *wrapperspb.Int32Value `protobuf:"bytes,25,opt,name=LgotaId,proto3" json:"LgotaId,omitempty"`
	CommittentVatRegStatus *wrapperspb.Int32Value `protobuf:"bytes,26,opt,name=CommittentVatRegStatus,proto3" json:"CommittentVatRegStatus,omitempty"`
	Marks                  *Marks                 `protobuf:"bytes,27,opt,name=Marks,proto3" json:"Marks,omitempty"`
	ExchangeInfo           *ExchangeInfo          `protobuf:"bytes,28,opt,name=ExchangeInfo,proto3" json:"ExchangeInfo,omitempty"`
	MeasureName            string                 `protobuf:"bytes,29,opt,name=MeasureName,proto3" json:"MeasureName,omitempty"`
}

func (x *FacturaProducts) Reset() {
	*x = FacturaProducts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_facturaM_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FacturaProducts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FacturaProducts) ProtoMessage() {}

func (x *FacturaProducts) ProtoReflect() protoreflect.Message {
	mi := &file_facturaM_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FacturaProducts.ProtoReflect.Descriptor instead.
func (*FacturaProducts) Descriptor() ([]byte, []int) {
	return file_facturaM_proto_rawDescGZIP(), []int{8}
}

func (x *FacturaProducts) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *FacturaProducts) GetOrdNo() string {
	if x != nil {
		return x.OrdNo
	}
	return ""
}

func (x *FacturaProducts) GetCommittentName() string {
	if x != nil {
		return x.CommittentName
	}
	return ""
}

func (x *FacturaProducts) GetCommittentTin() string {
	if x != nil {
		return x.CommittentTin
	}
	return ""
}

func (x *FacturaProducts) GetCommittentVatRegCode() string {
	if x != nil {
		return x.CommittentVatRegCode
	}
	return ""
}

func (x *FacturaProducts) GetCatalogCode() string {
	if x != nil {
		return x.CatalogCode
	}
	return ""
}

func (x *FacturaProducts) GetCatalogName() string {
	if x != nil {
		return x.CatalogName
	}
	return ""
}

func (x *FacturaProducts) GetBarcode() string {
	if x != nil {
		return x.Barcode
	}
	return ""
}

func (x *FacturaProducts) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FacturaProducts) GetSerial() string {
	if x != nil {
		return x.Serial
	}
	return ""
}

func (x *FacturaProducts) GetMeasureId() string {
	if x != nil {
		return x.MeasureId
	}
	return ""
}

func (x *FacturaProducts) GetBaseSumma() float32 {
	if x != nil {
		return x.BaseSumma
	}
	return 0
}

func (x *FacturaProducts) GetProfitRate() float32 {
	if x != nil {
		return x.ProfitRate
	}
	return 0
}

func (x *FacturaProducts) GetCount() float32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *FacturaProducts) GetSumma() float32 {
	if x != nil {
		return x.Summa
	}
	return 0
}

func (x *FacturaProducts) GetDeliverySum() float32 {
	if x != nil {
		return x.DeliverySum
	}
	return 0
}

func (x *FacturaProducts) GetExciseRate() float32 {
	if x != nil {
		return x.ExciseRate
	}
	return 0
}

func (x *FacturaProducts) GetExciseSum() float32 {
	if x != nil {
		return x.ExciseSum
	}
	return 0
}

func (x *FacturaProducts) GetVatRate() float32 {
	if x != nil {
		return x.VatRate
	}
	return 0
}

func (x *FacturaProducts) GetVatSum() float32 {
	if x != nil {
		return x.VatSum
	}
	return 0
}

func (x *FacturaProducts) GetDeliverySumWithVat() float32 {
	if x != nil {
		return x.DeliverySumWithVat
	}
	return 0
}

func (x *FacturaProducts) GetWithoutVat() bool {
	if x != nil {
		return x.WithoutVat
	}
	return false
}

func (x *FacturaProducts) GetPackageCode() string {
	if x != nil {
		return x.PackageCode
	}
	return ""
}

func (x *FacturaProducts) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *FacturaProducts) GetLgotaId() *wrapperspb.Int32Value {
	if x != nil {
		return x.LgotaId
	}
	return nil
}

func (x *FacturaProducts) GetCommittentVatRegStatus() *wrapperspb.Int32Value {
	if x != nil {
		return x.CommittentVatRegStatus
	}
	return nil
}

func (x *FacturaProducts) GetMarks() *Marks {
	if x != nil {
		return x.Marks
	}
	return nil
}

func (x *FacturaProducts) GetExchangeInfo() *ExchangeInfo {
	if x != nil {
		return x.ExchangeInfo
	}
	return nil
}

func (x *FacturaProducts) GetMeasureName() string {
	if x != nil {
		return x.MeasureName
	}
	return ""
}

type Marks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductType    int32    `protobuf:"varint,1,opt,name=ProductType,proto3" json:"ProductType,omitempty"`
	Kiz            []string `protobuf:"bytes,2,rep,name=Kiz,proto3" json:"Kiz,omitempty"`
	NomUpak        []string `protobuf:"bytes,3,rep,name=NomUpak,proto3" json:"NomUpak,omitempty"`
	IdentTransUpak []string `protobuf:"bytes,4,rep,name=IdentTransUpak,proto3" json:"IdentTransUpak,omitempty"`
}

func (x *Marks) Reset() {
	*x = Marks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_facturaM_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Marks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Marks) ProtoMessage() {}

func (x *Marks) ProtoReflect() protoreflect.Message {
	mi := &file_facturaM_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Marks.ProtoReflect.Descriptor instead.
func (*Marks) Descriptor() ([]byte, []int) {
	return file_facturaM_proto_rawDescGZIP(), []int{9}
}

func (x *Marks) GetProductType() int32 {
	if x != nil {
		return x.ProductType
	}
	return 0
}

func (x *Marks) GetKiz() []string {
	if x != nil {
		return x.Kiz
	}
	return nil
}

func (x *Marks) GetNomUpak() []string {
	if x != nil {
		return x.NomUpak
	}
	return nil
}

func (x *Marks) GetIdentTransUpak() []string {
	if x != nil {
		return x.IdentTransUpak
	}
	return nil
}

type ExchangeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductCode       string `protobuf:"bytes,1,opt,name=ProductCode,proto3" json:"ProductCode,omitempty"`
	ProductProperties string `protobuf:"bytes,2,opt,name=ProductProperties,proto3" json:"ProductProperties,omitempty"`
	PlanPositionId    int32  `protobuf:"varint,3,opt,name=PlanPositionId,proto3" json:"PlanPositionId,omitempty"`
}

func (x *ExchangeInfo) Reset() {
	*x = ExchangeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_facturaM_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeInfo) ProtoMessage() {}

func (x *ExchangeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_facturaM_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeInfo.ProtoReflect.Descriptor instead.
func (*ExchangeInfo) Descriptor() ([]byte, []int) {
	return file_facturaM_proto_rawDescGZIP(), []int{10}
}

func (x *ExchangeInfo) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *ExchangeInfo) GetProductProperties() string {
	if x != nil {
		return x.ProductProperties
	}
	return ""
}

func (x *ExchangeInfo) GetPlanPositionId() int32 {
	if x != nil {
		return x.PlanPositionId
	}
	return 0
}

var File_facturaM_proto protoreflect.FileDescriptor

var file_facturaM_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x61, 0x4d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x16, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0e, 0x62, 0x46, 0x61, 0x63, 0x74, 0x75, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x90, 0x08, 0x0a, 0x0c, 0x46, 0x61, 0x63, 0x74, 0x75, 0x72, 0x61, 0x4d, 0x6f,
	0x6e, 0x67, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a,
	0x0b, 0x46, 0x61, 0x63, 0x74, 0x75, 0x72, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x46, 0x61, 0x63, 0x74, 0x75, 0x72, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x65, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x53, 0x69, 0x64, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x48, 0x61, 0x73,
	0x4d, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x48,
	0x61, 0x73, 0x4d, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x61, 0x63,
	0x74, 0x75, 0x72, 0x61, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x46, 0x61,
	0x63, 0x74, 0x75, 0x72, 0x61, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0a, 0x46, 0x61, 0x63, 0x74, 0x75,
	0x72, 0x61, 0x44, 0x6f, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x6f,
	0x6e, 0x67, 0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x61, 0x63, 0x74, 0x75, 0x72, 0x61, 0x44, 0x6f, 0x63, 0x52,
	0x0a, 0x46, 0x61, 0x63, 0x74, 0x75, 0x72, 0x61, 0x44, 0x6f, 0x63, 0x12, 0x4b, 0x0a, 0x0d, 0x4f,
	0x6c, 0x64, 0x46, 0x61, 0x63, 0x74, 0x75, 0x72, 0x61, 0x44, 0x6f, 0x63, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x6c, 0x64, 0x46,
	0x61, 0x63, 0x74, 0x75, 0x72, 0x61, 0x44, 0x6f, 0x63, 0x52, 0x0d, 0x4f, 0x6c, 0x64, 0x46, 0x61,
	0x63, 0x74, 0x75, 0x72, 0x61, 0x44, 0x6f, 0x63, 0x12, 0x45, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x44, 0x6f, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44,
	0x6f, 0x63, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x6f, 0x63, 0x12,
	0x63, 0x0a, 0x15, 0x46, 0x61, 0x63, 0x74, 0x75, 0x72, 0x61, 0x45, 0x6d, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x6f, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x61, 0x63, 0x74, 0x75, 0x72, 0x61, 0x45,
	0x6d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x6f, 0x63, 0x52, 0x15, 0x46,
	0x61, 0x63, 0x74, 0x75, 0x72, 0x61, 0x45, 0x6d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x6d, 0x65, 0x6e,
	0x74, 0x44, 0x6f, 0x63, 0x12, 0x51, 0x0a, 0x0f, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x64, 0x44, 0x6f, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x64, 0x44, 0x6f, 0x63, 0x52, 0x0f, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x64, 0x44, 0x6f, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x6c, 0x6c, 0x65,
	0x72, 0x54, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x65, 0x6c, 0x6c,
	0x65, 0x72, 0x54, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x75, 0x79, 0x65, 0x72, 0x54, 0x69,
	0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x75, 0x79, 0x65, 0x72, 0x54, 0x69,
	0x6e, 0x12, 0x36, 0x0a, 0x06, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x52, 0x06, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x05, 0x42, 0x75, 0x79,
	0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f,
	0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x42, 0x75, 0x79, 0x65, 0x72, 0x12,
	0x4e, 0x0a, 0x0e, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52,
	0x0e, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12,
	0x48, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x61, 0x63, 0x52, 0x0b, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x63,
	0x6f, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x49,
	0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x6f, 0x74,
	0x49, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4c, 0x6f, 0x74, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x57, 0x61, 0x79, 0x62, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x57, 0x61, 0x79, 0x62, 0x69, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xb9, 0x02, 0x0a, 0x07, 0x46, 0x61, 0x63, 0x74, 0x75, 0x72,
	0x61, 0x12, 0x3e, 0x0a, 0x07, 0x46, 0x61, 0x63, 0x74, 0x75, 0x72, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x61, 0x63, 0x74,
	0x75, 0x72, 0x61, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x52, 0x07, 0x46, 0x61, 0x63, 0x74, 0x75, 0x72,
	0x61, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x64, 0x66, 0x55, 0x72, 0x6c, 0x55, 0x7a, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x64, 0x66, 0x55, 0x72, 0x6c, 0x55, 0x7a, 0x12, 0x1a, 0x0a,
	0x08, 0x50, 0x64, 0x66, 0x55, 0x72, 0x6c, 0x52, 0x75, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x50, 0x64, 0x66, 0x55, 0x72, 0x6c, 0x52, 0x75, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x53, 0x69, 0x67, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x53, 0x69, 0x67,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x74, 0x6d, 0x6c, 0x55, 0x7a, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x48, 0x74, 0x6d, 0x6c, 0x55, 0x7a, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x74, 0x6d,
	0x6c, 0x52, 0x75, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x48, 0x74, 0x6d, 0x6c, 0x52,
	0x75, 0x22, 0x4c, 0x0a, 0x0a, 0x46, 0x61, 0x63, 0x74, 0x75, 0x72, 0x61, 0x44, 0x6f, 0x63, 0x12,
	0x1c, 0x0a, 0x09, 0x46, 0x61, 0x63, 0x74, 0x75, 0x72, 0x61, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x46, 0x61, 0x63, 0x74, 0x75, 0x72, 0x61, 0x4e, 0x6f, 0x12, 0x20, 0x0a,
	0x0b, 0x46, 0x61, 0x63, 0x74, 0x75, 0x72, 0x61, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x46, 0x61, 0x63, 0x74, 0x75, 0x72, 0x61, 0x44, 0x61, 0x74, 0x65, 0x22,
	0x7f, 0x0a, 0x0d, 0x4f, 0x6c, 0x64, 0x46, 0x61, 0x63, 0x74, 0x75, 0x72, 0x61, 0x44, 0x6f, 0x63,
	0x12, 0x22, 0x0a, 0x0c, 0x4f, 0x6c, 0x64, 0x46, 0x61, 0x63, 0x74, 0x75, 0x72, 0x61, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4f, 0x6c, 0x64, 0x46, 0x61, 0x63, 0x74, 0x75,
	0x72, 0x61, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x4f, 0x6c, 0x64, 0x46, 0x61, 0x63, 0x74, 0x75,
	0x72, 0x61, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4f, 0x6c, 0x64, 0x46,
	0x61, 0x63, 0x74, 0x75, 0x72, 0x61, 0x4e, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x4f, 0x6c, 0x64, 0x46,
	0x61, 0x63, 0x74, 0x75, 0x72, 0x61, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x4f, 0x6c, 0x64, 0x46, 0x61, 0x63, 0x74, 0x75, 0x72, 0x61, 0x44, 0x61, 0x74, 0x65,
	0x22, 0xd9, 0x01, 0x0a, 0x15, 0x46, 0x61, 0x63, 0x74, 0x75, 0x72, 0x61, 0x45, 0x6d, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x6f, 0x63, 0x12, 0x24, 0x0a, 0x0d, 0x45, 0x6d,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x45, 0x6d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f,
	0x12, 0x36, 0x0a, 0x16, 0x45, 0x6d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x4f, 0x66, 0x49, 0x73, 0x73, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x16, 0x45, 0x6d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x4f, 0x66, 0x49, 0x73, 0x73, 0x75, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x46, 0x61, 0x63, 0x74, 0x75, 0x72, 0x61, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x63, 0x74, 0x75, 0x72, 0x61, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6f, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6f, 0x12, 0x1e, 0x0a, 0x0a,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x69, 0x6e, 0x66, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x69, 0x6e, 0x66, 0x6c, 0x22, 0x69, 0x0a, 0x0f,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x44, 0x6f, 0x63, 0x12,
	0x28, 0x0a, 0x0f, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x46,
	0x69, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x46, 0x69, 0x6f, 0x12, 0x2c, 0x0a, 0x11, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x50, 0x69, 0x6e, 0x66, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x64, 0x50, 0x69, 0x6e, 0x66, 0x6c, 0x22, 0x8a, 0x01, 0x0a, 0x0e, 0x46, 0x6f, 0x72, 0x65,
	0x69, 0x67, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x42, 0x61, 0x6e, 0x6b, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x42, 0x61, 0x6e, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0xdf, 0x02, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x46, 0x61, 0x63, 0x12, 0x2a, 0x0a, 0x10, 0x46, 0x61, 0x63, 0x74, 0x75,
	0x72, 0x61, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x46, 0x61, 0x63, 0x74, 0x75, 0x72, 0x61, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x54, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x61, 0x73, 0x45, 0x78, 0x63, 0x69,
	0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x48, 0x61, 0x73, 0x45, 0x78, 0x63,
	0x69, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x61, 0x73, 0x56, 0x61, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x48, 0x61, 0x73, 0x56, 0x61, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x48,
	0x61, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x48, 0x61, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x61, 0x73, 0x4c, 0x67, 0x6f, 0x74, 0x61, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x48, 0x61, 0x73, 0x4c, 0x67, 0x6f, 0x74, 0x61, 0x12, 0x1e, 0x0a,
	0x0a, 0x48, 0x61, 0x73, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x48, 0x61, 0x73, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x32, 0x0a,
	0x14, 0x48, 0x69, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x48, 0x69, 0x64,
	0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x43, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x61, 0x63,
	0x74, 0x75, 0x72, 0x61, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x08, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x22, 0xa4, 0x08, 0x0a, 0x0f, 0x46, 0x61, 0x63, 0x74, 0x75,
	0x72, 0x61, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x14, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x4f, 0x72, 0x64, 0x4e, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x6e,
	0x74, 0x54, 0x69, 0x6e, 0x12, 0x32, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x6e, 0x74, 0x56, 0x61, 0x74, 0x52, 0x65, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x61,
	0x74, 0x52, 0x65, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x42,
	0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x49, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x42, 0x61, 0x73, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x09, 0x42, 0x61, 0x73, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x12, 0x1e,
	0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0a, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x05, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x75, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0b, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0a,
	0x45, 0x78, 0x63, 0x69, 0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0a, 0x45, 0x78, 0x63, 0x69, 0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x45, 0x78, 0x63, 0x69, 0x73, 0x65, 0x53, 0x75, 0x6d, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x09, 0x45, 0x78, 0x63, 0x69, 0x73, 0x65, 0x53, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x61,
	0x74, 0x52, 0x61, 0x74, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x56, 0x61, 0x74,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x61, 0x74, 0x53, 0x75, 0x6d, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x56, 0x61, 0x74, 0x53, 0x75, 0x6d, 0x12, 0x2e, 0x0a, 0x12,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x75, 0x6d, 0x57, 0x69, 0x74, 0x68, 0x56,
	0x61, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x53, 0x75, 0x6d, 0x57, 0x69, 0x74, 0x68, 0x56, 0x61, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x56, 0x61, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x56, 0x61, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x35, 0x0a, 0x07, 0x4c, 0x67, 0x6f, 0x74, 0x61, 0x49, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07,
	0x4c, 0x67, 0x6f, 0x74, 0x61, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x16, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x74, 0x52, 0x65, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x74,
	0x56, 0x61, 0x74, 0x52, 0x65, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x05,
	0x4d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x6f,
	0x6e, 0x67, 0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x73, 0x52, 0x05, 0x4d, 0x61, 0x72, 0x6b,
	0x73, 0x12, 0x48, 0x0a, 0x0c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x4d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x7d, 0x0a,
	0x05, 0x4d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x69, 0x7a, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x69, 0x7a, 0x12, 0x18, 0x0a, 0x07, 0x4e, 0x6f,
	0x6d, 0x55, 0x70, 0x61, 0x6b, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x4e, 0x6f, 0x6d,
	0x55, 0x70, 0x61, 0x6b, 0x12, 0x26, 0x0a, 0x0e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x55, 0x70, 0x61, 0x6b, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x55, 0x70, 0x61, 0x6b, 0x22, 0x86, 0x01, 0x0a,
	0x0c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a,
	0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x2c, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x26, 0x0a,
	0x0e, 0x50, 0x6c, 0x61, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x50, 0x6c, 0x61, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x32, 0xb2, 0x02, 0x0a, 0x0e, 0x46, 0x61, 0x63, 0x74, 0x75, 0x72,
	0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x06, 0x55, 0x70, 0x73, 0x65,
	0x72, 0x74, 0x12, 0x1f, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x61, 0x63, 0x74,
	0x75, 0x72, 0x61, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x46, 0x0a,
	0x03, 0x47, 0x65, 0x74, 0x12, 0x1c, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x79,
	0x49, 0x64, 0x1a, 0x1f, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x61, 0x63, 0x74,
	0x75, 0x72, 0x61, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12,
	0x1c, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x79, 0x49, 0x64, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x21, 0x5a, 0x1f, 0x67, 0x65,
	0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_facturaM_proto_rawDescOnce sync.Once
	file_facturaM_proto_rawDescData = file_facturaM_proto_rawDesc
)

func file_facturaM_proto_rawDescGZIP() []byte {
	file_facturaM_proto_rawDescOnce.Do(func() {
		file_facturaM_proto_rawDescData = protoimpl.X.CompressGZIP(file_facturaM_proto_rawDescData)
	})
	return file_facturaM_proto_rawDescData
}

var file_facturaM_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_facturaM_proto_goTypes = []interface{}{
	(*FacturaMongo)(nil),          // 0: mongo_document_service.FacturaMongo
	(*Factura)(nil),               // 1: mongo_document_service.Factura
	(*FacturaDoc)(nil),            // 2: mongo_document_service.FacturaDoc
	(*OldFacturaDoc)(nil),         // 3: mongo_document_service.OldFacturaDoc
	(*FacturaEmpowermentDoc)(nil), // 4: mongo_document_service.FacturaEmpowermentDoc
	(*ItemReleasedDoc)(nil),       // 5: mongo_document_service.ItemReleasedDoc
	(*ForeignCompany)(nil),        // 6: mongo_document_service.ForeignCompany
	(*ProductListFac)(nil),        // 7: mongo_document_service.ProductListFac
	(*FacturaProducts)(nil),       // 8: mongo_document_service.FacturaProducts
	(*Marks)(nil),                 // 9: mongo_document_service.Marks
	(*ExchangeInfo)(nil),          // 10: mongo_document_service.ExchangeInfo
	(*ContractDoc)(nil),           // 11: mongo_document_service.ContractDoc
	(*Client)(nil),                // 12: mongo_document_service.Client
	(*wrapperspb.Int32Value)(nil), // 13: google.protobuf.Int32Value
	(*ById)(nil),                  // 14: mongo_document_service.ById
	(*UpdateStatusReq)(nil),       // 15: mongo_document_service.UpdateStatusReq
	(*emptypb.Empty)(nil),         // 16: google.protobuf.Empty
}
var file_facturaM_proto_depIdxs = []int32{
	2,  // 0: mongo_document_service.FacturaMongo.FacturaDoc:type_name -> mongo_document_service.FacturaDoc
	3,  // 1: mongo_document_service.FacturaMongo.OldFacturaDoc:type_name -> mongo_document_service.OldFacturaDoc
	11, // 2: mongo_document_service.FacturaMongo.ContractDoc:type_name -> mongo_document_service.ContractDoc
	4,  // 3: mongo_document_service.FacturaMongo.FacturaEmpowermentDoc:type_name -> mongo_document_service.FacturaEmpowermentDoc
	5,  // 4: mongo_document_service.FacturaMongo.ItemReleasedDoc:type_name -> mongo_document_service.ItemReleasedDoc
	12, // 5: mongo_document_service.FacturaMongo.Seller:type_name -> mongo_document_service.Client
	12, // 6: mongo_document_service.FacturaMongo.Buyer:type_name -> mongo_document_service.Client
	6,  // 7: mongo_document_service.FacturaMongo.ForeignCompany:type_name -> mongo_document_service.ForeignCompany
	7,  // 8: mongo_document_service.FacturaMongo.ProductList:type_name -> mongo_document_service.ProductListFac
	0,  // 9: mongo_document_service.Factura.Factura:type_name -> mongo_document_service.FacturaMongo
	8,  // 10: mongo_document_service.ProductListFac.Products:type_name -> mongo_document_service.FacturaProducts
	13, // 11: mongo_document_service.FacturaProducts.LgotaId:type_name -> google.protobuf.Int32Value
	13, // 12: mongo_document_service.FacturaProducts.CommittentVatRegStatus:type_name -> google.protobuf.Int32Value
	9,  // 13: mongo_document_service.FacturaProducts.Marks:type_name -> mongo_document_service.Marks
	10, // 14: mongo_document_service.FacturaProducts.ExchangeInfo:type_name -> mongo_document_service.ExchangeInfo
	1,  // 15: mongo_document_service.FacturaService.Upsert:input_type -> mongo_document_service.Factura
	14, // 16: mongo_document_service.FacturaService.Get:input_type -> mongo_document_service.ById
	14, // 17: mongo_document_service.FacturaService.Delete:input_type -> mongo_document_service.ById
	15, // 18: mongo_document_service.FacturaService.UpdateStatus:input_type -> mongo_document_service.UpdateStatusReq
	16, // 19: mongo_document_service.FacturaService.Upsert:output_type -> google.protobuf.Empty
	1,  // 20: mongo_document_service.FacturaService.Get:output_type -> mongo_document_service.Factura
	16, // 21: mongo_document_service.FacturaService.Delete:output_type -> google.protobuf.Empty
	16, // 22: mongo_document_service.FacturaService.UpdateStatus:output_type -> google.protobuf.Empty
	19, // [19:23] is the sub-list for method output_type
	15, // [15:19] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_facturaM_proto_init() }
func file_facturaM_proto_init() {
	if File_facturaM_proto != nil {
		return
	}
	file_mongo_proto_init()
	file_bFactura_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_facturaM_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FacturaMongo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_facturaM_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Factura); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_facturaM_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FacturaDoc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_facturaM_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OldFacturaDoc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_facturaM_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FacturaEmpowermentDoc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_facturaM_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemReleasedDoc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_facturaM_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForeignCompany); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_facturaM_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductListFac); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_facturaM_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FacturaProducts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_facturaM_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Marks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_facturaM_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_facturaM_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_facturaM_proto_goTypes,
		DependencyIndexes: file_facturaM_proto_depIdxs,
		MessageInfos:      file_facturaM_proto_msgTypes,
	}.Build()
	File_facturaM_proto = out.File
	file_facturaM_proto_rawDesc = nil
	file_facturaM_proto_goTypes = nil
	file_facturaM_proto_depIdxs = nil
}
