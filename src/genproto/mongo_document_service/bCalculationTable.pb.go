// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: bCalculationTable.proto

package mongo_document_service

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BCTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuildingCalculationTableId  string              `protobuf:"bytes,1,opt,name=BuildingCalculationTableId,proto3" json:"BuildingCalculationTableId,omitempty"`
	Month                       int32               `protobuf:"varint,2,opt,name=Month,proto3" json:"Month,omitempty"`
	Year                        int32               `protobuf:"varint,3,opt,name=Year,proto3" json:"Year,omitempty"`
	ObjectName                  string              `protobuf:"bytes,4,opt,name=ObjectName,proto3" json:"ObjectName,omitempty"`
	BuildingFacturaDoc          *BuildingFacturaDoc `protobuf:"bytes,5,opt,name=BuildingFacturaDoc,proto3" json:"BuildingFacturaDoc,omitempty"`
	GeneralContractorTinOrPinfl string              `protobuf:"bytes,6,opt,name=GeneralContractorTinOrPinfl,proto3" json:"GeneralContractorTinOrPinfl,omitempty"`
	CustomerTinOrPinfl          string              `protobuf:"bytes,7,opt,name=CustomerTinOrPinfl,proto3" json:"CustomerTinOrPinfl,omitempty"`
	GeneralContractor           *Person             `protobuf:"bytes,8,opt,name=GeneralContractor,proto3" json:"GeneralContractor,omitempty"`
	Customer                    *Person             `protobuf:"bytes,9,opt,name=Customer,proto3" json:"Customer,omitempty"`
	Subcontractors              []*Subcontractor    `protobuf:"bytes,10,rep,name=Subcontractors,proto3" json:"Subcontractors,omitempty"`
	Detailing                   *Detailing          `protobuf:"bytes,11,opt,name=Detailing,proto3" json:"Detailing,omitempty"`
}

func (x *BCTable) Reset() {
	*x = BCTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bCalculationTable_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BCTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BCTable) ProtoMessage() {}

func (x *BCTable) ProtoReflect() protoreflect.Message {
	mi := &file_bCalculationTable_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BCTable.ProtoReflect.Descriptor instead.
func (*BCTable) Descriptor() ([]byte, []int) {
	return file_bCalculationTable_proto_rawDescGZIP(), []int{0}
}

func (x *BCTable) GetBuildingCalculationTableId() string {
	if x != nil {
		return x.BuildingCalculationTableId
	}
	return ""
}

func (x *BCTable) GetMonth() int32 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *BCTable) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *BCTable) GetObjectName() string {
	if x != nil {
		return x.ObjectName
	}
	return ""
}

func (x *BCTable) GetBuildingFacturaDoc() *BuildingFacturaDoc {
	if x != nil {
		return x.BuildingFacturaDoc
	}
	return nil
}

func (x *BCTable) GetGeneralContractorTinOrPinfl() string {
	if x != nil {
		return x.GeneralContractorTinOrPinfl
	}
	return ""
}

func (x *BCTable) GetCustomerTinOrPinfl() string {
	if x != nil {
		return x.CustomerTinOrPinfl
	}
	return ""
}

func (x *BCTable) GetGeneralContractor() *Person {
	if x != nil {
		return x.GeneralContractor
	}
	return nil
}

func (x *BCTable) GetCustomer() *Person {
	if x != nil {
		return x.Customer
	}
	return nil
}

func (x *BCTable) GetSubcontractors() []*Subcontractor {
	if x != nil {
		return x.Subcontractors
	}
	return nil
}

func (x *BCTable) GetDetailing() *Detailing {
	if x != nil {
		return x.Detailing
	}
	return nil
}

type BuildingCalculationTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuildingCalculationTable *BCTable `protobuf:"bytes,1,opt,name=BuildingCalculationTable,proto3" json:"BuildingCalculationTable,omitempty"`
	Status                   string   `protobuf:"bytes,2,opt,name=Status,proto3" json:"Status,omitempty"`
	Sign                     string   `protobuf:"bytes,3,opt,name=Sign,proto3" json:"Sign,omitempty"`
	CreatedAt                string   `protobuf:"bytes,4,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt                string   `protobuf:"bytes,5,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	PageStatus               string   `protobuf:"bytes,6,opt,name=PageStatus,proto3" json:"PageStatus,omitempty"`
	PdfUz                    string   `protobuf:"bytes,7,opt,name=PdfUz,proto3" json:"PdfUz,omitempty"`
	PdfRu                    string   `protobuf:"bytes,8,opt,name=PdfRu,proto3" json:"PdfRu,omitempty"`
	HtmlUz                   string   `protobuf:"bytes,9,opt,name=HtmlUz,proto3" json:"HtmlUz,omitempty"`
	HtmlRu                   string   `protobuf:"bytes,10,opt,name=HtmlRu,proto3" json:"HtmlRu,omitempty"`
}

func (x *BuildingCalculationTable) Reset() {
	*x = BuildingCalculationTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bCalculationTable_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildingCalculationTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildingCalculationTable) ProtoMessage() {}

func (x *BuildingCalculationTable) ProtoReflect() protoreflect.Message {
	mi := &file_bCalculationTable_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildingCalculationTable.ProtoReflect.Descriptor instead.
func (*BuildingCalculationTable) Descriptor() ([]byte, []int) {
	return file_bCalculationTable_proto_rawDescGZIP(), []int{1}
}

func (x *BuildingCalculationTable) GetBuildingCalculationTable() *BCTable {
	if x != nil {
		return x.BuildingCalculationTable
	}
	return nil
}

func (x *BuildingCalculationTable) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *BuildingCalculationTable) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

func (x *BuildingCalculationTable) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *BuildingCalculationTable) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *BuildingCalculationTable) GetPageStatus() string {
	if x != nil {
		return x.PageStatus
	}
	return ""
}

func (x *BuildingCalculationTable) GetPdfUz() string {
	if x != nil {
		return x.PdfUz
	}
	return ""
}

func (x *BuildingCalculationTable) GetPdfRu() string {
	if x != nil {
		return x.PdfRu
	}
	return ""
}

func (x *BuildingCalculationTable) GetHtmlUz() string {
	if x != nil {
		return x.HtmlUz
	}
	return ""
}

func (x *BuildingCalculationTable) GetHtmlRu() string {
	if x != nil {
		return x.HtmlRu
	}
	return ""
}

type BuildingFacturaDoc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuildingFacturaId   string `protobuf:"bytes,1,opt,name=BuildingFacturaId,proto3" json:"BuildingFacturaId,omitempty"`
	BuildingFacturaNo   string `protobuf:"bytes,2,opt,name=BuildingFacturaNo,proto3" json:"BuildingFacturaNo,omitempty"`
	BuildingFacturaDate string `protobuf:"bytes,3,opt,name=BuildingFacturaDate,proto3" json:"BuildingFacturaDate,omitempty"`
}

func (x *BuildingFacturaDoc) Reset() {
	*x = BuildingFacturaDoc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bCalculationTable_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildingFacturaDoc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildingFacturaDoc) ProtoMessage() {}

func (x *BuildingFacturaDoc) ProtoReflect() protoreflect.Message {
	mi := &file_bCalculationTable_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildingFacturaDoc.ProtoReflect.Descriptor instead.
func (*BuildingFacturaDoc) Descriptor() ([]byte, []int) {
	return file_bCalculationTable_proto_rawDescGZIP(), []int{2}
}

func (x *BuildingFacturaDoc) GetBuildingFacturaId() string {
	if x != nil {
		return x.BuildingFacturaId
	}
	return ""
}

func (x *BuildingFacturaDoc) GetBuildingFacturaNo() string {
	if x != nil {
		return x.BuildingFacturaNo
	}
	return ""
}

func (x *BuildingFacturaDoc) GetBuildingFacturaDate() string {
	if x != nil {
		return x.BuildingFacturaDate
	}
	return ""
}

type Person struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Director   string `protobuf:"bytes,2,opt,name=Director,proto3" json:"Director,omitempty"`
	Accountant string `protobuf:"bytes,3,opt,name=Accountant,proto3" json:"Accountant,omitempty"`
	BranchCode string `protobuf:"bytes,4,opt,name=BranchCode,proto3" json:"BranchCode,omitempty"`
	BranchName string `protobuf:"bytes,5,opt,name=BranchName,proto3" json:"BranchName,omitempty"`
}

func (x *Person) Reset() {
	*x = Person{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bCalculationTable_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Person) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Person) ProtoMessage() {}

func (x *Person) ProtoReflect() protoreflect.Message {
	mi := &file_bCalculationTable_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Person.ProtoReflect.Descriptor instead.
func (*Person) Descriptor() ([]byte, []int) {
	return file_bCalculationTable_proto_rawDescGZIP(), []int{3}
}

func (x *Person) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Person) GetDirector() string {
	if x != nil {
		return x.Director
	}
	return ""
}

func (x *Person) GetAccountant() string {
	if x != nil {
		return x.Accountant
	}
	return ""
}

func (x *Person) GetBranchCode() string {
	if x != nil {
		return x.BranchCode
	}
	return ""
}

func (x *Person) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

type Subcontractor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TinOrPinfl string     `protobuf:"bytes,1,opt,name=TinOrPinfl,proto3" json:"TinOrPinfl,omitempty"`
	Company    *Person    `protobuf:"bytes,2,opt,name=Company,proto3" json:"Company,omitempty"`
	Detailing  *Detailing `protobuf:"bytes,3,opt,name=Detailing,proto3" json:"Detailing,omitempty"`
	Index      int32      `protobuf:"varint,4,opt,name=Index,proto3" json:"Index,omitempty"`
}

func (x *Subcontractor) Reset() {
	*x = Subcontractor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bCalculationTable_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subcontractor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subcontractor) ProtoMessage() {}

func (x *Subcontractor) ProtoReflect() protoreflect.Message {
	mi := &file_bCalculationTable_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subcontractor.ProtoReflect.Descriptor instead.
func (*Subcontractor) Descriptor() ([]byte, []int) {
	return file_bCalculationTable_proto_rawDescGZIP(), []int{4}
}

func (x *Subcontractor) GetTinOrPinfl() string {
	if x != nil {
		return x.TinOrPinfl
	}
	return ""
}

func (x *Subcontractor) GetCompany() *Person {
	if x != nil {
		return x.Company
	}
	return nil
}

func (x *Subcontractor) GetDetailing() *Detailing {
	if x != nil {
		return x.Detailing
	}
	return nil
}

func (x *Subcontractor) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type Detailing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LaborCosts        *Material `protobuf:"bytes,1,opt,name=LaborCosts,proto3" json:"LaborCosts,omitempty"`
	BuildingMaterials *Material `protobuf:"bytes,2,opt,name=BuildingMaterials,proto3" json:"BuildingMaterials,omitempty"`
	Equipment         *Material `protobuf:"bytes,3,opt,name=Equipment,proto3" json:"Equipment,omitempty"`
	Total             *Summary  `protobuf:"bytes,4,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *Detailing) Reset() {
	*x = Detailing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bCalculationTable_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Detailing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Detailing) ProtoMessage() {}

func (x *Detailing) ProtoReflect() protoreflect.Message {
	mi := &file_bCalculationTable_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Detailing.ProtoReflect.Descriptor instead.
func (*Detailing) Descriptor() ([]byte, []int) {
	return file_bCalculationTable_proto_rawDescGZIP(), []int{5}
}

func (x *Detailing) GetLaborCosts() *Material {
	if x != nil {
		return x.LaborCosts
	}
	return nil
}

func (x *Detailing) GetBuildingMaterials() *Material {
	if x != nil {
		return x.BuildingMaterials
	}
	return nil
}

func (x *Detailing) GetEquipment() *Material {
	if x != nil {
		return x.Equipment
	}
	return nil
}

func (x *Detailing) GetTotal() *Summary {
	if x != nil {
		return x.Total
	}
	return nil
}

type Material struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Products []*ProductTable `protobuf:"bytes,1,rep,name=Products,proto3" json:"Products,omitempty"`
	Summary  *Summary        `protobuf:"bytes,2,opt,name=Summary,proto3" json:"Summary,omitempty"`
}

func (x *Material) Reset() {
	*x = Material{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bCalculationTable_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Material) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Material) ProtoMessage() {}

func (x *Material) ProtoReflect() protoreflect.Message {
	mi := &file_bCalculationTable_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Material.ProtoReflect.Descriptor instead.
func (*Material) Descriptor() ([]byte, []int) {
	return file_bCalculationTable_proto_rawDescGZIP(), []int{6}
}

func (x *Material) GetProducts() []*ProductTable {
	if x != nil {
		return x.Products
	}
	return nil
}

func (x *Material) GetSummary() *Summary {
	if x != nil {
		return x.Summary
	}
	return nil
}

type ProductTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProvidedByOffer         *Summa       `protobuf:"bytes,1,opt,name=ProvidedByOffer,proto3" json:"ProvidedByOffer,omitempty"`
	FromStartOfConstruction *Summa       `protobuf:"bytes,2,opt,name=FromStartOfConstruction,proto3" json:"FromStartOfConstruction,omitempty"`
	FromBeginningOfYear     *Summa       `protobuf:"bytes,3,opt,name=FromBeginningOfYear,proto3" json:"FromBeginningOfYear,omitempty"`
	ForReportingMonth       *Summa       `protobuf:"bytes,4,opt,name=ForReportingMonth,proto3" json:"ForReportingMonth,omitempty"`
	IncomingDoc             *SummaSeller `protobuf:"bytes,5,opt,name=IncomingDoc,proto3" json:"IncomingDoc,omitempty"`
	OrdNo                   int64        `protobuf:"varint,6,opt,name=OrdNo,proto3" json:"OrdNo,omitempty"`
	CatalogCode             string       `protobuf:"bytes,7,opt,name=CatalogCode,proto3" json:"CatalogCode,omitempty"`
	CatalogName             string       `protobuf:"bytes,8,opt,name=CatalogName,proto3" json:"CatalogName,omitempty"`
	MeasureId               int64        `protobuf:"varint,9,opt,name=MeasureId,proto3" json:"MeasureId,omitempty"`
	MeasureName             string       `protobuf:"bytes,10,opt,name=MeasureName,proto3" json:"MeasureName,omitempty"`
}

func (x *ProductTable) Reset() {
	*x = ProductTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bCalculationTable_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductTable) ProtoMessage() {}

func (x *ProductTable) ProtoReflect() protoreflect.Message {
	mi := &file_bCalculationTable_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductTable.ProtoReflect.Descriptor instead.
func (*ProductTable) Descriptor() ([]byte, []int) {
	return file_bCalculationTable_proto_rawDescGZIP(), []int{7}
}

func (x *ProductTable) GetProvidedByOffer() *Summa {
	if x != nil {
		return x.ProvidedByOffer
	}
	return nil
}

func (x *ProductTable) GetFromStartOfConstruction() *Summa {
	if x != nil {
		return x.FromStartOfConstruction
	}
	return nil
}

func (x *ProductTable) GetFromBeginningOfYear() *Summa {
	if x != nil {
		return x.FromBeginningOfYear
	}
	return nil
}

func (x *ProductTable) GetForReportingMonth() *Summa {
	if x != nil {
		return x.ForReportingMonth
	}
	return nil
}

func (x *ProductTable) GetIncomingDoc() *SummaSeller {
	if x != nil {
		return x.IncomingDoc
	}
	return nil
}

func (x *ProductTable) GetOrdNo() int64 {
	if x != nil {
		return x.OrdNo
	}
	return 0
}

func (x *ProductTable) GetCatalogCode() string {
	if x != nil {
		return x.CatalogCode
	}
	return ""
}

func (x *ProductTable) GetCatalogName() string {
	if x != nil {
		return x.CatalogName
	}
	return ""
}

func (x *ProductTable) GetMeasureId() int64 {
	if x != nil {
		return x.MeasureId
	}
	return 0
}

func (x *ProductTable) GetMeasureName() string {
	if x != nil {
		return x.MeasureName
	}
	return ""
}

type Summa struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount float32 `protobuf:"fixed32,1,opt,name=Amount,proto3" json:"Amount,omitempty"`
	Price  float32 `protobuf:"fixed32,2,opt,name=Price,proto3" json:"Price,omitempty"`
	Total  float32 `protobuf:"fixed32,3,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *Summa) Reset() {
	*x = Summa{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bCalculationTable_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Summa) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Summa) ProtoMessage() {}

func (x *Summa) ProtoReflect() protoreflect.Message {
	mi := &file_bCalculationTable_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Summa.ProtoReflect.Descriptor instead.
func (*Summa) Descriptor() ([]byte, []int) {
	return file_bCalculationTable_proto_rawDescGZIP(), []int{8}
}

func (x *Summa) GetAmount() float32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Summa) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Summa) GetTotal() float32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type SummaSeller struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount           float32 `protobuf:"fixed32,1,opt,name=Amount,proto3" json:"Amount,omitempty"`
	Price            float32 `protobuf:"fixed32,2,opt,name=Price,proto3" json:"Price,omitempty"`
	Total            float32 `protobuf:"fixed32,3,opt,name=Total,proto3" json:"Total,omitempty"`
	SellerTinOrPinfl string  `protobuf:"bytes,4,opt,name=SellerTinOrPinfl,proto3" json:"SellerTinOrPinfl,omitempty"`
	SellerName       string  `protobuf:"bytes,5,opt,name=SellerName,proto3" json:"SellerName,omitempty"`
}

func (x *SummaSeller) Reset() {
	*x = SummaSeller{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bCalculationTable_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummaSeller) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummaSeller) ProtoMessage() {}

func (x *SummaSeller) ProtoReflect() protoreflect.Message {
	mi := &file_bCalculationTable_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummaSeller.ProtoReflect.Descriptor instead.
func (*SummaSeller) Descriptor() ([]byte, []int) {
	return file_bCalculationTable_proto_rawDescGZIP(), []int{9}
}

func (x *SummaSeller) GetAmount() float32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *SummaSeller) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *SummaSeller) GetTotal() float32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SummaSeller) GetSellerTinOrPinfl() string {
	if x != nil {
		return x.SellerTinOrPinfl
	}
	return ""
}

func (x *SummaSeller) GetSellerName() string {
	if x != nil {
		return x.SellerName
	}
	return ""
}

type Summary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProvidedByOffer         *Summa `protobuf:"bytes,1,opt,name=ProvidedByOffer,proto3" json:"ProvidedByOffer,omitempty"`
	FromStartOfConstruction *Summa `protobuf:"bytes,2,opt,name=FromStartOfConstruction,proto3" json:"FromStartOfConstruction,omitempty"`
	FromBeginningOfYear     *Summa `protobuf:"bytes,3,opt,name=FromBeginningOfYear,proto3" json:"FromBeginningOfYear,omitempty"`
	ForReportingMonth       *Summa `protobuf:"bytes,4,opt,name=ForReportingMonth,proto3" json:"ForReportingMonth,omitempty"`
	IncomingDoc             *Summa `protobuf:"bytes,5,opt,name=IncomingDoc,proto3" json:"IncomingDoc,omitempty"`
}

func (x *Summary) Reset() {
	*x = Summary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bCalculationTable_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Summary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Summary) ProtoMessage() {}

func (x *Summary) ProtoReflect() protoreflect.Message {
	mi := &file_bCalculationTable_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Summary.ProtoReflect.Descriptor instead.
func (*Summary) Descriptor() ([]byte, []int) {
	return file_bCalculationTable_proto_rawDescGZIP(), []int{10}
}

func (x *Summary) GetProvidedByOffer() *Summa {
	if x != nil {
		return x.ProvidedByOffer
	}
	return nil
}

func (x *Summary) GetFromStartOfConstruction() *Summa {
	if x != nil {
		return x.FromStartOfConstruction
	}
	return nil
}

func (x *Summary) GetFromBeginningOfYear() *Summa {
	if x != nil {
		return x.FromBeginningOfYear
	}
	return nil
}

func (x *Summary) GetForReportingMonth() *Summa {
	if x != nil {
		return x.ForReportingMonth
	}
	return nil
}

func (x *Summary) GetIncomingDoc() *Summa {
	if x != nil {
		return x.IncomingDoc
	}
	return nil
}

var File_bCalculationTable_proto protoreflect.FileDescriptor

var file_bCalculationTable_proto_rawDesc = []byte{
	0x0a, 0x17, 0x62, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x6d, 0x6f, 0x6e, 0x67, 0x6f,
	0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b,
	0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfb, 0x04, 0x0a, 0x07,
	0x42, 0x43, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x6f, 0x6e, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x12, 0x0a,
	0x04, 0x59, 0x65, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x59, 0x65, 0x61,
	0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x5a, 0x0a, 0x12, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63,
	0x74, 0x75, 0x72, 0x61, 0x44, 0x6f, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x46,
	0x61, 0x63, 0x74, 0x75, 0x72, 0x61, 0x44, 0x6f, 0x63, 0x52, 0x12, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x74, 0x75, 0x72, 0x61, 0x44, 0x6f, 0x63, 0x12, 0x40, 0x0a,
	0x1b, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x54, 0x69, 0x6e, 0x4f, 0x72, 0x50, 0x69, 0x6e, 0x66, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1b, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x69, 0x6e, 0x4f, 0x72, 0x50, 0x69, 0x6e, 0x66, 0x6c, 0x12,
	0x2e, 0x0a, 0x12, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x69, 0x6e, 0x4f, 0x72,
	0x50, 0x69, 0x6e, 0x66, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x69, 0x6e, 0x4f, 0x72, 0x50, 0x69, 0x6e, 0x66, 0x6c, 0x12,
	0x4c, 0x0a, 0x11, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x6f, 0x6e,
	0x67, 0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x11, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x3a, 0x0a,
	0x08, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52,
	0x08, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x0e, 0x53, 0x75, 0x62,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0e, 0x53, 0x75, 0x62, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x3f, 0x0a, 0x09, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x6f,
	0x6e, 0x67, 0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x09,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x22, 0xdb, 0x02, 0x0a, 0x18, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x5b, 0x0a, 0x18, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69,
	0x6e, 0x67, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f,
	0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x42, 0x43, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x18, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x53,
	0x69, 0x67, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x53, 0x69, 0x67, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x50,
	0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x50, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x50,
	0x64, 0x66, 0x55, 0x7a, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x64, 0x66, 0x55,
	0x7a, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x64, 0x66, 0x52, 0x75, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x50, 0x64, 0x66, 0x52, 0x75, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x74, 0x6d, 0x6c, 0x55,
	0x7a, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x48, 0x74, 0x6d, 0x6c, 0x55, 0x7a, 0x12,
	0x16, 0x0a, 0x06, 0x48, 0x74, 0x6d, 0x6c, 0x52, 0x75, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x48, 0x74, 0x6d, 0x6c, 0x52, 0x75, 0x22, 0xa2, 0x01, 0x0a, 0x12, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x74, 0x75, 0x72, 0x61, 0x44, 0x6f, 0x63, 0x12, 0x2c,
	0x0a, 0x11, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x74, 0x75, 0x72,
	0x61, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x74, 0x75, 0x72, 0x61, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x74, 0x75, 0x72, 0x61, 0x4e,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e,
	0x67, 0x46, 0x61, 0x63, 0x74, 0x75, 0x72, 0x61, 0x4e, 0x6f, 0x12, 0x30, 0x0a, 0x13, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x74, 0x75, 0x72, 0x61, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e,
	0x67, 0x46, 0x61, 0x63, 0x74, 0x75, 0x72, 0x61, 0x44, 0x61, 0x74, 0x65, 0x22, 0x98, 0x01, 0x0a,
	0x06, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xc0, 0x01, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x69, 0x6e,
	0x4f, 0x72, 0x50, 0x69, 0x6e, 0x66, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54,
	0x69, 0x6e, 0x4f, 0x72, 0x50, 0x69, 0x6e, 0x66, 0x6c, 0x12, 0x38, 0x0a, 0x07, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x6f, 0x6e,
	0x67, 0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x12, 0x3f, 0x0a, 0x09, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x94, 0x02, 0x0a, 0x09, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x40, 0x0a, 0x0a, 0x4c, 0x61, 0x62, 0x6f,
	0x72, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d,
	0x6f, 0x6e, 0x67, 0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x0a,
	0x4c, 0x61, 0x62, 0x6f, 0x72, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x4e, 0x0a, 0x11, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x11, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e,
	0x67, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x3e, 0x0a, 0x09, 0x45, 0x71,
	0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x52,
	0x09, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x05, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x6f, 0x6e, 0x67,
	0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x22, 0x87, 0x01, 0x0a, 0x08, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x40,
	0x0a, 0x08, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x12, 0x39, 0x0a, 0x07, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x52, 0x07, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0xaf, 0x04, 0x0a, 0x0c,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x47, 0x0a, 0x0f,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x42, 0x79, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x52, 0x0f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x42, 0x79,
	0x4f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x57, 0x0a, 0x17, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x4f, 0x66, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x52, 0x17, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x4f, 0x66, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f,
	0x0a, 0x13, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x4f,
	0x66, 0x59, 0x65, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x6f,
	0x6e, 0x67, 0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x52, 0x13, 0x46, 0x72, 0x6f, 0x6d,
	0x42, 0x65, 0x67, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x59, 0x65, 0x61, 0x72, 0x12,
	0x4b, 0x0a, 0x11, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x6f, 0x6e,
	0x67, 0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x52, 0x11, 0x46, 0x6f, 0x72, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x45, 0x0a, 0x0b,
	0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x0b, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67,
	0x44, 0x6f, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x4e, 0x6f, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x4f, 0x72, 0x64, 0x4e, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x4d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x4b, 0x0a,
	0x05, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x9d, 0x01, 0x0a, 0x0b, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2a,
	0x0a, 0x10, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x54, 0x69, 0x6e, 0x4f, 0x72, 0x50, 0x69, 0x6e,
	0x66, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72,
	0x54, 0x69, 0x6e, 0x4f, 0x72, 0x50, 0x69, 0x6e, 0x66, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x8a, 0x03, 0x0a, 0x07, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x47, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x64, 0x42, 0x79, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x52, 0x0f,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x42, 0x79, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x12,
	0x57, 0x0a, 0x17, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x52,
	0x17, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x13, 0x46, 0x72, 0x6f, 0x6d,
	0x42, 0x65, 0x67, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x59, 0x65, 0x61, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x52, 0x13, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x4f, 0x66, 0x59, 0x65, 0x61, 0x72, 0x12, 0x4b, 0x0a, 0x11, 0x46, 0x6f, 0x72,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x52, 0x11, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x3f, 0x0a, 0x0b, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69,
	0x6e, 0x67, 0x44, 0x6f, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x6f,
	0x6e, 0x67, 0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x52, 0x0b, 0x49, 0x6e, 0x63, 0x6f,
	0x6d, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x63, 0x32, 0xe5, 0x02, 0x0a, 0x1f, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x54, 0x0a, 0x06, 0x55,
	0x70, 0x73, 0x65, 0x72, 0x74, 0x12, 0x30, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x57, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x1c, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f,
	0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x42, 0x79, 0x49, 0x64, 0x1a, 0x30, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x06, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x12, 0x1c, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x79,
	0x49, 0x64, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x2e, 0x6d,
	0x6f, 0x6e, 0x67, 0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42,
	0x21, 0x5a, 0x1f, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x6f, 0x6e, 0x67,
	0x6f, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bCalculationTable_proto_rawDescOnce sync.Once
	file_bCalculationTable_proto_rawDescData = file_bCalculationTable_proto_rawDesc
)

func file_bCalculationTable_proto_rawDescGZIP() []byte {
	file_bCalculationTable_proto_rawDescOnce.Do(func() {
		file_bCalculationTable_proto_rawDescData = protoimpl.X.CompressGZIP(file_bCalculationTable_proto_rawDescData)
	})
	return file_bCalculationTable_proto_rawDescData
}

var file_bCalculationTable_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_bCalculationTable_proto_goTypes = []interface{}{
	(*BCTable)(nil),                  // 0: mongo_document_service.BCTable
	(*BuildingCalculationTable)(nil), // 1: mongo_document_service.BuildingCalculationTable
	(*BuildingFacturaDoc)(nil),       // 2: mongo_document_service.BuildingFacturaDoc
	(*Person)(nil),                   // 3: mongo_document_service.Person
	(*Subcontractor)(nil),            // 4: mongo_document_service.Subcontractor
	(*Detailing)(nil),                // 5: mongo_document_service.Detailing
	(*Material)(nil),                 // 6: mongo_document_service.Material
	(*ProductTable)(nil),             // 7: mongo_document_service.ProductTable
	(*Summa)(nil),                    // 8: mongo_document_service.Summa
	(*SummaSeller)(nil),              // 9: mongo_document_service.SummaSeller
	(*Summary)(nil),                  // 10: mongo_document_service.Summary
	(*ById)(nil),                     // 11: mongo_document_service.ById
	(*UpdateStatusReq)(nil),          // 12: mongo_document_service.UpdateStatusReq
	(*emptypb.Empty)(nil),            // 13: google.protobuf.Empty
}
var file_bCalculationTable_proto_depIdxs = []int32{
	2,  // 0: mongo_document_service.BCTable.BuildingFacturaDoc:type_name -> mongo_document_service.BuildingFacturaDoc
	3,  // 1: mongo_document_service.BCTable.GeneralContractor:type_name -> mongo_document_service.Person
	3,  // 2: mongo_document_service.BCTable.Customer:type_name -> mongo_document_service.Person
	4,  // 3: mongo_document_service.BCTable.Subcontractors:type_name -> mongo_document_service.Subcontractor
	5,  // 4: mongo_document_service.BCTable.Detailing:type_name -> mongo_document_service.Detailing
	0,  // 5: mongo_document_service.BuildingCalculationTable.BuildingCalculationTable:type_name -> mongo_document_service.BCTable
	3,  // 6: mongo_document_service.Subcontractor.Company:type_name -> mongo_document_service.Person
	5,  // 7: mongo_document_service.Subcontractor.Detailing:type_name -> mongo_document_service.Detailing
	6,  // 8: mongo_document_service.Detailing.LaborCosts:type_name -> mongo_document_service.Material
	6,  // 9: mongo_document_service.Detailing.BuildingMaterials:type_name -> mongo_document_service.Material
	6,  // 10: mongo_document_service.Detailing.Equipment:type_name -> mongo_document_service.Material
	10, // 11: mongo_document_service.Detailing.Total:type_name -> mongo_document_service.Summary
	7,  // 12: mongo_document_service.Material.Products:type_name -> mongo_document_service.ProductTable
	10, // 13: mongo_document_service.Material.Summary:type_name -> mongo_document_service.Summary
	8,  // 14: mongo_document_service.ProductTable.ProvidedByOffer:type_name -> mongo_document_service.Summa
	8,  // 15: mongo_document_service.ProductTable.FromStartOfConstruction:type_name -> mongo_document_service.Summa
	8,  // 16: mongo_document_service.ProductTable.FromBeginningOfYear:type_name -> mongo_document_service.Summa
	8,  // 17: mongo_document_service.ProductTable.ForReportingMonth:type_name -> mongo_document_service.Summa
	9,  // 18: mongo_document_service.ProductTable.IncomingDoc:type_name -> mongo_document_service.SummaSeller
	8,  // 19: mongo_document_service.Summary.ProvidedByOffer:type_name -> mongo_document_service.Summa
	8,  // 20: mongo_document_service.Summary.FromStartOfConstruction:type_name -> mongo_document_service.Summa
	8,  // 21: mongo_document_service.Summary.FromBeginningOfYear:type_name -> mongo_document_service.Summa
	8,  // 22: mongo_document_service.Summary.ForReportingMonth:type_name -> mongo_document_service.Summa
	8,  // 23: mongo_document_service.Summary.IncomingDoc:type_name -> mongo_document_service.Summa
	1,  // 24: mongo_document_service.BuildingCalculationTableService.Upsert:input_type -> mongo_document_service.BuildingCalculationTable
	11, // 25: mongo_document_service.BuildingCalculationTableService.Get:input_type -> mongo_document_service.ById
	11, // 26: mongo_document_service.BuildingCalculationTableService.Delete:input_type -> mongo_document_service.ById
	12, // 27: mongo_document_service.BuildingCalculationTableService.UpdateStatus:input_type -> mongo_document_service.UpdateStatusReq
	13, // 28: mongo_document_service.BuildingCalculationTableService.Upsert:output_type -> google.protobuf.Empty
	1,  // 29: mongo_document_service.BuildingCalculationTableService.Get:output_type -> mongo_document_service.BuildingCalculationTable
	13, // 30: mongo_document_service.BuildingCalculationTableService.Delete:output_type -> google.protobuf.Empty
	13, // 31: mongo_document_service.BuildingCalculationTableService.UpdateStatus:output_type -> google.protobuf.Empty
	28, // [28:32] is the sub-list for method output_type
	24, // [24:28] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_bCalculationTable_proto_init() }
func file_bCalculationTable_proto_init() {
	if File_bCalculationTable_proto != nil {
		return
	}
	file_mongo_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_bCalculationTable_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BCTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bCalculationTable_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildingCalculationTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bCalculationTable_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildingFacturaDoc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bCalculationTable_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Person); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bCalculationTable_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subcontractor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bCalculationTable_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Detailing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bCalculationTable_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Material); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bCalculationTable_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bCalculationTable_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Summa); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bCalculationTable_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SummaSeller); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bCalculationTable_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Summary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bCalculationTable_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bCalculationTable_proto_goTypes,
		DependencyIndexes: file_bCalculationTable_proto_depIdxs,
		MessageInfos:      file_bCalculationTable_proto_msgTypes,
	}.Build()
	File_bCalculationTable_proto = out.File
	file_bCalculationTable_proto_rawDesc = nil
	file_bCalculationTable_proto_goTypes = nil
	file_bCalculationTable_proto_depIdxs = nil
}
