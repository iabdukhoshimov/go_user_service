// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: relation.proto

package object_builder_service

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateRelationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableFrom         string          `protobuf:"bytes,1,opt,name=table_from,json=tableFrom,proto3" json:"table_from,omitempty"`
	TableTo           string          `protobuf:"bytes,2,opt,name=table_to,json=tableTo,proto3" json:"table_to,omitempty"`
	Type              string          `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	ViewFields        []string        `protobuf:"bytes,4,rep,name=view_fields,json=viewFields,proto3" json:"view_fields,omitempty"`
	Summaries         []*Summary      `protobuf:"bytes,5,rep,name=summaries,proto3" json:"summaries,omitempty"`
	Editable          bool            `protobuf:"varint,6,opt,name=editable,proto3" json:"editable,omitempty"`
	IsEditable        bool            `protobuf:"varint,7,opt,name=is_editable,json=isEditable,proto3" json:"is_editable,omitempty"`
	Title             string          `protobuf:"bytes,8,opt,name=title,proto3" json:"title,omitempty"`
	ViewType          string          `protobuf:"bytes,9,opt,name=view_type,json=viewType,proto3" json:"view_type,omitempty"`
	Columns           []string        `protobuf:"bytes,10,rep,name=columns,proto3" json:"columns,omitempty"`
	QuickFilters      []*QuickFilter  `protobuf:"bytes,11,rep,name=quick_filters,json=quickFilters,proto3" json:"quick_filters,omitempty"`
	GroupFields       []string        `protobuf:"bytes,12,rep,name=group_fields,json=groupFields,proto3" json:"group_fields,omitempty"`
	RelationTableSlug string          `protobuf:"bytes,13,opt,name=relation_table_slug,json=relationTableSlug,proto3" json:"relation_table_slug,omitempty"`
	DynamicTables     []*DynamicTable `protobuf:"bytes,14,rep,name=dynamic_tables,json=dynamicTables,proto3" json:"dynamic_tables,omitempty"`
	RelationFieldSlug string          `protobuf:"bytes,15,opt,name=relation_field_slug,json=relationFieldSlug,proto3" json:"relation_field_slug,omitempty"`
	AutoFilters       []*AutoFilter   `protobuf:"bytes,16,rep,name=auto_filters,json=autoFilters,proto3" json:"auto_filters,omitempty"`
	DefaultValues     []string        `protobuf:"bytes,17,rep,name=default_values,json=defaultValues,proto3" json:"default_values,omitempty"`
}

func (x *CreateRelationRequest) Reset() {
	*x = CreateRelationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relation_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRelationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRelationRequest) ProtoMessage() {}

func (x *CreateRelationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_relation_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRelationRequest.ProtoReflect.Descriptor instead.
func (*CreateRelationRequest) Descriptor() ([]byte, []int) {
	return file_relation_proto_rawDescGZIP(), []int{0}
}

func (x *CreateRelationRequest) GetTableFrom() string {
	if x != nil {
		return x.TableFrom
	}
	return ""
}

func (x *CreateRelationRequest) GetTableTo() string {
	if x != nil {
		return x.TableTo
	}
	return ""
}

func (x *CreateRelationRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CreateRelationRequest) GetViewFields() []string {
	if x != nil {
		return x.ViewFields
	}
	return nil
}

func (x *CreateRelationRequest) GetSummaries() []*Summary {
	if x != nil {
		return x.Summaries
	}
	return nil
}

func (x *CreateRelationRequest) GetEditable() bool {
	if x != nil {
		return x.Editable
	}
	return false
}

func (x *CreateRelationRequest) GetIsEditable() bool {
	if x != nil {
		return x.IsEditable
	}
	return false
}

func (x *CreateRelationRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateRelationRequest) GetViewType() string {
	if x != nil {
		return x.ViewType
	}
	return ""
}

func (x *CreateRelationRequest) GetColumns() []string {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *CreateRelationRequest) GetQuickFilters() []*QuickFilter {
	if x != nil {
		return x.QuickFilters
	}
	return nil
}

func (x *CreateRelationRequest) GetGroupFields() []string {
	if x != nil {
		return x.GroupFields
	}
	return nil
}

func (x *CreateRelationRequest) GetRelationTableSlug() string {
	if x != nil {
		return x.RelationTableSlug
	}
	return ""
}

func (x *CreateRelationRequest) GetDynamicTables() []*DynamicTable {
	if x != nil {
		return x.DynamicTables
	}
	return nil
}

func (x *CreateRelationRequest) GetRelationFieldSlug() string {
	if x != nil {
		return x.RelationFieldSlug
	}
	return ""
}

func (x *CreateRelationRequest) GetAutoFilters() []*AutoFilter {
	if x != nil {
		return x.AutoFilters
	}
	return nil
}

func (x *CreateRelationRequest) GetDefaultValues() []string {
	if x != nil {
		return x.DefaultValues
	}
	return nil
}

type AutoFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldTo   string `protobuf:"bytes,1,opt,name=field_to,json=fieldTo,proto3" json:"field_to,omitempty"`
	FieldFrom string `protobuf:"bytes,2,opt,name=field_from,json=fieldFrom,proto3" json:"field_from,omitempty"`
}

func (x *AutoFilter) Reset() {
	*x = AutoFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relation_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoFilter) ProtoMessage() {}

func (x *AutoFilter) ProtoReflect() protoreflect.Message {
	mi := &file_relation_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoFilter.ProtoReflect.Descriptor instead.
func (*AutoFilter) Descriptor() ([]byte, []int) {
	return file_relation_proto_rawDescGZIP(), []int{1}
}

func (x *AutoFilter) GetFieldTo() string {
	if x != nil {
		return x.FieldTo
	}
	return ""
}

func (x *AutoFilter) GetFieldFrom() string {
	if x != nil {
		return x.FieldFrom
	}
	return ""
}

type DynamicTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableSlug  string   `protobuf:"bytes,1,opt,name=table_slug,json=tableSlug,proto3" json:"table_slug,omitempty"`
	ViewFields []string `protobuf:"bytes,2,rep,name=view_fields,json=viewFields,proto3" json:"view_fields,omitempty"`
}

func (x *DynamicTable) Reset() {
	*x = DynamicTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relation_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamicTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicTable) ProtoMessage() {}

func (x *DynamicTable) ProtoReflect() protoreflect.Message {
	mi := &file_relation_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicTable.ProtoReflect.Descriptor instead.
func (*DynamicTable) Descriptor() ([]byte, []int) {
	return file_relation_proto_rawDescGZIP(), []int{2}
}

func (x *DynamicTable) GetTableSlug() string {
	if x != nil {
		return x.TableSlug
	}
	return ""
}

func (x *DynamicTable) GetViewFields() []string {
	if x != nil {
		return x.ViewFields
	}
	return nil
}

type UpdateRelationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TableFrom         string          `protobuf:"bytes,2,opt,name=table_from,json=tableFrom,proto3" json:"table_from,omitempty"`
	TableTo           string          `protobuf:"bytes,3,opt,name=table_to,json=tableTo,proto3" json:"table_to,omitempty"`
	Type              string          `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	ViewFields        []string        `protobuf:"bytes,5,rep,name=view_fields,json=viewFields,proto3" json:"view_fields,omitempty"`
	Summaries         []*Summary      `protobuf:"bytes,6,rep,name=summaries,proto3" json:"summaries,omitempty"`
	Editable          bool            `protobuf:"varint,7,opt,name=editable,proto3" json:"editable,omitempty"`
	IsEditable        bool            `protobuf:"varint,8,opt,name=is_editable,json=isEditable,proto3" json:"is_editable,omitempty"`
	Title             string          `protobuf:"bytes,9,opt,name=title,proto3" json:"title,omitempty"`
	Columns           []string        `protobuf:"bytes,10,rep,name=columns,proto3" json:"columns,omitempty"`
	QuickFilters      []*QuickFilter  `protobuf:"bytes,11,rep,name=quick_filters,json=quickFilters,proto3" json:"quick_filters,omitempty"`
	GroupFields       []string        `protobuf:"bytes,12,rep,name=group_fields,json=groupFields,proto3" json:"group_fields,omitempty"`
	RelationTableSlug string          `protobuf:"bytes,13,opt,name=relation_table_slug,json=relationTableSlug,proto3" json:"relation_table_slug,omitempty"`
	ViewType          string          `protobuf:"bytes,14,opt,name=view_type,json=viewType,proto3" json:"view_type,omitempty"`
	DynamicTables     []*DynamicTable `protobuf:"bytes,15,rep,name=dynamic_tables,json=dynamicTables,proto3" json:"dynamic_tables,omitempty"`
	RelationFieldSlug string          `protobuf:"bytes,16,opt,name=relation_field_slug,json=relationFieldSlug,proto3" json:"relation_field_slug,omitempty"`
	AutoFilters       []*AutoFilter   `protobuf:"bytes,17,rep,name=auto_filters,json=autoFilters,proto3" json:"auto_filters,omitempty"`
	DefaultValues     []string        `protobuf:"bytes,18,rep,name=default_values,json=defaultValues,proto3" json:"default_values,omitempty"`
}

func (x *UpdateRelationRequest) Reset() {
	*x = UpdateRelationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relation_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRelationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRelationRequest) ProtoMessage() {}

func (x *UpdateRelationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_relation_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRelationRequest.ProtoReflect.Descriptor instead.
func (*UpdateRelationRequest) Descriptor() ([]byte, []int) {
	return file_relation_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateRelationRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateRelationRequest) GetTableFrom() string {
	if x != nil {
		return x.TableFrom
	}
	return ""
}

func (x *UpdateRelationRequest) GetTableTo() string {
	if x != nil {
		return x.TableTo
	}
	return ""
}

func (x *UpdateRelationRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *UpdateRelationRequest) GetViewFields() []string {
	if x != nil {
		return x.ViewFields
	}
	return nil
}

func (x *UpdateRelationRequest) GetSummaries() []*Summary {
	if x != nil {
		return x.Summaries
	}
	return nil
}

func (x *UpdateRelationRequest) GetEditable() bool {
	if x != nil {
		return x.Editable
	}
	return false
}

func (x *UpdateRelationRequest) GetIsEditable() bool {
	if x != nil {
		return x.IsEditable
	}
	return false
}

func (x *UpdateRelationRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdateRelationRequest) GetColumns() []string {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *UpdateRelationRequest) GetQuickFilters() []*QuickFilter {
	if x != nil {
		return x.QuickFilters
	}
	return nil
}

func (x *UpdateRelationRequest) GetGroupFields() []string {
	if x != nil {
		return x.GroupFields
	}
	return nil
}

func (x *UpdateRelationRequest) GetRelationTableSlug() string {
	if x != nil {
		return x.RelationTableSlug
	}
	return ""
}

func (x *UpdateRelationRequest) GetViewType() string {
	if x != nil {
		return x.ViewType
	}
	return ""
}

func (x *UpdateRelationRequest) GetDynamicTables() []*DynamicTable {
	if x != nil {
		return x.DynamicTables
	}
	return nil
}

func (x *UpdateRelationRequest) GetRelationFieldSlug() string {
	if x != nil {
		return x.RelationFieldSlug
	}
	return ""
}

func (x *UpdateRelationRequest) GetAutoFilters() []*AutoFilter {
	if x != nil {
		return x.AutoFilters
	}
	return nil
}

func (x *UpdateRelationRequest) GetDefaultValues() []string {
	if x != nil {
		return x.DefaultValues
	}
	return nil
}

type RelationForGetAll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TableFrom         *Table          `protobuf:"bytes,2,opt,name=table_from,json=tableFrom,proto3" json:"table_from,omitempty"`
	TableTo           *Table          `protobuf:"bytes,3,opt,name=table_to,json=tableTo,proto3" json:"table_to,omitempty"`
	Type              string          `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	ViewFields        []*Field        `protobuf:"bytes,5,rep,name=view_fields,json=viewFields,proto3" json:"view_fields,omitempty"`
	Summaries         []*Summary      `protobuf:"bytes,6,rep,name=summaries,proto3" json:"summaries,omitempty"`
	Editable          bool            `protobuf:"varint,7,opt,name=editable,proto3" json:"editable,omitempty"`
	IsEditable        bool            `protobuf:"varint,8,opt,name=is_editable,json=isEditable,proto3" json:"is_editable,omitempty"`
	Title             string          `protobuf:"bytes,9,opt,name=title,proto3" json:"title,omitempty"`
	Columns           []string        `protobuf:"bytes,10,rep,name=columns,proto3" json:"columns,omitempty"`
	QuickFilters      []*QuickFilter  `protobuf:"bytes,11,rep,name=quick_filters,json=quickFilters,proto3" json:"quick_filters,omitempty"`
	GroupFields       []string        `protobuf:"bytes,12,rep,name=group_fields,json=groupFields,proto3" json:"group_fields,omitempty"`
	RelationTableSlug string          `protobuf:"bytes,13,opt,name=relation_table_slug,json=relationTableSlug,proto3" json:"relation_table_slug,omitempty"`
	ViewType          string          `protobuf:"bytes,14,opt,name=view_type,json=viewType,proto3" json:"view_type,omitempty"`
	DynamicTables     []*DynamicTable `protobuf:"bytes,15,rep,name=dynamic_tables,json=dynamicTables,proto3" json:"dynamic_tables,omitempty"`
	RelationFieldSlug string          `protobuf:"bytes,16,opt,name=relation_field_slug,json=relationFieldSlug,proto3" json:"relation_field_slug,omitempty"`
	AutoFilters       []*AutoFilter   `protobuf:"bytes,17,rep,name=auto_filters,json=autoFilters,proto3" json:"auto_filters,omitempty"`
	DefaultValues     []string        `protobuf:"bytes,18,rep,name=default_values,json=defaultValues,proto3" json:"default_values,omitempty"`
}

func (x *RelationForGetAll) Reset() {
	*x = RelationForGetAll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relation_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelationForGetAll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationForGetAll) ProtoMessage() {}

func (x *RelationForGetAll) ProtoReflect() protoreflect.Message {
	mi := &file_relation_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelationForGetAll.ProtoReflect.Descriptor instead.
func (*RelationForGetAll) Descriptor() ([]byte, []int) {
	return file_relation_proto_rawDescGZIP(), []int{4}
}

func (x *RelationForGetAll) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RelationForGetAll) GetTableFrom() *Table {
	if x != nil {
		return x.TableFrom
	}
	return nil
}

func (x *RelationForGetAll) GetTableTo() *Table {
	if x != nil {
		return x.TableTo
	}
	return nil
}

func (x *RelationForGetAll) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RelationForGetAll) GetViewFields() []*Field {
	if x != nil {
		return x.ViewFields
	}
	return nil
}

func (x *RelationForGetAll) GetSummaries() []*Summary {
	if x != nil {
		return x.Summaries
	}
	return nil
}

func (x *RelationForGetAll) GetEditable() bool {
	if x != nil {
		return x.Editable
	}
	return false
}

func (x *RelationForGetAll) GetIsEditable() bool {
	if x != nil {
		return x.IsEditable
	}
	return false
}

func (x *RelationForGetAll) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *RelationForGetAll) GetColumns() []string {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *RelationForGetAll) GetQuickFilters() []*QuickFilter {
	if x != nil {
		return x.QuickFilters
	}
	return nil
}

func (x *RelationForGetAll) GetGroupFields() []string {
	if x != nil {
		return x.GroupFields
	}
	return nil
}

func (x *RelationForGetAll) GetRelationTableSlug() string {
	if x != nil {
		return x.RelationTableSlug
	}
	return ""
}

func (x *RelationForGetAll) GetViewType() string {
	if x != nil {
		return x.ViewType
	}
	return ""
}

func (x *RelationForGetAll) GetDynamicTables() []*DynamicTable {
	if x != nil {
		return x.DynamicTables
	}
	return nil
}

func (x *RelationForGetAll) GetRelationFieldSlug() string {
	if x != nil {
		return x.RelationFieldSlug
	}
	return ""
}

func (x *RelationForGetAll) GetAutoFilters() []*AutoFilter {
	if x != nil {
		return x.AutoFilters
	}
	return nil
}

func (x *RelationForGetAll) GetDefaultValues() []string {
	if x != nil {
		return x.DefaultValues
	}
	return nil
}

type GetAllRelationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Relations []*RelationForGetAll `protobuf:"bytes,1,rep,name=relations,proto3" json:"relations,omitempty"`
	Count     int32                `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *GetAllRelationsResponse) Reset() {
	*x = GetAllRelationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relation_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllRelationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllRelationsResponse) ProtoMessage() {}

func (x *GetAllRelationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_relation_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllRelationsResponse.ProtoReflect.Descriptor instead.
func (*GetAllRelationsResponse) Descriptor() ([]byte, []int) {
	return file_relation_proto_rawDescGZIP(), []int{5}
}

func (x *GetAllRelationsResponse) GetRelations() []*RelationForGetAll {
	if x != nil {
		return x.Relations
	}
	return nil
}

func (x *GetAllRelationsResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type GetAllRelationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableSlug         string `protobuf:"bytes,1,opt,name=table_slug,json=tableSlug,proto3" json:"table_slug,omitempty"`
	Limit             int32  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset            int32  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	TableId           string `protobuf:"bytes,4,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	RelationTableSlug string `protobuf:"bytes,5,opt,name=relation_table_slug,json=relationTableSlug,proto3" json:"relation_table_slug,omitempty"`
}

func (x *GetAllRelationsRequest) Reset() {
	*x = GetAllRelationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relation_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllRelationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllRelationsRequest) ProtoMessage() {}

func (x *GetAllRelationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_relation_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllRelationsRequest.ProtoReflect.Descriptor instead.
func (*GetAllRelationsRequest) Descriptor() ([]byte, []int) {
	return file_relation_proto_rawDescGZIP(), []int{6}
}

func (x *GetAllRelationsRequest) GetTableSlug() string {
	if x != nil {
		return x.TableSlug
	}
	return ""
}

func (x *GetAllRelationsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetAllRelationsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetAllRelationsRequest) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

func (x *GetAllRelationsRequest) GetRelationTableSlug() string {
	if x != nil {
		return x.RelationTableSlug
	}
	return ""
}

type RelationPrimaryKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RelationPrimaryKey) Reset() {
	*x = RelationPrimaryKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relation_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelationPrimaryKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationPrimaryKey) ProtoMessage() {}

func (x *RelationPrimaryKey) ProtoReflect() protoreflect.Message {
	mi := &file_relation_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelationPrimaryKey.ProtoReflect.Descriptor instead.
func (*RelationPrimaryKey) Descriptor() ([]byte, []int) {
	return file_relation_proto_rawDescGZIP(), []int{7}
}

func (x *RelationPrimaryKey) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type Summary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldName   string `protobuf:"bytes,1,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	FormulaName string `protobuf:"bytes,2,opt,name=formula_name,json=formulaName,proto3" json:"formula_name,omitempty"`
}

func (x *Summary) Reset() {
	*x = Summary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relation_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Summary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Summary) ProtoMessage() {}

func (x *Summary) ProtoReflect() protoreflect.Message {
	mi := &file_relation_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Summary.ProtoReflect.Descriptor instead.
func (*Summary) Descriptor() ([]byte, []int) {
	return file_relation_proto_rawDescGZIP(), []int{8}
}

func (x *Summary) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *Summary) GetFormulaName() string {
	if x != nil {
		return x.FormulaName
	}
	return ""
}

var File_relation_proto protoreflect.FileDescriptor

var file_relation_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x16, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0a, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd7, 0x05, 0x0a, 0x15,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x46, 0x72, 0x6f, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x12, 0x3d, 0x0a, 0x09, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x09, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x65, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x45, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x69, 0x65, 0x77, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x48, 0x0a,
	0x0d, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x51, 0x75,
	0x69, 0x63, 0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0c, 0x71, 0x75, 0x69, 0x63, 0x6b,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x6c, 0x75,
	0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x4b, 0x0a, 0x0e, 0x64, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0d, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x45, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x25,
	0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x46, 0x0a, 0x0a, 0x41, 0x75, 0x74, 0x6f, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x74, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x6f, 0x12, 0x1d,
	0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x22, 0x4e, 0x0a,
	0x0c, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x1f, 0x0a, 0x0b,
	0x76, 0x69, 0x65, 0x77, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0xe7, 0x05,
	0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x69, 0x65, 0x77,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x3d, 0x0a, 0x09, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x09, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x65, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x45, 0x64, 0x69, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x73, 0x12, 0x48, 0x0a, 0x0d, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0c,
	0x71, 0x75, 0x69, 0x63, 0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12,
	0x2e, 0x0a, 0x13, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x6c, 0x75, 0x67, 0x12,
	0x1b, 0x0a, 0x09, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x76, 0x69, 0x65, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x0e,
	0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x0f,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0d, 0x64, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x73, 0x6c, 0x75, 0x67,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x45, 0x0a, 0x0c, 0x61, 0x75, 0x74,
	0x6f, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xc0, 0x06, 0x0a, 0x11, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a,
	0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x38, 0x0a, 0x08, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x07, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x54, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x76, 0x69, 0x65,
	0x77, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0a, 0x76,
	0x69, 0x65, 0x77, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x3d, 0x0a, 0x09, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x09, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x64, 0x69, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x65, 0x64, 0x69, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x45, 0x64, 0x69,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x48, 0x0a, 0x0d, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x5f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x0c, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x6c,
	0x75, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x69, 0x65, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x4b, 0x0a, 0x0e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0d, 0x64,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x73,
	0x6c, 0x75, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x45, 0x0a, 0x0c,
	0x61, 0x75, 0x74, 0x6f, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x11, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x6f,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x78, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb0, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x6c, 0x75, 0x67, 0x22, 0x24, 0x0a, 0x12, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4b, 0x0a,
	0x07, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x6d, 0x75,
	0x6c, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66,
	0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x8b, 0x03, 0x0a, 0x0f, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x68,
	0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x12, 0x2e, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x2d, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x12, 0x2a, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x21, 0x5a, 0x1f, 0x67, 0x65, 0x6e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_relation_proto_rawDescOnce sync.Once
	file_relation_proto_rawDescData = file_relation_proto_rawDesc
)

func file_relation_proto_rawDescGZIP() []byte {
	file_relation_proto_rawDescOnce.Do(func() {
		file_relation_proto_rawDescData = protoimpl.X.CompressGZIP(file_relation_proto_rawDescData)
	})
	return file_relation_proto_rawDescData
}

var file_relation_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_relation_proto_goTypes = []interface{}{
	(*CreateRelationRequest)(nil),   // 0: object_builder_service.CreateRelationRequest
	(*AutoFilter)(nil),              // 1: object_builder_service.AutoFilter
	(*DynamicTable)(nil),            // 2: object_builder_service.DynamicTable
	(*UpdateRelationRequest)(nil),   // 3: object_builder_service.UpdateRelationRequest
	(*RelationForGetAll)(nil),       // 4: object_builder_service.RelationForGetAll
	(*GetAllRelationsResponse)(nil), // 5: object_builder_service.GetAllRelationsResponse
	(*GetAllRelationsRequest)(nil),  // 6: object_builder_service.GetAllRelationsRequest
	(*RelationPrimaryKey)(nil),      // 7: object_builder_service.RelationPrimaryKey
	(*Summary)(nil),                 // 8: object_builder_service.Summary
	(*QuickFilter)(nil),             // 9: object_builder_service.QuickFilter
	(*Table)(nil),                   // 10: object_builder_service.Table
	(*Field)(nil),                   // 11: object_builder_service.Field
	(*emptypb.Empty)(nil),           // 12: google.protobuf.Empty
}
var file_relation_proto_depIdxs = []int32{
	8,  // 0: object_builder_service.CreateRelationRequest.summaries:type_name -> object_builder_service.Summary
	9,  // 1: object_builder_service.CreateRelationRequest.quick_filters:type_name -> object_builder_service.QuickFilter
	2,  // 2: object_builder_service.CreateRelationRequest.dynamic_tables:type_name -> object_builder_service.DynamicTable
	1,  // 3: object_builder_service.CreateRelationRequest.auto_filters:type_name -> object_builder_service.AutoFilter
	8,  // 4: object_builder_service.UpdateRelationRequest.summaries:type_name -> object_builder_service.Summary
	9,  // 5: object_builder_service.UpdateRelationRequest.quick_filters:type_name -> object_builder_service.QuickFilter
	2,  // 6: object_builder_service.UpdateRelationRequest.dynamic_tables:type_name -> object_builder_service.DynamicTable
	1,  // 7: object_builder_service.UpdateRelationRequest.auto_filters:type_name -> object_builder_service.AutoFilter
	10, // 8: object_builder_service.RelationForGetAll.table_from:type_name -> object_builder_service.Table
	10, // 9: object_builder_service.RelationForGetAll.table_to:type_name -> object_builder_service.Table
	11, // 10: object_builder_service.RelationForGetAll.view_fields:type_name -> object_builder_service.Field
	8,  // 11: object_builder_service.RelationForGetAll.summaries:type_name -> object_builder_service.Summary
	9,  // 12: object_builder_service.RelationForGetAll.quick_filters:type_name -> object_builder_service.QuickFilter
	2,  // 13: object_builder_service.RelationForGetAll.dynamic_tables:type_name -> object_builder_service.DynamicTable
	1,  // 14: object_builder_service.RelationForGetAll.auto_filters:type_name -> object_builder_service.AutoFilter
	4,  // 15: object_builder_service.GetAllRelationsResponse.relations:type_name -> object_builder_service.RelationForGetAll
	0,  // 16: object_builder_service.RelationService.Create:input_type -> object_builder_service.CreateRelationRequest
	6,  // 17: object_builder_service.RelationService.GetAll:input_type -> object_builder_service.GetAllRelationsRequest
	3,  // 18: object_builder_service.RelationService.Update:input_type -> object_builder_service.UpdateRelationRequest
	7,  // 19: object_builder_service.RelationService.Delete:input_type -> object_builder_service.RelationPrimaryKey
	0,  // 20: object_builder_service.RelationService.Create:output_type -> object_builder_service.CreateRelationRequest
	5,  // 21: object_builder_service.RelationService.GetAll:output_type -> object_builder_service.GetAllRelationsResponse
	12, // 22: object_builder_service.RelationService.Update:output_type -> google.protobuf.Empty
	12, // 23: object_builder_service.RelationService.Delete:output_type -> google.protobuf.Empty
	20, // [20:24] is the sub-list for method output_type
	16, // [16:20] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_relation_proto_init() }
func file_relation_proto_init() {
	if File_relation_proto != nil {
		return
	}
	file_field_proto_init()
	file_table_proto_init()
	file_view_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_relation_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRelationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relation_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relation_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynamicTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relation_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRelationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relation_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelationForGetAll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relation_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllRelationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relation_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllRelationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relation_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelationPrimaryKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relation_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Summary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_relation_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_relation_proto_goTypes,
		DependencyIndexes: file_relation_proto_depIdxs,
		MessageInfos:      file_relation_proto_msgTypes,
	}.Build()
	File_relation_proto = out.File
	file_relation_proto_rawDesc = nil
	file_relation_proto_goTypes = nil
	file_relation_proto_depIdxs = nil
}
