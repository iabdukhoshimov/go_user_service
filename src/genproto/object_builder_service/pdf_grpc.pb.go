// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: pdf.proto

package object_builder_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PdfServiceClient is the client API for PdfService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PdfServiceClient interface {
	Create(ctx context.Context, in *CreatePdfRequest, opts ...grpc.CallOption) (*Pdf, error)
	GetList(ctx context.Context, in *GetAllPdfRequest, opts ...grpc.CallOption) (*GetAllPdfResponse, error)
	GetSingle(ctx context.Context, in *PdfPrimaryKey, opts ...grpc.CallOption) (*Pdf, error)
	Update(ctx context.Context, in *Pdf, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Delete(ctx context.Context, in *PdfPrimaryKey, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type pdfServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPdfServiceClient(cc grpc.ClientConnInterface) PdfServiceClient {
	return &pdfServiceClient{cc}
}

func (c *pdfServiceClient) Create(ctx context.Context, in *CreatePdfRequest, opts ...grpc.CallOption) (*Pdf, error) {
	out := new(Pdf)
	err := c.cc.Invoke(ctx, "/object_builder_service.PdfService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pdfServiceClient) GetList(ctx context.Context, in *GetAllPdfRequest, opts ...grpc.CallOption) (*GetAllPdfResponse, error) {
	out := new(GetAllPdfResponse)
	err := c.cc.Invoke(ctx, "/object_builder_service.PdfService/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pdfServiceClient) GetSingle(ctx context.Context, in *PdfPrimaryKey, opts ...grpc.CallOption) (*Pdf, error) {
	out := new(Pdf)
	err := c.cc.Invoke(ctx, "/object_builder_service.PdfService/GetSingle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pdfServiceClient) Update(ctx context.Context, in *Pdf, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/object_builder_service.PdfService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pdfServiceClient) Delete(ctx context.Context, in *PdfPrimaryKey, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/object_builder_service.PdfService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PdfServiceServer is the server API for PdfService service.
// All implementations must embed UnimplementedPdfServiceServer
// for forward compatibility
type PdfServiceServer interface {
	Create(context.Context, *CreatePdfRequest) (*Pdf, error)
	GetList(context.Context, *GetAllPdfRequest) (*GetAllPdfResponse, error)
	GetSingle(context.Context, *PdfPrimaryKey) (*Pdf, error)
	Update(context.Context, *Pdf) (*emptypb.Empty, error)
	Delete(context.Context, *PdfPrimaryKey) (*emptypb.Empty, error)
	mustEmbedUnimplementedPdfServiceServer()
}

// UnimplementedPdfServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPdfServiceServer struct {
}

func (UnimplementedPdfServiceServer) Create(context.Context, *CreatePdfRequest) (*Pdf, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPdfServiceServer) GetList(context.Context, *GetAllPdfRequest) (*GetAllPdfResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedPdfServiceServer) GetSingle(context.Context, *PdfPrimaryKey) (*Pdf, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSingle not implemented")
}
func (UnimplementedPdfServiceServer) Update(context.Context, *Pdf) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPdfServiceServer) Delete(context.Context, *PdfPrimaryKey) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPdfServiceServer) mustEmbedUnimplementedPdfServiceServer() {}

// UnsafePdfServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PdfServiceServer will
// result in compilation errors.
type UnsafePdfServiceServer interface {
	mustEmbedUnimplementedPdfServiceServer()
}

func RegisterPdfServiceServer(s grpc.ServiceRegistrar, srv PdfServiceServer) {
	s.RegisterService(&PdfService_ServiceDesc, srv)
}

func _PdfService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePdfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PdfServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/object_builder_service.PdfService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PdfServiceServer).Create(ctx, req.(*CreatePdfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PdfService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllPdfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PdfServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/object_builder_service.PdfService/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PdfServiceServer).GetList(ctx, req.(*GetAllPdfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PdfService_GetSingle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PdfPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PdfServiceServer).GetSingle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/object_builder_service.PdfService/GetSingle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PdfServiceServer).GetSingle(ctx, req.(*PdfPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _PdfService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pdf)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PdfServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/object_builder_service.PdfService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PdfServiceServer).Update(ctx, req.(*Pdf))
	}
	return interceptor(ctx, in, info, handler)
}

func _PdfService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PdfPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PdfServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/object_builder_service.PdfService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PdfServiceServer).Delete(ctx, req.(*PdfPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

// PdfService_ServiceDesc is the grpc.ServiceDesc for PdfService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PdfService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "object_builder_service.PdfService",
	HandlerType: (*PdfServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _PdfService_Create_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _PdfService_GetList_Handler,
		},
		{
			MethodName: "GetSingle",
			Handler:    _PdfService_GetSingle_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PdfService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PdfService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pdf.proto",
}
