// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: event_logs.proto

package object_builder_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EventLogsServiceClient is the client API for EventLogsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventLogsServiceClient interface {
	GetList(ctx context.Context, in *GetEventLogsListRequest, opts ...grpc.CallOption) (*GetEventLogListsResponse, error)
	GetSingle(ctx context.Context, in *GetEventLogById, opts ...grpc.CallOption) (*EventLog, error)
}

type eventLogsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventLogsServiceClient(cc grpc.ClientConnInterface) EventLogsServiceClient {
	return &eventLogsServiceClient{cc}
}

func (c *eventLogsServiceClient) GetList(ctx context.Context, in *GetEventLogsListRequest, opts ...grpc.CallOption) (*GetEventLogListsResponse, error) {
	out := new(GetEventLogListsResponse)
	err := c.cc.Invoke(ctx, "/object_builder_service.EventLogsService/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventLogsServiceClient) GetSingle(ctx context.Context, in *GetEventLogById, opts ...grpc.CallOption) (*EventLog, error) {
	out := new(EventLog)
	err := c.cc.Invoke(ctx, "/object_builder_service.EventLogsService/GetSingle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventLogsServiceServer is the server API for EventLogsService service.
// All implementations must embed UnimplementedEventLogsServiceServer
// for forward compatibility
type EventLogsServiceServer interface {
	GetList(context.Context, *GetEventLogsListRequest) (*GetEventLogListsResponse, error)
	GetSingle(context.Context, *GetEventLogById) (*EventLog, error)
	mustEmbedUnimplementedEventLogsServiceServer()
}

// UnimplementedEventLogsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEventLogsServiceServer struct {
}

func (UnimplementedEventLogsServiceServer) GetList(context.Context, *GetEventLogsListRequest) (*GetEventLogListsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedEventLogsServiceServer) GetSingle(context.Context, *GetEventLogById) (*EventLog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSingle not implemented")
}
func (UnimplementedEventLogsServiceServer) mustEmbedUnimplementedEventLogsServiceServer() {}

// UnsafeEventLogsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventLogsServiceServer will
// result in compilation errors.
type UnsafeEventLogsServiceServer interface {
	mustEmbedUnimplementedEventLogsServiceServer()
}

func RegisterEventLogsServiceServer(s grpc.ServiceRegistrar, srv EventLogsServiceServer) {
	s.RegisterService(&EventLogsService_ServiceDesc, srv)
}

func _EventLogsService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventLogsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventLogsServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/object_builder_service.EventLogsService/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventLogsServiceServer).GetList(ctx, req.(*GetEventLogsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventLogsService_GetSingle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventLogById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventLogsServiceServer).GetSingle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/object_builder_service.EventLogsService/GetSingle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventLogsServiceServer).GetSingle(ctx, req.(*GetEventLogById))
	}
	return interceptor(ctx, in, info, handler)
}

// EventLogsService_ServiceDesc is the grpc.ServiceDesc for EventLogsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventLogsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "object_builder_service.EventLogsService",
	HandlerType: (*EventLogsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetList",
			Handler:    _EventLogsService_GetList_Handler,
		},
		{
			MethodName: "GetSingle",
			Handler:    _EventLogsService_GetSingle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "event_logs.proto",
}
