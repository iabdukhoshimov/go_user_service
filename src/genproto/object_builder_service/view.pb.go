// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: view.proto

package object_builder_service

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateViewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableSlug           string         `protobuf:"bytes,1,opt,name=table_slug,json=tableSlug,proto3" json:"table_slug,omitempty"`
	Type                string         `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	MainField           string         `protobuf:"bytes,3,opt,name=main_field,json=mainField,proto3" json:"main_field,omitempty"`
	Name                string         `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	DisableDates        *DisableDates  `protobuf:"bytes,5,opt,name=disable_dates,json=disableDates,proto3" json:"disable_dates,omitempty"`
	ViewFields          []string       `protobuf:"bytes,6,rep,name=view_fields,json=viewFields,proto3" json:"view_fields,omitempty"`
	QuickFilters        []*QuickFilter `protobuf:"bytes,7,rep,name=quick_filters,json=quickFilters,proto3" json:"quick_filters,omitempty"`
	Users               []string       `protobuf:"bytes,8,rep,name=users,proto3" json:"users,omitempty"`
	GroupFields         []string       `protobuf:"bytes,9,rep,name=group_fields,json=groupFields,proto3" json:"group_fields,omitempty"`
	Columns             []string       `protobuf:"bytes,10,rep,name=columns,proto3" json:"columns,omitempty"`
	CalendarFromSlug    string         `protobuf:"bytes,11,opt,name=calendar_from_slug,json=calendarFromSlug,proto3" json:"calendar_from_slug,omitempty"`
	CalendarToSlug      string         `protobuf:"bytes,12,opt,name=calendar_to_slug,json=calendarToSlug,proto3" json:"calendar_to_slug,omitempty"`
	TimeInterval        int32          `protobuf:"varint,13,opt,name=time_interval,json=timeInterval,proto3" json:"time_interval,omitempty"`
	MultipleInsert      bool           `protobuf:"varint,14,opt,name=multiple_insert,json=multipleInsert,proto3" json:"multiple_insert,omitempty"`
	StatusFieldSlug     string         `protobuf:"bytes,15,opt,name=status_field_slug,json=statusFieldSlug,proto3" json:"status_field_slug,omitempty"`
	RelationTableSlug   string         `protobuf:"bytes,16,opt,name=relation_table_slug,json=relationTableSlug,proto3" json:"relation_table_slug,omitempty"`
	IsEditable          bool           `protobuf:"varint,17,opt,name=is_editable,json=isEditable,proto3" json:"is_editable,omitempty"`
	RelationId          string         `protobuf:"bytes,18,opt,name=relation_id,json=relationId,proto3" json:"relation_id,omitempty"`
	MultipleInsertField string         `protobuf:"bytes,19,opt,name=multiple_insert_field,json=multipleInsertField,proto3" json:"multiple_insert_field,omitempty"`
	UpdatedFields       []string       `protobuf:"bytes,20,rep,name=updated_fields,json=updatedFields,proto3" json:"updated_fields,omitempty"`
}

func (x *CreateViewRequest) Reset() {
	*x = CreateViewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_view_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateViewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateViewRequest) ProtoMessage() {}

func (x *CreateViewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_view_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateViewRequest.ProtoReflect.Descriptor instead.
func (*CreateViewRequest) Descriptor() ([]byte, []int) {
	return file_view_proto_rawDescGZIP(), []int{0}
}

func (x *CreateViewRequest) GetTableSlug() string {
	if x != nil {
		return x.TableSlug
	}
	return ""
}

func (x *CreateViewRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CreateViewRequest) GetMainField() string {
	if x != nil {
		return x.MainField
	}
	return ""
}

func (x *CreateViewRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateViewRequest) GetDisableDates() *DisableDates {
	if x != nil {
		return x.DisableDates
	}
	return nil
}

func (x *CreateViewRequest) GetViewFields() []string {
	if x != nil {
		return x.ViewFields
	}
	return nil
}

func (x *CreateViewRequest) GetQuickFilters() []*QuickFilter {
	if x != nil {
		return x.QuickFilters
	}
	return nil
}

func (x *CreateViewRequest) GetUsers() []string {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *CreateViewRequest) GetGroupFields() []string {
	if x != nil {
		return x.GroupFields
	}
	return nil
}

func (x *CreateViewRequest) GetColumns() []string {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *CreateViewRequest) GetCalendarFromSlug() string {
	if x != nil {
		return x.CalendarFromSlug
	}
	return ""
}

func (x *CreateViewRequest) GetCalendarToSlug() string {
	if x != nil {
		return x.CalendarToSlug
	}
	return ""
}

func (x *CreateViewRequest) GetTimeInterval() int32 {
	if x != nil {
		return x.TimeInterval
	}
	return 0
}

func (x *CreateViewRequest) GetMultipleInsert() bool {
	if x != nil {
		return x.MultipleInsert
	}
	return false
}

func (x *CreateViewRequest) GetStatusFieldSlug() string {
	if x != nil {
		return x.StatusFieldSlug
	}
	return ""
}

func (x *CreateViewRequest) GetRelationTableSlug() string {
	if x != nil {
		return x.RelationTableSlug
	}
	return ""
}

func (x *CreateViewRequest) GetIsEditable() bool {
	if x != nil {
		return x.IsEditable
	}
	return false
}

func (x *CreateViewRequest) GetRelationId() string {
	if x != nil {
		return x.RelationId
	}
	return ""
}

func (x *CreateViewRequest) GetMultipleInsertField() string {
	if x != nil {
		return x.MultipleInsertField
	}
	return ""
}

func (x *CreateViewRequest) GetUpdatedFields() []string {
	if x != nil {
		return x.UpdatedFields
	}
	return nil
}

type QuickFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldId      string `protobuf:"bytes,1,opt,name=field_id,json=fieldId,proto3" json:"field_id,omitempty"`
	DefaultValue string `protobuf:"bytes,2,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
}

func (x *QuickFilter) Reset() {
	*x = QuickFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_view_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuickFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuickFilter) ProtoMessage() {}

func (x *QuickFilter) ProtoReflect() protoreflect.Message {
	mi := &file_view_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuickFilter.ProtoReflect.Descriptor instead.
func (*QuickFilter) Descriptor() ([]byte, []int) {
	return file_view_proto_rawDescGZIP(), []int{1}
}

func (x *QuickFilter) GetFieldId() string {
	if x != nil {
		return x.FieldId
	}
	return ""
}

func (x *QuickFilter) GetDefaultValue() string {
	if x != nil {
		return x.DefaultValue
	}
	return ""
}

type View struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TableSlug           string         `protobuf:"bytes,2,opt,name=table_slug,json=tableSlug,proto3" json:"table_slug,omitempty"`
	Type                string         `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Name                string         `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	MainField           string         `protobuf:"bytes,5,opt,name=main_field,json=mainField,proto3" json:"main_field,omitempty"`
	DisableDates        *DisableDates  `protobuf:"bytes,6,opt,name=disable_dates,json=disableDates,proto3" json:"disable_dates,omitempty"`
	Columns             []string       `protobuf:"bytes,7,rep,name=columns,proto3" json:"columns,omitempty"`
	QuickFilters        []*QuickFilter `protobuf:"bytes,8,rep,name=quick_filters,json=quickFilters,proto3" json:"quick_filters,omitempty"`
	Users               []string       `protobuf:"bytes,9,rep,name=users,proto3" json:"users,omitempty"`
	ViewFields          []string       `protobuf:"bytes,10,rep,name=view_fields,json=viewFields,proto3" json:"view_fields,omitempty"`
	GroupFields         []string       `protobuf:"bytes,11,rep,name=group_fields,json=groupFields,proto3" json:"group_fields,omitempty"`
	CalendarFromSlug    string         `protobuf:"bytes,12,opt,name=calendar_from_slug,json=calendarFromSlug,proto3" json:"calendar_from_slug,omitempty"`
	CalendarToSlug      string         `protobuf:"bytes,13,opt,name=calendar_to_slug,json=calendarToSlug,proto3" json:"calendar_to_slug,omitempty"`
	TimeInterval        int32          `protobuf:"varint,14,opt,name=time_interval,json=timeInterval,proto3" json:"time_interval,omitempty"`
	MultipleInsert      bool           `protobuf:"varint,15,opt,name=multiple_insert,json=multipleInsert,proto3" json:"multiple_insert,omitempty"`
	StatusFieldSlug     string         `protobuf:"bytes,16,opt,name=status_field_slug,json=statusFieldSlug,proto3" json:"status_field_slug,omitempty"`
	IsEditable          bool           `protobuf:"varint,17,opt,name=is_editable,json=isEditable,proto3" json:"is_editable,omitempty"`
	RelationTableSlug   string         `protobuf:"bytes,18,opt,name=relation_table_slug,json=relationTableSlug,proto3" json:"relation_table_slug,omitempty"`
	RelationId          string         `protobuf:"bytes,19,opt,name=relation_id,json=relationId,proto3" json:"relation_id,omitempty"`
	MultipleInsertField string         `protobuf:"bytes,20,opt,name=multiple_insert_field,json=multipleInsertField,proto3" json:"multiple_insert_field,omitempty"`
	UpdatedFields       []string       `protobuf:"bytes,21,rep,name=updated_fields,json=updatedFields,proto3" json:"updated_fields,omitempty"`
}

func (x *View) Reset() {
	*x = View{}
	if protoimpl.UnsafeEnabled {
		mi := &file_view_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *View) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*View) ProtoMessage() {}

func (x *View) ProtoReflect() protoreflect.Message {
	mi := &file_view_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use View.ProtoReflect.Descriptor instead.
func (*View) Descriptor() ([]byte, []int) {
	return file_view_proto_rawDescGZIP(), []int{2}
}

func (x *View) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *View) GetTableSlug() string {
	if x != nil {
		return x.TableSlug
	}
	return ""
}

func (x *View) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *View) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *View) GetMainField() string {
	if x != nil {
		return x.MainField
	}
	return ""
}

func (x *View) GetDisableDates() *DisableDates {
	if x != nil {
		return x.DisableDates
	}
	return nil
}

func (x *View) GetColumns() []string {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *View) GetQuickFilters() []*QuickFilter {
	if x != nil {
		return x.QuickFilters
	}
	return nil
}

func (x *View) GetUsers() []string {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *View) GetViewFields() []string {
	if x != nil {
		return x.ViewFields
	}
	return nil
}

func (x *View) GetGroupFields() []string {
	if x != nil {
		return x.GroupFields
	}
	return nil
}

func (x *View) GetCalendarFromSlug() string {
	if x != nil {
		return x.CalendarFromSlug
	}
	return ""
}

func (x *View) GetCalendarToSlug() string {
	if x != nil {
		return x.CalendarToSlug
	}
	return ""
}

func (x *View) GetTimeInterval() int32 {
	if x != nil {
		return x.TimeInterval
	}
	return 0
}

func (x *View) GetMultipleInsert() bool {
	if x != nil {
		return x.MultipleInsert
	}
	return false
}

func (x *View) GetStatusFieldSlug() string {
	if x != nil {
		return x.StatusFieldSlug
	}
	return ""
}

func (x *View) GetIsEditable() bool {
	if x != nil {
		return x.IsEditable
	}
	return false
}

func (x *View) GetRelationTableSlug() string {
	if x != nil {
		return x.RelationTableSlug
	}
	return ""
}

func (x *View) GetRelationId() string {
	if x != nil {
		return x.RelationId
	}
	return ""
}

func (x *View) GetMultipleInsertField() string {
	if x != nil {
		return x.MultipleInsertField
	}
	return ""
}

func (x *View) GetUpdatedFields() []string {
	if x != nil {
		return x.UpdatedFields
	}
	return nil
}

type GetAllViewsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Views []*View `protobuf:"bytes,1,rep,name=views,proto3" json:"views,omitempty"`
	Count int32   `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *GetAllViewsResponse) Reset() {
	*x = GetAllViewsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_view_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllViewsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllViewsResponse) ProtoMessage() {}

func (x *GetAllViewsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_view_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllViewsResponse.ProtoReflect.Descriptor instead.
func (*GetAllViewsResponse) Descriptor() ([]byte, []int) {
	return file_view_proto_rawDescGZIP(), []int{3}
}

func (x *GetAllViewsResponse) GetViews() []*View {
	if x != nil {
		return x.Views
	}
	return nil
}

func (x *GetAllViewsResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type GetAllViewsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableSlug string `protobuf:"bytes,1,opt,name=table_slug,json=tableSlug,proto3" json:"table_slug,omitempty"`
}

func (x *GetAllViewsRequest) Reset() {
	*x = GetAllViewsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_view_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllViewsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllViewsRequest) ProtoMessage() {}

func (x *GetAllViewsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_view_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllViewsRequest.ProtoReflect.Descriptor instead.
func (*GetAllViewsRequest) Descriptor() ([]byte, []int) {
	return file_view_proto_rawDescGZIP(), []int{4}
}

func (x *GetAllViewsRequest) GetTableSlug() string {
	if x != nil {
		return x.TableSlug
	}
	return ""
}

type ViewPrimaryKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ViewPrimaryKey) Reset() {
	*x = ViewPrimaryKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_view_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ViewPrimaryKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewPrimaryKey) ProtoMessage() {}

func (x *ViewPrimaryKey) ProtoReflect() protoreflect.Message {
	mi := &file_view_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewPrimaryKey.ProtoReflect.Descriptor instead.
func (*ViewPrimaryKey) Descriptor() ([]byte, []int) {
	return file_view_proto_rawDescGZIP(), []int{5}
}

func (x *ViewPrimaryKey) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DisableDates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableSlug    string `protobuf:"bytes,1,opt,name=table_slug,json=tableSlug,proto3" json:"table_slug,omitempty"`
	TimeFromSlug string `protobuf:"bytes,2,opt,name=time_from_slug,json=timeFromSlug,proto3" json:"time_from_slug,omitempty"`
	TimeToSlug   string `protobuf:"bytes,3,opt,name=time_to_slug,json=timeToSlug,proto3" json:"time_to_slug,omitempty"`
	DaySlug      string `protobuf:"bytes,4,opt,name=day_slug,json=daySlug,proto3" json:"day_slug,omitempty"`
}

func (x *DisableDates) Reset() {
	*x = DisableDates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_view_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableDates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableDates) ProtoMessage() {}

func (x *DisableDates) ProtoReflect() protoreflect.Message {
	mi := &file_view_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableDates.ProtoReflect.Descriptor instead.
func (*DisableDates) Descriptor() ([]byte, []int) {
	return file_view_proto_rawDescGZIP(), []int{6}
}

func (x *DisableDates) GetTableSlug() string {
	if x != nil {
		return x.TableSlug
	}
	return ""
}

func (x *DisableDates) GetTimeFromSlug() string {
	if x != nil {
		return x.TimeFromSlug
	}
	return ""
}

func (x *DisableDates) GetTimeToSlug() string {
	if x != nil {
		return x.TimeToSlug
	}
	return ""
}

func (x *DisableDates) GetDaySlug() string {
	if x != nil {
		return x.DaySlug
	}
	return ""
}

type HtmlBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Html string           `protobuf:"bytes,1,opt,name=html,proto3" json:"html,omitempty"`
	Data *structpb.Struct `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *HtmlBody) Reset() {
	*x = HtmlBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_view_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HtmlBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HtmlBody) ProtoMessage() {}

func (x *HtmlBody) ProtoReflect() protoreflect.Message {
	mi := &file_view_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HtmlBody.ProtoReflect.Descriptor instead.
func (*HtmlBody) Descriptor() ([]byte, []int) {
	return file_view_proto_rawDescGZIP(), []int{7}
}

func (x *HtmlBody) GetHtml() string {
	if x != nil {
		return x.Html
	}
	return ""
}

func (x *HtmlBody) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

type PdfBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Link string `protobuf:"bytes,1,opt,name=link,proto3" json:"link,omitempty"`
}

func (x *PdfBody) Reset() {
	*x = PdfBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_view_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdfBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdfBody) ProtoMessage() {}

func (x *PdfBody) ProtoReflect() protoreflect.Message {
	mi := &file_view_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdfBody.ProtoReflect.Descriptor instead.
func (*PdfBody) Descriptor() ([]byte, []int) {
	return file_view_proto_rawDescGZIP(), []int{8}
}

func (x *PdfBody) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

var File_view_proto protoreflect.FileDescriptor

var file_view_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xa1, 0x06, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73,
	0x6c, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x6c, 0x75, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x69, 0x6e,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61,
	0x69, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x0d, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x65, 0x73, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x69, 0x65,
	0x77, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x48, 0x0a, 0x0d, 0x71, 0x75, 0x69, 0x63, 0x6b,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x0c, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72,
	0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x6c,
	0x75, 0x67, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x5f, 0x74,
	0x6f, 0x5f, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x61,
	0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x54, 0x6f, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x23, 0x0a, 0x0d,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x65, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x73, 0x6c, 0x75, 0x67, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x65, 0x64, 0x69,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x45,
	0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x65, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x14,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x22, 0x4d, 0x0a, 0x0b, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xa4, 0x06, 0x0a, 0x04, 0x56, 0x69, 0x65, 0x77, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x69, 0x6e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x49, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x65, 0x73, 0x52, 0x0c,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x48, 0x0a, 0x0d, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x0c, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x69, 0x65,
	0x77, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x61,
	0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x6c, 0x75, 0x67,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72,
	0x46, 0x72, 0x6f, 0x6d, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x61, 0x6c, 0x65,
	0x6e, 0x64, 0x61, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x54, 0x6f, 0x53, 0x6c,
	0x75, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x73, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x69, 0x73, 0x45, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2e, 0x0a,
	0x13, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x73, 0x6c, 0x75, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x32,
	0x0a, 0x15, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x5f, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x32, 0x0a, 0x05, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x05, 0x76,
	0x69, 0x65, 0x77, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x33, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x6c, 0x75, 0x67, 0x22,
	0x20, 0x0a, 0x0e, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65,
	0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x90, 0x01, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x6c, 0x75, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x6c, 0x75,
	0x67, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73,
	0x6c, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x46,
	0x72, 0x6f, 0x6d, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x74, 0x6f, 0x5f, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74,
	0x69, 0x6d, 0x65, 0x54, 0x6f, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x61, 0x79,
	0x5f, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61, 0x79,
	0x53, 0x6c, 0x75, 0x67, 0x22, 0x4b, 0x0a, 0x08, 0x48, 0x74, 0x6d, 0x6c, 0x42, 0x6f, 0x64, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x74, 0x6d, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x68, 0x74, 0x6d, 0x6c, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x1d, 0x0a, 0x07, 0x50, 0x64, 0x66, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b,
	0x32, 0xe3, 0x04, 0x0a, 0x0b, 0x56, 0x69, 0x65, 0x77, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x53, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x29, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56,
	0x69, 0x65, 0x77, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x2a, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x56, 0x69, 0x65, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x56, 0x69, 0x65, 0x77,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x09, 0x47,
	0x65, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x26, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79,
	0x1a, 0x1c, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x22, 0x00,
	0x12, 0x40, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x4a, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x26, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x4b, 0x65, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x57,
	0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x48, 0x74, 0x6d, 0x6c, 0x54, 0x6f, 0x50,
	0x64, 0x66, 0x12, 0x20, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x74, 0x6d, 0x6c,
	0x42, 0x6f, 0x64, 0x79, 0x1a, 0x1f, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x64,
	0x66, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x48, 0x74, 0x6d, 0x6c,
	0x12, 0x20, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x74, 0x6d, 0x6c, 0x42, 0x6f,
	0x64, 0x79, 0x1a, 0x20, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x74, 0x6d, 0x6c,
	0x42, 0x6f, 0x64, 0x79, 0x22, 0x00, 0x42, 0x21, 0x5a, 0x1f, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_view_proto_rawDescOnce sync.Once
	file_view_proto_rawDescData = file_view_proto_rawDesc
)

func file_view_proto_rawDescGZIP() []byte {
	file_view_proto_rawDescOnce.Do(func() {
		file_view_proto_rawDescData = protoimpl.X.CompressGZIP(file_view_proto_rawDescData)
	})
	return file_view_proto_rawDescData
}

var file_view_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_view_proto_goTypes = []interface{}{
	(*CreateViewRequest)(nil),   // 0: object_builder_service.CreateViewRequest
	(*QuickFilter)(nil),         // 1: object_builder_service.QuickFilter
	(*View)(nil),                // 2: object_builder_service.View
	(*GetAllViewsResponse)(nil), // 3: object_builder_service.GetAllViewsResponse
	(*GetAllViewsRequest)(nil),  // 4: object_builder_service.GetAllViewsRequest
	(*ViewPrimaryKey)(nil),      // 5: object_builder_service.ViewPrimaryKey
	(*DisableDates)(nil),        // 6: object_builder_service.DisableDates
	(*HtmlBody)(nil),            // 7: object_builder_service.HtmlBody
	(*PdfBody)(nil),             // 8: object_builder_service.PdfBody
	(*structpb.Struct)(nil),     // 9: google.protobuf.Struct
	(*emptypb.Empty)(nil),       // 10: google.protobuf.Empty
}
var file_view_proto_depIdxs = []int32{
	6,  // 0: object_builder_service.CreateViewRequest.disable_dates:type_name -> object_builder_service.DisableDates
	1,  // 1: object_builder_service.CreateViewRequest.quick_filters:type_name -> object_builder_service.QuickFilter
	6,  // 2: object_builder_service.View.disable_dates:type_name -> object_builder_service.DisableDates
	1,  // 3: object_builder_service.View.quick_filters:type_name -> object_builder_service.QuickFilter
	2,  // 4: object_builder_service.GetAllViewsResponse.views:type_name -> object_builder_service.View
	9,  // 5: object_builder_service.HtmlBody.data:type_name -> google.protobuf.Struct
	0,  // 6: object_builder_service.ViewService.Create:input_type -> object_builder_service.CreateViewRequest
	4,  // 7: object_builder_service.ViewService.GetList:input_type -> object_builder_service.GetAllViewsRequest
	5,  // 8: object_builder_service.ViewService.GetSingle:input_type -> object_builder_service.ViewPrimaryKey
	2,  // 9: object_builder_service.ViewService.Update:input_type -> object_builder_service.View
	5,  // 10: object_builder_service.ViewService.Delete:input_type -> object_builder_service.ViewPrimaryKey
	7,  // 11: object_builder_service.ViewService.ConvertHtmlToPdf:input_type -> object_builder_service.HtmlBody
	7,  // 12: object_builder_service.ViewService.ConvertTemplateToHtml:input_type -> object_builder_service.HtmlBody
	2,  // 13: object_builder_service.ViewService.Create:output_type -> object_builder_service.View
	3,  // 14: object_builder_service.ViewService.GetList:output_type -> object_builder_service.GetAllViewsResponse
	2,  // 15: object_builder_service.ViewService.GetSingle:output_type -> object_builder_service.View
	10, // 16: object_builder_service.ViewService.Update:output_type -> google.protobuf.Empty
	10, // 17: object_builder_service.ViewService.Delete:output_type -> google.protobuf.Empty
	8,  // 18: object_builder_service.ViewService.ConvertHtmlToPdf:output_type -> object_builder_service.PdfBody
	7,  // 19: object_builder_service.ViewService.ConvertTemplateToHtml:output_type -> object_builder_service.HtmlBody
	13, // [13:20] is the sub-list for method output_type
	6,  // [6:13] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_view_proto_init() }
func file_view_proto_init() {
	if File_view_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_view_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateViewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_view_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuickFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_view_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*View); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_view_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllViewsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_view_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllViewsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_view_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ViewPrimaryKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_view_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableDates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_view_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HtmlBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_view_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdfBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_view_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_view_proto_goTypes,
		DependencyIndexes: file_view_proto_depIdxs,
		MessageInfos:      file_view_proto_msgTypes,
	}.Build()
	File_view_proto = out.File
	file_view_proto_rawDesc = nil
	file_view_proto_goTypes = nil
	file_view_proto_depIdxs = nil
}
