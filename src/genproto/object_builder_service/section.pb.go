// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: section.proto

package object_builder_service

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Section struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Order  int32              `protobuf:"varint,2,opt,name=order,proto3" json:"order,omitempty"`
	Column string             `protobuf:"bytes,3,opt,name=column,proto3" json:"column,omitempty"`
	Label  string             `protobuf:"bytes,4,opt,name=label,proto3" json:"label,omitempty"`
	Fields []*FieldForSection `protobuf:"bytes,5,rep,name=fields,proto3" json:"fields,omitempty"`
	Icon   string             `protobuf:"bytes,6,opt,name=icon,proto3" json:"icon,omitempty"`
}

func (x *Section) Reset() {
	*x = Section{}
	if protoimpl.UnsafeEnabled {
		mi := &file_section_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Section) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Section) ProtoMessage() {}

func (x *Section) ProtoReflect() protoreflect.Message {
	mi := &file_section_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Section.ProtoReflect.Descriptor instead.
func (*Section) Descriptor() ([]byte, []int) {
	return file_section_proto_rawDescGZIP(), []int{0}
}

func (x *Section) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Section) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *Section) GetColumn() string {
	if x != nil {
		return x.Column
	}
	return ""
}

func (x *Section) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *Section) GetFields() []*FieldForSection {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *Section) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

type ViewRelationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Order            int32  `protobuf:"varint,1,opt,name=order,proto3" json:"order,omitempty"`
	RelationId       string `protobuf:"bytes,2,opt,name=relation_id,json=relationId,proto3" json:"relation_id,omitempty"`
	ViewRelationType string `protobuf:"bytes,3,opt,name=view_relation_type,json=viewRelationType,proto3" json:"view_relation_type,omitempty"`
}

func (x *ViewRelationReq) Reset() {
	*x = ViewRelationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_section_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ViewRelationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewRelationReq) ProtoMessage() {}

func (x *ViewRelationReq) ProtoReflect() protoreflect.Message {
	mi := &file_section_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewRelationReq.ProtoReflect.Descriptor instead.
func (*ViewRelationReq) Descriptor() ([]byte, []int) {
	return file_section_proto_rawDescGZIP(), []int{1}
}

func (x *ViewRelationReq) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *ViewRelationReq) GetRelationId() string {
	if x != nil {
		return x.RelationId
	}
	return ""
}

func (x *ViewRelationReq) GetViewRelationType() string {
	if x != nil {
		return x.ViewRelationType
	}
	return ""
}

type RelationForTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TableFrom  string              `protobuf:"bytes,2,opt,name=table_from,json=tableFrom,proto3" json:"table_from,omitempty"`
	TableTo    string              `protobuf:"bytes,3,opt,name=table_to,json=tableTo,proto3" json:"table_to,omitempty"`
	Type       string              `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	ViewFields []string            `protobuf:"bytes,5,rep,name=view_fields,json=viewFields,proto3" json:"view_fields,omitempty"`
	Editable   bool                `protobuf:"varint,6,opt,name=editable,proto3" json:"editable,omitempty"`
	Summaries  []*SummaryInSection `protobuf:"bytes,7,rep,name=summaries,proto3" json:"summaries,omitempty"`
}

func (x *RelationForTable) Reset() {
	*x = RelationForTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_section_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelationForTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationForTable) ProtoMessage() {}

func (x *RelationForTable) ProtoReflect() protoreflect.Message {
	mi := &file_section_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelationForTable.ProtoReflect.Descriptor instead.
func (*RelationForTable) Descriptor() ([]byte, []int) {
	return file_section_proto_rawDescGZIP(), []int{2}
}

func (x *RelationForTable) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RelationForTable) GetTableFrom() string {
	if x != nil {
		return x.TableFrom
	}
	return ""
}

func (x *RelationForTable) GetTableTo() string {
	if x != nil {
		return x.TableTo
	}
	return ""
}

func (x *RelationForTable) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RelationForTable) GetViewFields() []string {
	if x != nil {
		return x.ViewFields
	}
	return nil
}

func (x *RelationForTable) GetEditable() bool {
	if x != nil {
		return x.Editable
	}
	return false
}

func (x *RelationForTable) GetSummaries() []*SummaryInSection {
	if x != nil {
		return x.Summaries
	}
	return nil
}

type SummaryInSection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldName   string `protobuf:"bytes,1,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	FormulaName string `protobuf:"bytes,2,opt,name=formula_name,json=formulaName,proto3" json:"formula_name,omitempty"`
}

func (x *SummaryInSection) Reset() {
	*x = SummaryInSection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_section_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummaryInSection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummaryInSection) ProtoMessage() {}

func (x *SummaryInSection) ProtoReflect() protoreflect.Message {
	mi := &file_section_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummaryInSection.ProtoReflect.Descriptor instead.
func (*SummaryInSection) Descriptor() ([]byte, []int) {
	return file_section_proto_rawDescGZIP(), []int{3}
}

func (x *SummaryInSection) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *SummaryInSection) GetFormulaName() string {
	if x != nil {
		return x.FormulaName
	}
	return ""
}

type ViewRelation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Order      int32             `protobuf:"varint,2,opt,name=order,proto3" json:"order,omitempty"`
	Label      string            `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`
	Relation   *RelationForTable `protobuf:"bytes,4,opt,name=relation,proto3" json:"relation,omitempty"`
	Icon       string            `protobuf:"bytes,5,opt,name=icon,proto3" json:"icon,omitempty"`
	IsEditable bool              `protobuf:"varint,6,opt,name=is_editable,json=isEditable,proto3" json:"is_editable,omitempty"`
}

func (x *ViewRelation) Reset() {
	*x = ViewRelation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_section_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ViewRelation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewRelation) ProtoMessage() {}

func (x *ViewRelation) ProtoReflect() protoreflect.Message {
	mi := &file_section_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewRelation.ProtoReflect.Descriptor instead.
func (*ViewRelation) Descriptor() ([]byte, []int) {
	return file_section_proto_rawDescGZIP(), []int{4}
}

func (x *ViewRelation) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ViewRelation) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *ViewRelation) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *ViewRelation) GetRelation() *RelationForTable {
	if x != nil {
		return x.Relation
	}
	return nil
}

func (x *ViewRelation) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *ViewRelation) GetIsEditable() bool {
	if x != nil {
		return x.IsEditable
	}
	return false
}

type RelationForSection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TableFrom         *TableForSection         `protobuf:"bytes,2,opt,name=table_from,json=tableFrom,proto3" json:"table_from,omitempty"`
	TableTo           *TableForSection         `protobuf:"bytes,3,opt,name=table_to,json=tableTo,proto3" json:"table_to,omitempty"`
	Type              string                   `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	ViewFields        []*Field                 `protobuf:"bytes,5,rep,name=view_fields,json=viewFields,proto3" json:"view_fields,omitempty"`
	Summaries         []*SummaryInSection      `protobuf:"bytes,6,rep,name=summaries,proto3" json:"summaries,omitempty"`
	Editable          bool                     `protobuf:"varint,7,opt,name=editable,proto3" json:"editable,omitempty"`
	IsEditable        bool                     `protobuf:"varint,8,opt,name=is_editable,json=isEditable,proto3" json:"is_editable,omitempty"`
	Title             string                   `protobuf:"bytes,9,opt,name=title,proto3" json:"title,omitempty"`
	Columns           []string                 `protobuf:"bytes,10,rep,name=columns,proto3" json:"columns,omitempty"`
	QuickFilters      []*QuickFilterForSection `protobuf:"bytes,11,rep,name=quick_filters,json=quickFilters,proto3" json:"quick_filters,omitempty"`
	GroupFields       []string                 `protobuf:"bytes,12,rep,name=group_fields,json=groupFields,proto3" json:"group_fields,omitempty"`
	RelationTableSlug string                   `protobuf:"bytes,13,opt,name=relation_table_slug,json=relationTableSlug,proto3" json:"relation_table_slug,omitempty"`
	ViewType          string                   `protobuf:"bytes,14,opt,name=view_type,json=viewType,proto3" json:"view_type,omitempty"`
	RelationFieldSlug string                   `protobuf:"bytes,15,opt,name=relation_field_slug,json=relationFieldSlug,proto3" json:"relation_field_slug,omitempty"`
}

func (x *RelationForSection) Reset() {
	*x = RelationForSection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_section_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelationForSection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationForSection) ProtoMessage() {}

func (x *RelationForSection) ProtoReflect() protoreflect.Message {
	mi := &file_section_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelationForSection.ProtoReflect.Descriptor instead.
func (*RelationForSection) Descriptor() ([]byte, []int) {
	return file_section_proto_rawDescGZIP(), []int{5}
}

func (x *RelationForSection) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RelationForSection) GetTableFrom() *TableForSection {
	if x != nil {
		return x.TableFrom
	}
	return nil
}

func (x *RelationForSection) GetTableTo() *TableForSection {
	if x != nil {
		return x.TableTo
	}
	return nil
}

func (x *RelationForSection) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RelationForSection) GetViewFields() []*Field {
	if x != nil {
		return x.ViewFields
	}
	return nil
}

func (x *RelationForSection) GetSummaries() []*SummaryInSection {
	if x != nil {
		return x.Summaries
	}
	return nil
}

func (x *RelationForSection) GetEditable() bool {
	if x != nil {
		return x.Editable
	}
	return false
}

func (x *RelationForSection) GetIsEditable() bool {
	if x != nil {
		return x.IsEditable
	}
	return false
}

func (x *RelationForSection) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *RelationForSection) GetColumns() []string {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *RelationForSection) GetQuickFilters() []*QuickFilterForSection {
	if x != nil {
		return x.QuickFilters
	}
	return nil
}

func (x *RelationForSection) GetGroupFields() []string {
	if x != nil {
		return x.GroupFields
	}
	return nil
}

func (x *RelationForSection) GetRelationTableSlug() string {
	if x != nil {
		return x.RelationTableSlug
	}
	return ""
}

func (x *RelationForSection) GetViewType() string {
	if x != nil {
		return x.ViewType
	}
	return ""
}

func (x *RelationForSection) GetRelationFieldSlug() string {
	if x != nil {
		return x.RelationFieldSlug
	}
	return ""
}

type IncrementIDForSection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WithIncrementId bool  `protobuf:"varint,1,opt,name=with_increment_id,json=withIncrementId,proto3" json:"with_increment_id,omitempty"`
	DigitNumber     int32 `protobuf:"varint,2,opt,name=digit_number,json=digitNumber,proto3" json:"digit_number,omitempty"`
}

func (x *IncrementIDForSection) Reset() {
	*x = IncrementIDForSection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_section_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncrementIDForSection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncrementIDForSection) ProtoMessage() {}

func (x *IncrementIDForSection) ProtoReflect() protoreflect.Message {
	mi := &file_section_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncrementIDForSection.ProtoReflect.Descriptor instead.
func (*IncrementIDForSection) Descriptor() ([]byte, []int) {
	return file_section_proto_rawDescGZIP(), []int{6}
}

func (x *IncrementIDForSection) GetWithIncrementId() bool {
	if x != nil {
		return x.WithIncrementId
	}
	return false
}

func (x *IncrementIDForSection) GetDigitNumber() int32 {
	if x != nil {
		return x.DigitNumber
	}
	return 0
}

type QuickFilterForSection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldId      string `protobuf:"bytes,1,opt,name=field_id,json=fieldId,proto3" json:"field_id,omitempty"`
	DefaultValue string `protobuf:"bytes,2,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
}

func (x *QuickFilterForSection) Reset() {
	*x = QuickFilterForSection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_section_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuickFilterForSection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuickFilterForSection) ProtoMessage() {}

func (x *QuickFilterForSection) ProtoReflect() protoreflect.Message {
	mi := &file_section_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuickFilterForSection.ProtoReflect.Descriptor instead.
func (*QuickFilterForSection) Descriptor() ([]byte, []int) {
	return file_section_proto_rawDescGZIP(), []int{7}
}

func (x *QuickFilterForSection) GetFieldId() string {
	if x != nil {
		return x.FieldId
	}
	return ""
}

func (x *QuickFilterForSection) GetDefaultValue() string {
	if x != nil {
		return x.DefaultValue
	}
	return ""
}

type TableForSection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Label             string                 `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	Description       string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Slug              string                 `protobuf:"bytes,4,opt,name=slug,proto3" json:"slug,omitempty"`
	ShowInMenu        bool                   `protobuf:"varint,5,opt,name=show_in_menu,json=showInMenu,proto3" json:"show_in_menu,omitempty"`
	Icon              string                 `protobuf:"bytes,6,opt,name=icon,proto3" json:"icon,omitempty"`
	SubtitleFieldSlug string                 `protobuf:"bytes,7,opt,name=subtitle_field_slug,json=subtitleFieldSlug,proto3" json:"subtitle_field_slug,omitempty"`
	IsEditable        bool                   `protobuf:"varint,8,opt,name=is_editable,json=isEditable,proto3" json:"is_editable,omitempty"`
	IsOwnTable        bool                   `protobuf:"varint,9,opt,name=is_own_table,json=isOwnTable,proto3" json:"is_own_table,omitempty"`
	IncrementId       *IncrementIDForSection `protobuf:"bytes,10,opt,name=increment_id,json=incrementId,proto3" json:"increment_id,omitempty"`
}

func (x *TableForSection) Reset() {
	*x = TableForSection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_section_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableForSection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableForSection) ProtoMessage() {}

func (x *TableForSection) ProtoReflect() protoreflect.Message {
	mi := &file_section_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableForSection.ProtoReflect.Descriptor instead.
func (*TableForSection) Descriptor() ([]byte, []int) {
	return file_section_proto_rawDescGZIP(), []int{8}
}

func (x *TableForSection) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TableForSection) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *TableForSection) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TableForSection) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *TableForSection) GetShowInMenu() bool {
	if x != nil {
		return x.ShowInMenu
	}
	return false
}

func (x *TableForSection) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *TableForSection) GetSubtitleFieldSlug() string {
	if x != nil {
		return x.SubtitleFieldSlug
	}
	return ""
}

func (x *TableForSection) GetIsEditable() bool {
	if x != nil {
		return x.IsEditable
	}
	return false
}

func (x *TableForSection) GetIsOwnTable() bool {
	if x != nil {
		return x.IsOwnTable
	}
	return false
}

func (x *TableForSection) GetIncrementId() *IncrementIDForSection {
	if x != nil {
		return x.IncrementId
	}
	return nil
}

type NewViewRelation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Order            int32               `protobuf:"varint,1,opt,name=order,proto3" json:"order,omitempty"`
	Relation         *RelationForSection `protobuf:"bytes,2,opt,name=relation,proto3" json:"relation,omitempty"`
	ViewRelationType string              `protobuf:"bytes,3,opt,name=view_relation_type,json=viewRelationType,proto3" json:"view_relation_type,omitempty"`
}

func (x *NewViewRelation) Reset() {
	*x = NewViewRelation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_section_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewViewRelation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewViewRelation) ProtoMessage() {}

func (x *NewViewRelation) ProtoReflect() protoreflect.Message {
	mi := &file_section_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewViewRelation.ProtoReflect.Descriptor instead.
func (*NewViewRelation) Descriptor() ([]byte, []int) {
	return file_section_proto_rawDescGZIP(), []int{9}
}

func (x *NewViewRelation) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *NewViewRelation) GetRelation() *RelationForSection {
	if x != nil {
		return x.Relation
	}
	return nil
}

func (x *NewViewRelation) GetViewRelationType() string {
	if x != nil {
		return x.ViewRelationType
	}
	return ""
}

type GetViewRelationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TableSlug string             `protobuf:"bytes,2,opt,name=table_slug,json=tableSlug,proto3" json:"table_slug,omitempty"`
	Relations []*NewViewRelation `protobuf:"bytes,3,rep,name=relations,proto3" json:"relations,omitempty"`
}

func (x *GetViewRelationResponse) Reset() {
	*x = GetViewRelationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_section_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetViewRelationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetViewRelationResponse) ProtoMessage() {}

func (x *GetViewRelationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_section_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetViewRelationResponse.ProtoReflect.Descriptor instead.
func (*GetViewRelationResponse) Descriptor() ([]byte, []int) {
	return file_section_proto_rawDescGZIP(), []int{10}
}

func (x *GetViewRelationResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetViewRelationResponse) GetTableSlug() string {
	if x != nil {
		return x.TableSlug
	}
	return ""
}

func (x *GetViewRelationResponse) GetRelations() []*NewViewRelation {
	if x != nil {
		return x.Relations
	}
	return nil
}

type GetAllViewRelationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count         int32           `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	ViewRelations []*ViewRelation `protobuf:"bytes,2,rep,name=view_relations,json=viewRelations,proto3" json:"view_relations,omitempty"`
}

func (x *GetAllViewRelationsResponse) Reset() {
	*x = GetAllViewRelationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_section_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllViewRelationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllViewRelationsResponse) ProtoMessage() {}

func (x *GetAllViewRelationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_section_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllViewRelationsResponse.ProtoReflect.Descriptor instead.
func (*GetAllViewRelationsResponse) Descriptor() ([]byte, []int) {
	return file_section_proto_rawDescGZIP(), []int{11}
}

func (x *GetAllViewRelationsResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *GetAllViewRelationsResponse) GetViewRelations() []*ViewRelation {
	if x != nil {
		return x.ViewRelations
	}
	return nil
}

type UpsertViewRelationsBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableSlug     string             `protobuf:"bytes,1,opt,name=table_slug,json=tableSlug,proto3" json:"table_slug,omitempty"`
	ViewRelations []*ViewRelationReq `protobuf:"bytes,2,rep,name=view_relations,json=viewRelations,proto3" json:"view_relations,omitempty"`
}

func (x *UpsertViewRelationsBody) Reset() {
	*x = UpsertViewRelationsBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_section_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertViewRelationsBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertViewRelationsBody) ProtoMessage() {}

func (x *UpsertViewRelationsBody) ProtoReflect() protoreflect.Message {
	mi := &file_section_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertViewRelationsBody.ProtoReflect.Descriptor instead.
func (*UpsertViewRelationsBody) Descriptor() ([]byte, []int) {
	return file_section_proto_rawDescGZIP(), []int{12}
}

func (x *UpsertViewRelationsBody) GetTableSlug() string {
	if x != nil {
		return x.TableSlug
	}
	return ""
}

func (x *UpsertViewRelationsBody) GetViewRelations() []*ViewRelationReq {
	if x != nil {
		return x.ViewRelations
	}
	return nil
}

type SectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Order  int32            `protobuf:"varint,2,opt,name=order,proto3" json:"order,omitempty"`
	Column string           `protobuf:"bytes,3,opt,name=column,proto3" json:"column,omitempty"`
	Label  string           `protobuf:"bytes,4,opt,name=label,proto3" json:"label,omitempty"`
	Fields []*FieldResponse `protobuf:"bytes,5,rep,name=fields,proto3" json:"fields,omitempty"`
	Icon   string           `protobuf:"bytes,6,opt,name=icon,proto3" json:"icon,omitempty"`
}

func (x *SectionResponse) Reset() {
	*x = SectionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_section_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SectionResponse) ProtoMessage() {}

func (x *SectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_section_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SectionResponse.ProtoReflect.Descriptor instead.
func (*SectionResponse) Descriptor() ([]byte, []int) {
	return file_section_proto_rawDescGZIP(), []int{13}
}

func (x *SectionResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SectionResponse) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *SectionResponse) GetColumn() string {
	if x != nil {
		return x.Column
	}
	return ""
}

func (x *SectionResponse) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *SectionResponse) GetFields() []*FieldResponse {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *SectionResponse) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

type FieldResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Default      string           `protobuf:"bytes,2,opt,name=default,proto3" json:"default,omitempty"`
	Type         string           `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Index        string           `protobuf:"bytes,4,opt,name=index,proto3" json:"index,omitempty"`
	Label        string           `protobuf:"bytes,5,opt,name=label,proto3" json:"label,omitempty"`
	Slug         string           `protobuf:"bytes,6,opt,name=slug,proto3" json:"slug,omitempty"`
	TableId      string           `protobuf:"bytes,7,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	Required     bool             `protobuf:"varint,8,opt,name=required,proto3" json:"required,omitempty"`
	Column       int32            `protobuf:"varint,9,opt,name=column,proto3" json:"column,omitempty"`
	Order        int32            `protobuf:"varint,10,opt,name=order,proto3" json:"order,omitempty"`
	Attributes   *structpb.Struct `protobuf:"bytes,11,opt,name=attributes,proto3" json:"attributes,omitempty"`
	RelationType string           `protobuf:"bytes,12,opt,name=relation_type,json=relationType,proto3" json:"relation_type,omitempty"`
}

func (x *FieldResponse) Reset() {
	*x = FieldResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_section_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldResponse) ProtoMessage() {}

func (x *FieldResponse) ProtoReflect() protoreflect.Message {
	mi := &file_section_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldResponse.ProtoReflect.Descriptor instead.
func (*FieldResponse) Descriptor() ([]byte, []int) {
	return file_section_proto_rawDescGZIP(), []int{14}
}

func (x *FieldResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FieldResponse) GetDefault() string {
	if x != nil {
		return x.Default
	}
	return ""
}

func (x *FieldResponse) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *FieldResponse) GetIndex() string {
	if x != nil {
		return x.Index
	}
	return ""
}

func (x *FieldResponse) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *FieldResponse) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *FieldResponse) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

func (x *FieldResponse) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *FieldResponse) GetColumn() int32 {
	if x != nil {
		return x.Column
	}
	return 0
}

func (x *FieldResponse) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *FieldResponse) GetAttributes() *structpb.Struct {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *FieldResponse) GetRelationType() string {
	if x != nil {
		return x.RelationType
	}
	return ""
}

type FieldForSection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Column       int32  `protobuf:"varint,2,opt,name=column,proto3" json:"column,omitempty"`
	Order        int32  `protobuf:"varint,3,opt,name=order,proto3" json:"order,omitempty"`
	FieldName    string `protobuf:"bytes,4,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	RelationType string `protobuf:"bytes,5,opt,name=relation_type,json=relationType,proto3" json:"relation_type,omitempty"`
}

func (x *FieldForSection) Reset() {
	*x = FieldForSection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_section_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldForSection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldForSection) ProtoMessage() {}

func (x *FieldForSection) ProtoReflect() protoreflect.Message {
	mi := &file_section_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldForSection.ProtoReflect.Descriptor instead.
func (*FieldForSection) Descriptor() ([]byte, []int) {
	return file_section_proto_rawDescGZIP(), []int{15}
}

func (x *FieldForSection) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FieldForSection) GetColumn() int32 {
	if x != nil {
		return x.Column
	}
	return 0
}

func (x *FieldForSection) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *FieldForSection) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *FieldForSection) GetRelationType() string {
	if x != nil {
		return x.RelationType
	}
	return ""
}

type UpdateSectionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sections []*Section `protobuf:"bytes,1,rep,name=sections,proto3" json:"sections,omitempty"`
	TableId  string     `protobuf:"bytes,2,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
}

func (x *UpdateSectionsRequest) Reset() {
	*x = UpdateSectionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_section_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSectionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSectionsRequest) ProtoMessage() {}

func (x *UpdateSectionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_section_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSectionsRequest.ProtoReflect.Descriptor instead.
func (*UpdateSectionsRequest) Descriptor() ([]byte, []int) {
	return file_section_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateSectionsRequest) GetSections() []*Section {
	if x != nil {
		return x.Sections
	}
	return nil
}

func (x *UpdateSectionsRequest) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

type GetAllSectionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sections []*SectionResponse `protobuf:"bytes,1,rep,name=sections,proto3" json:"sections,omitempty"`
}

func (x *GetAllSectionsResponse) Reset() {
	*x = GetAllSectionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_section_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllSectionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllSectionsResponse) ProtoMessage() {}

func (x *GetAllSectionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_section_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllSectionsResponse.ProtoReflect.Descriptor instead.
func (*GetAllSectionsResponse) Descriptor() ([]byte, []int) {
	return file_section_proto_rawDescGZIP(), []int{17}
}

func (x *GetAllSectionsResponse) GetSections() []*SectionResponse {
	if x != nil {
		return x.Sections
	}
	return nil
}

type GetAllSectionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId   string `protobuf:"bytes,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	TableSlug string `protobuf:"bytes,2,opt,name=table_slug,json=tableSlug,proto3" json:"table_slug,omitempty"`
	RoleId    string `protobuf:"bytes,3,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
}

func (x *GetAllSectionsRequest) Reset() {
	*x = GetAllSectionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_section_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllSectionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllSectionsRequest) ProtoMessage() {}

func (x *GetAllSectionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_section_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllSectionsRequest.ProtoReflect.Descriptor instead.
func (*GetAllSectionsRequest) Descriptor() ([]byte, []int) {
	return file_section_proto_rawDescGZIP(), []int{18}
}

func (x *GetAllSectionsRequest) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

func (x *GetAllSectionsRequest) GetTableSlug() string {
	if x != nil {
		return x.TableSlug
	}
	return ""
}

func (x *GetAllSectionsRequest) GetRoleId() string {
	if x != nil {
		return x.RoleId
	}
	return ""
}

var File_section_proto protoreflect.FileDescriptor

var file_section_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x16, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xb2, 0x01, 0x0a, 0x07, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x3f, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x6f,
	0x72, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x69, 0x63, 0x6f, 0x6e, 0x22, 0x76, 0x0a, 0x0f, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2c,
	0x0a, 0x12, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x76, 0x69, 0x65, 0x77,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0xf5, 0x01, 0x0a,
	0x10, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x72, 0x6f, 0x6d,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x65, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x65, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x46, 0x0a, 0x09,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x49, 0x6e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x69, 0x65, 0x73, 0x22, 0x54, 0x0a, 0x10, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x49,
	0x6e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x6d, 0x75,
	0x6c, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66,
	0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xc5, 0x01, 0x0a, 0x0c, 0x56,
	0x69, 0x65, 0x77, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x44, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x45, 0x64, 0x69, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x22, 0xad, 0x05, 0x0a, 0x12, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x6f, 0x72, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x46, 0x0a, 0x0a, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x53,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x72, 0x6f,
	0x6d, 0x12, 0x42, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x46, 0x6f, 0x72, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x54, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x76, 0x69, 0x65,
	0x77, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0a, 0x76,
	0x69, 0x65, 0x77, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x46, 0x0a, 0x09, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x53,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x65, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x73, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x45, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x52,
	0x0a, 0x0d, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x51,
	0x75, 0x69, 0x63, 0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x53, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x69, 0x65, 0x77, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x6c,
	0x75, 0x67, 0x22, 0x66, 0x0a, 0x15, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x46, 0x6f, 0x72, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x77,
	0x69, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x49, 0x6e, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x64,
	0x69, 0x67, 0x69, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x57, 0x0a, 0x15, 0x51, 0x75,
	0x69, 0x63, 0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x53, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xe8, 0x02, 0x0a, 0x0f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72,
	0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73,
	0x6c, 0x75, 0x67, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x5f, 0x6d,
	0x65, 0x6e, 0x75, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x49,
	0x6e, 0x4d, 0x65, 0x6e, 0x75, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x75, 0x62,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x73, 0x6c, 0x75, 0x67,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f,
	0x65, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x69, 0x73, 0x45, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73,
	0x5f, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x69, 0x73, 0x4f, 0x77, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x50, 0x0a, 0x0c,
	0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x46, 0x6f, 0x72, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x9d,
	0x01, 0x0a, 0x0f, 0x4e, 0x65, 0x77, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x53,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2c, 0x0a, 0x12, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x76, 0x69,
	0x65, 0x77, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x8f,
	0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x45, 0x0a, 0x09, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4e, 0x65, 0x77, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x80, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x0e, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x88, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x56, 0x69,
	0x65, 0x77, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x6f, 0x64, 0x79, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x4e,
	0x0a, 0x0e, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x52,
	0x0d, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xb8,
	0x01, 0x0a, 0x0f, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x3d, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0xd0, 0x02, 0x0a, 0x0d, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x37,
	0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0a, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x93, 0x01, 0x0a,
	0x0f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x6f, 0x72, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1d,
	0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x6f, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x08, 0x73,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08,
	0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x64, 0x22, 0x5d, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a,
	0x08, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x6a, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x73, 0x6c, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x32, 0xa2,
	0x04, 0x0a, 0x0e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x69, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x2d, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x06,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x7b, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2d, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2d, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x69, 0x65, 0x77, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x60, 0x0a, 0x13, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x56, 0x69, 0x65, 0x77, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2f, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x6f, 0x64, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x42, 0x21, 0x5a, 0x1f, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_section_proto_rawDescOnce sync.Once
	file_section_proto_rawDescData = file_section_proto_rawDesc
)

func file_section_proto_rawDescGZIP() []byte {
	file_section_proto_rawDescOnce.Do(func() {
		file_section_proto_rawDescData = protoimpl.X.CompressGZIP(file_section_proto_rawDescData)
	})
	return file_section_proto_rawDescData
}

var file_section_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_section_proto_goTypes = []interface{}{
	(*Section)(nil),                     // 0: object_builder_service.Section
	(*ViewRelationReq)(nil),             // 1: object_builder_service.ViewRelationReq
	(*RelationForTable)(nil),            // 2: object_builder_service.RelationForTable
	(*SummaryInSection)(nil),            // 3: object_builder_service.SummaryInSection
	(*ViewRelation)(nil),                // 4: object_builder_service.ViewRelation
	(*RelationForSection)(nil),          // 5: object_builder_service.RelationForSection
	(*IncrementIDForSection)(nil),       // 6: object_builder_service.IncrementIDForSection
	(*QuickFilterForSection)(nil),       // 7: object_builder_service.QuickFilterForSection
	(*TableForSection)(nil),             // 8: object_builder_service.TableForSection
	(*NewViewRelation)(nil),             // 9: object_builder_service.NewViewRelation
	(*GetViewRelationResponse)(nil),     // 10: object_builder_service.GetViewRelationResponse
	(*GetAllViewRelationsResponse)(nil), // 11: object_builder_service.GetAllViewRelationsResponse
	(*UpsertViewRelationsBody)(nil),     // 12: object_builder_service.UpsertViewRelationsBody
	(*SectionResponse)(nil),             // 13: object_builder_service.SectionResponse
	(*FieldResponse)(nil),               // 14: object_builder_service.FieldResponse
	(*FieldForSection)(nil),             // 15: object_builder_service.FieldForSection
	(*UpdateSectionsRequest)(nil),       // 16: object_builder_service.UpdateSectionsRequest
	(*GetAllSectionsResponse)(nil),      // 17: object_builder_service.GetAllSectionsResponse
	(*GetAllSectionsRequest)(nil),       // 18: object_builder_service.GetAllSectionsRequest
	(*Field)(nil),                       // 19: object_builder_service.Field
	(*structpb.Struct)(nil),             // 20: google.protobuf.Struct
	(*emptypb.Empty)(nil),               // 21: google.protobuf.Empty
}
var file_section_proto_depIdxs = []int32{
	15, // 0: object_builder_service.Section.fields:type_name -> object_builder_service.FieldForSection
	3,  // 1: object_builder_service.RelationForTable.summaries:type_name -> object_builder_service.SummaryInSection
	2,  // 2: object_builder_service.ViewRelation.relation:type_name -> object_builder_service.RelationForTable
	8,  // 3: object_builder_service.RelationForSection.table_from:type_name -> object_builder_service.TableForSection
	8,  // 4: object_builder_service.RelationForSection.table_to:type_name -> object_builder_service.TableForSection
	19, // 5: object_builder_service.RelationForSection.view_fields:type_name -> object_builder_service.Field
	3,  // 6: object_builder_service.RelationForSection.summaries:type_name -> object_builder_service.SummaryInSection
	7,  // 7: object_builder_service.RelationForSection.quick_filters:type_name -> object_builder_service.QuickFilterForSection
	6,  // 8: object_builder_service.TableForSection.increment_id:type_name -> object_builder_service.IncrementIDForSection
	5,  // 9: object_builder_service.NewViewRelation.relation:type_name -> object_builder_service.RelationForSection
	9,  // 10: object_builder_service.GetViewRelationResponse.relations:type_name -> object_builder_service.NewViewRelation
	4,  // 11: object_builder_service.GetAllViewRelationsResponse.view_relations:type_name -> object_builder_service.ViewRelation
	1,  // 12: object_builder_service.UpsertViewRelationsBody.view_relations:type_name -> object_builder_service.ViewRelationReq
	14, // 13: object_builder_service.SectionResponse.fields:type_name -> object_builder_service.FieldResponse
	20, // 14: object_builder_service.FieldResponse.attributes:type_name -> google.protobuf.Struct
	0,  // 15: object_builder_service.UpdateSectionsRequest.sections:type_name -> object_builder_service.Section
	13, // 16: object_builder_service.GetAllSectionsResponse.sections:type_name -> object_builder_service.SectionResponse
	18, // 17: object_builder_service.SectionService.GetAll:input_type -> object_builder_service.GetAllSectionsRequest
	16, // 18: object_builder_service.SectionService.Update:input_type -> object_builder_service.UpdateSectionsRequest
	18, // 19: object_builder_service.SectionService.GetAllViewRelations:input_type -> object_builder_service.GetAllSectionsRequest
	18, // 20: object_builder_service.SectionService.GetViewRelation:input_type -> object_builder_service.GetAllSectionsRequest
	12, // 21: object_builder_service.SectionService.UpsertViewRelations:input_type -> object_builder_service.UpsertViewRelationsBody
	17, // 22: object_builder_service.SectionService.GetAll:output_type -> object_builder_service.GetAllSectionsResponse
	21, // 23: object_builder_service.SectionService.Update:output_type -> google.protobuf.Empty
	11, // 24: object_builder_service.SectionService.GetAllViewRelations:output_type -> object_builder_service.GetAllViewRelationsResponse
	10, // 25: object_builder_service.SectionService.GetViewRelation:output_type -> object_builder_service.GetViewRelationResponse
	21, // 26: object_builder_service.SectionService.UpsertViewRelations:output_type -> google.protobuf.Empty
	22, // [22:27] is the sub-list for method output_type
	17, // [17:22] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_section_proto_init() }
func file_section_proto_init() {
	if File_section_proto != nil {
		return
	}
	file_field_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_section_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Section); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_section_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ViewRelationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_section_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelationForTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_section_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SummaryInSection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_section_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ViewRelation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_section_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelationForSection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_section_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncrementIDForSection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_section_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuickFilterForSection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_section_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableForSection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_section_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewViewRelation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_section_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetViewRelationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_section_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllViewRelationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_section_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertViewRelationsBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_section_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SectionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_section_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_section_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldForSection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_section_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSectionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_section_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllSectionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_section_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllSectionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_section_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_section_proto_goTypes,
		DependencyIndexes: file_section_proto_depIdxs,
		MessageInfos:      file_section_proto_msgTypes,
	}.Build()
	File_section_proto = out.File
	file_section_proto_rawDesc = nil
	file_section_proto_goTypes = nil
	file_section_proto_depIdxs = nil
}
