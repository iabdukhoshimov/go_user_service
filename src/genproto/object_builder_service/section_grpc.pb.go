// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: section.proto

package object_builder_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SectionServiceClient is the client API for SectionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SectionServiceClient interface {
	GetAll(ctx context.Context, in *GetAllSectionsRequest, opts ...grpc.CallOption) (*GetAllSectionsResponse, error)
	Update(ctx context.Context, in *UpdateSectionsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetAllViewRelations(ctx context.Context, in *GetAllSectionsRequest, opts ...grpc.CallOption) (*GetAllViewRelationsResponse, error)
	GetViewRelation(ctx context.Context, in *GetAllSectionsRequest, opts ...grpc.CallOption) (*GetViewRelationResponse, error)
	UpsertViewRelations(ctx context.Context, in *UpsertViewRelationsBody, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type sectionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSectionServiceClient(cc grpc.ClientConnInterface) SectionServiceClient {
	return &sectionServiceClient{cc}
}

func (c *sectionServiceClient) GetAll(ctx context.Context, in *GetAllSectionsRequest, opts ...grpc.CallOption) (*GetAllSectionsResponse, error) {
	out := new(GetAllSectionsResponse)
	err := c.cc.Invoke(ctx, "/object_builder_service.SectionService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sectionServiceClient) Update(ctx context.Context, in *UpdateSectionsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/object_builder_service.SectionService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sectionServiceClient) GetAllViewRelations(ctx context.Context, in *GetAllSectionsRequest, opts ...grpc.CallOption) (*GetAllViewRelationsResponse, error) {
	out := new(GetAllViewRelationsResponse)
	err := c.cc.Invoke(ctx, "/object_builder_service.SectionService/GetAllViewRelations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sectionServiceClient) GetViewRelation(ctx context.Context, in *GetAllSectionsRequest, opts ...grpc.CallOption) (*GetViewRelationResponse, error) {
	out := new(GetViewRelationResponse)
	err := c.cc.Invoke(ctx, "/object_builder_service.SectionService/GetViewRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sectionServiceClient) UpsertViewRelations(ctx context.Context, in *UpsertViewRelationsBody, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/object_builder_service.SectionService/UpsertViewRelations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SectionServiceServer is the server API for SectionService service.
// All implementations must embed UnimplementedSectionServiceServer
// for forward compatibility
type SectionServiceServer interface {
	GetAll(context.Context, *GetAllSectionsRequest) (*GetAllSectionsResponse, error)
	Update(context.Context, *UpdateSectionsRequest) (*emptypb.Empty, error)
	GetAllViewRelations(context.Context, *GetAllSectionsRequest) (*GetAllViewRelationsResponse, error)
	GetViewRelation(context.Context, *GetAllSectionsRequest) (*GetViewRelationResponse, error)
	UpsertViewRelations(context.Context, *UpsertViewRelationsBody) (*emptypb.Empty, error)
	mustEmbedUnimplementedSectionServiceServer()
}

// UnimplementedSectionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSectionServiceServer struct {
}

func (UnimplementedSectionServiceServer) GetAll(context.Context, *GetAllSectionsRequest) (*GetAllSectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedSectionServiceServer) Update(context.Context, *UpdateSectionsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedSectionServiceServer) GetAllViewRelations(context.Context, *GetAllSectionsRequest) (*GetAllViewRelationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllViewRelations not implemented")
}
func (UnimplementedSectionServiceServer) GetViewRelation(context.Context, *GetAllSectionsRequest) (*GetViewRelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetViewRelation not implemented")
}
func (UnimplementedSectionServiceServer) UpsertViewRelations(context.Context, *UpsertViewRelationsBody) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertViewRelations not implemented")
}
func (UnimplementedSectionServiceServer) mustEmbedUnimplementedSectionServiceServer() {}

// UnsafeSectionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SectionServiceServer will
// result in compilation errors.
type UnsafeSectionServiceServer interface {
	mustEmbedUnimplementedSectionServiceServer()
}

func RegisterSectionServiceServer(s grpc.ServiceRegistrar, srv SectionServiceServer) {
	s.RegisterService(&SectionService_ServiceDesc, srv)
}

func _SectionService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllSectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SectionServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/object_builder_service.SectionService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SectionServiceServer).GetAll(ctx, req.(*GetAllSectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SectionService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SectionServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/object_builder_service.SectionService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SectionServiceServer).Update(ctx, req.(*UpdateSectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SectionService_GetAllViewRelations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllSectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SectionServiceServer).GetAllViewRelations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/object_builder_service.SectionService/GetAllViewRelations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SectionServiceServer).GetAllViewRelations(ctx, req.(*GetAllSectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SectionService_GetViewRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllSectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SectionServiceServer).GetViewRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/object_builder_service.SectionService/GetViewRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SectionServiceServer).GetViewRelation(ctx, req.(*GetAllSectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SectionService_UpsertViewRelations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertViewRelationsBody)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SectionServiceServer).UpsertViewRelations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/object_builder_service.SectionService/UpsertViewRelations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SectionServiceServer).UpsertViewRelations(ctx, req.(*UpsertViewRelationsBody))
	}
	return interceptor(ctx, in, info, handler)
}

// SectionService_ServiceDesc is the grpc.ServiceDesc for SectionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SectionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "object_builder_service.SectionService",
	HandlerType: (*SectionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAll",
			Handler:    _SectionService_GetAll_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _SectionService_Update_Handler,
		},
		{
			MethodName: "GetAllViewRelations",
			Handler:    _SectionService_GetAllViewRelations_Handler,
		},
		{
			MethodName: "GetViewRelation",
			Handler:    _SectionService_GetViewRelation_Handler,
		},
		{
			MethodName: "UpsertViewRelations",
			Handler:    _SectionService_UpsertViewRelations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "section.proto",
}
