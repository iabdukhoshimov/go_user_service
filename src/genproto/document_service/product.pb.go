// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: product.proto

package document_service

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ProductDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tin      string `protobuf:"bytes,1,opt,name=tin,proto3" json:"tin,omitempty"`
	Pinfl    string `protobuf:"bytes,2,opt,name=pinfl,proto3" json:"pinfl,omitempty"`
	Id       string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Lang     string `protobuf:"bytes,4,opt,name=lang,proto3" json:"lang,omitempty"`
	MxikCode string `protobuf:"bytes,5,opt,name=mxikCode,proto3" json:"mxikCode,omitempty"`
}

func (x *ProductDetails) Reset() {
	*x = ProductDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductDetails) ProtoMessage() {}

func (x *ProductDetails) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductDetails.ProtoReflect.Descriptor instead.
func (*ProductDetails) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{0}
}

func (x *ProductDetails) GetTin() string {
	if x != nil {
		return x.Tin
	}
	return ""
}

func (x *ProductDetails) GetPinfl() string {
	if x != nil {
		return x.Pinfl
	}
	return ""
}

func (x *ProductDetails) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProductDetails) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *ProductDetails) GetMxikCode() string {
	if x != nil {
		return x.MxikCode
	}
	return ""
}

type ProductId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ProductId) Reset() {
	*x = ProductId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductId) ProtoMessage() {}

func (x *ProductId) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductId.ProtoReflect.Descriptor instead.
func (*ProductId) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{1}
}

func (x *ProductId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetAllProductRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit  int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Search string `protobuf:"bytes,3,opt,name=search,proto3" json:"search,omitempty"`
	Tin    string `protobuf:"bytes,4,opt,name=tin,proto3" json:"tin,omitempty"`
	Lang   string `protobuf:"bytes,5,opt,name=lang,proto3" json:"lang,omitempty"`
}

func (x *GetAllProductRequest) Reset() {
	*x = GetAllProductRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllProductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllProductRequest) ProtoMessage() {}

func (x *GetAllProductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllProductRequest.ProtoReflect.Descriptor instead.
func (*GetAllProductRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{2}
}

func (x *GetAllProductRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetAllProductRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetAllProductRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *GetAllProductRequest) GetTin() string {
	if x != nil {
		return x.Tin
	}
	return ""
}

func (x *GetAllProductRequest) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

type GetAllProductResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count    int64           `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Products []*ProductsList `protobuf:"bytes,2,rep,name=products,proto3" json:"products,omitempty"`
}

func (x *GetAllProductResponse) Reset() {
	*x = GetAllProductResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllProductResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllProductResponse) ProtoMessage() {}

func (x *GetAllProductResponse) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllProductResponse.ProtoReflect.Descriptor instead.
func (*GetAllProductResponse) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{3}
}

func (x *GetAllProductResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *GetAllProductResponse) GetProducts() []*ProductsList {
	if x != nil {
		return x.Products
	}
	return nil
}

type GetAllProducts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*ProductRequest `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetAllProducts) Reset() {
	*x = GetAllProducts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllProducts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllProducts) ProtoMessage() {}

func (x *GetAllProducts) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllProducts.ProtoReflect.Descriptor instead.
func (*GetAllProducts) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{4}
}

func (x *GetAllProducts) GetData() []*ProductRequest {
	if x != nil {
		return x.Data
	}
	return nil
}

type ProductsList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ClassName         string                  `protobuf:"bytes,2,opt,name=className,proto3" json:"className,omitempty"`
	CommonUnitCode    int64                   `protobuf:"varint,3,opt,name=commonUnitCode,proto3" json:"commonUnitCode,omitempty"`
	CommonUnitName    string                  `protobuf:"bytes,4,opt,name=commonUnitName,proto3" json:"commonUnitName,omitempty"`
	GroupName         string                  `protobuf:"bytes,5,opt,name=groupName,proto3" json:"groupName,omitempty"`
	IsActive          int64                   `protobuf:"varint,6,opt,name=isActive,proto3" json:"isActive,omitempty"`
	Label             int64                   `protobuf:"varint,7,opt,name=label,proto3" json:"label,omitempty"`
	MxikCode          string                  `protobuf:"bytes,8,opt,name=mxikCode,proto3" json:"mxikCode,omitempty"`
	Pkey              string                  `protobuf:"bytes,9,opt,name=pkey,proto3" json:"pkey,omitempty"`
	PositionName      string                  `protobuf:"bytes,10,opt,name=positionName,proto3" json:"positionName,omitempty"`
	SubPositionName   string                  `protobuf:"bytes,11,opt,name=subPositionName,proto3" json:"subPositionName,omitempty"`
	PackageNames      []*PackageNames         `protobuf:"bytes,12,rep,name=packageNames,proto3" json:"packageNames,omitempty"`
	Tin               string                  `protobuf:"bytes,13,opt,name=tin,proto3" json:"tin,omitempty"`
	UnitCode          int64                   `protobuf:"varint,14,opt,name=unitCode,proto3" json:"unitCode,omitempty"`
	UnitName          string                  `protobuf:"bytes,15,opt,name=unitName,proto3" json:"unitName,omitempty"`
	UnitValue         string                  `protobuf:"bytes,16,opt,name=unitValue,proto3" json:"unitValue,omitempty"`
	UsePackage        string                  `protobuf:"bytes,17,opt,name=usePackage,proto3" json:"usePackage,omitempty"`
	Units             []*Units                `protobuf:"bytes,18,rep,name=units,proto3" json:"units,omitempty"`
	Pinfl             string                  `protobuf:"bytes,19,opt,name=pinfl,proto3" json:"pinfl,omitempty"`
	InternationalCode *wrapperspb.StringValue `protobuf:"bytes,20,opt,name=internationalCode,proto3" json:"internationalCode,omitempty"`
	BrandName         *wrapperspb.StringValue `protobuf:"bytes,21,opt,name=brandName,proto3" json:"brandName,omitempty"`
	AttributeName     *wrapperspb.StringValue `protobuf:"bytes,22,opt,name=attributeName,proto3" json:"attributeName,omitempty"`
}

func (x *ProductsList) Reset() {
	*x = ProductsList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductsList) ProtoMessage() {}

func (x *ProductsList) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductsList.ProtoReflect.Descriptor instead.
func (*ProductsList) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{5}
}

func (x *ProductsList) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProductsList) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *ProductsList) GetCommonUnitCode() int64 {
	if x != nil {
		return x.CommonUnitCode
	}
	return 0
}

func (x *ProductsList) GetCommonUnitName() string {
	if x != nil {
		return x.CommonUnitName
	}
	return ""
}

func (x *ProductsList) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *ProductsList) GetIsActive() int64 {
	if x != nil {
		return x.IsActive
	}
	return 0
}

func (x *ProductsList) GetLabel() int64 {
	if x != nil {
		return x.Label
	}
	return 0
}

func (x *ProductsList) GetMxikCode() string {
	if x != nil {
		return x.MxikCode
	}
	return ""
}

func (x *ProductsList) GetPkey() string {
	if x != nil {
		return x.Pkey
	}
	return ""
}

func (x *ProductsList) GetPositionName() string {
	if x != nil {
		return x.PositionName
	}
	return ""
}

func (x *ProductsList) GetSubPositionName() string {
	if x != nil {
		return x.SubPositionName
	}
	return ""
}

func (x *ProductsList) GetPackageNames() []*PackageNames {
	if x != nil {
		return x.PackageNames
	}
	return nil
}

func (x *ProductsList) GetTin() string {
	if x != nil {
		return x.Tin
	}
	return ""
}

func (x *ProductsList) GetUnitCode() int64 {
	if x != nil {
		return x.UnitCode
	}
	return 0
}

func (x *ProductsList) GetUnitName() string {
	if x != nil {
		return x.UnitName
	}
	return ""
}

func (x *ProductsList) GetUnitValue() string {
	if x != nil {
		return x.UnitValue
	}
	return ""
}

func (x *ProductsList) GetUsePackage() string {
	if x != nil {
		return x.UsePackage
	}
	return ""
}

func (x *ProductsList) GetUnits() []*Units {
	if x != nil {
		return x.Units
	}
	return nil
}

func (x *ProductsList) GetPinfl() string {
	if x != nil {
		return x.Pinfl
	}
	return ""
}

func (x *ProductsList) GetInternationalCode() *wrapperspb.StringValue {
	if x != nil {
		return x.InternationalCode
	}
	return nil
}

func (x *ProductsList) GetBrandName() *wrapperspb.StringValue {
	if x != nil {
		return x.BrandName
	}
	return nil
}

func (x *ProductsList) GetAttributeName() *wrapperspb.StringValue {
	if x != nil {
		return x.AttributeName
	}
	return nil
}

type ReloadProductReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lang string        `protobuf:"bytes,1,opt,name=lang,proto3" json:"lang,omitempty"`
	Data []*ReloadData `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ReloadProductReq) Reset() {
	*x = ReloadProductReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReloadProductReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReloadProductReq) ProtoMessage() {}

func (x *ReloadProductReq) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReloadProductReq.ProtoReflect.Descriptor instead.
func (*ReloadProductReq) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{6}
}

func (x *ReloadProductReq) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *ReloadProductReq) GetData() []*ReloadData {
	if x != nil {
		return x.Data
	}
	return nil
}

type ReloadData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ClassName         string                  `protobuf:"bytes,2,opt,name=className,proto3" json:"className,omitempty"`
	CommonUnitCode    int64                   `protobuf:"varint,3,opt,name=commonUnitCode,proto3" json:"commonUnitCode,omitempty"`
	CommonUnitName    string                  `protobuf:"bytes,4,opt,name=commonUnitName,proto3" json:"commonUnitName,omitempty"`
	GroupName         string                  `protobuf:"bytes,5,opt,name=groupName,proto3" json:"groupName,omitempty"`
	IsActive          int64                   `protobuf:"varint,6,opt,name=isActive,proto3" json:"isActive,omitempty"`
	Label             int64                   `protobuf:"varint,7,opt,name=label,proto3" json:"label,omitempty"`
	MxikCode          string                  `protobuf:"bytes,8,opt,name=mxikCode,proto3" json:"mxikCode,omitempty"`
	Pkey              string                  `protobuf:"bytes,9,opt,name=pkey,proto3" json:"pkey,omitempty"`
	PositionName      string                  `protobuf:"bytes,10,opt,name=positionName,proto3" json:"positionName,omitempty"`
	SubPositionName   string                  `protobuf:"bytes,11,opt,name=subPositionName,proto3" json:"subPositionName,omitempty"`
	PackageNames      []*PackageNames         `protobuf:"bytes,12,rep,name=packageNames,proto3" json:"packageNames,omitempty"`
	Tin               string                  `protobuf:"bytes,13,opt,name=tin,proto3" json:"tin,omitempty"`
	UnitCode          int64                   `protobuf:"varint,14,opt,name=unitCode,proto3" json:"unitCode,omitempty"`
	UnitName          string                  `protobuf:"bytes,15,opt,name=unitName,proto3" json:"unitName,omitempty"`
	UnitValue         string                  `protobuf:"bytes,16,opt,name=unitValue,proto3" json:"unitValue,omitempty"`
	UsePackage        string                  `protobuf:"bytes,17,opt,name=usePackage,proto3" json:"usePackage,omitempty"`
	Units             []*Units                `protobuf:"bytes,18,rep,name=units,proto3" json:"units,omitempty"`
	Pinfl             string                  `protobuf:"bytes,19,opt,name=pinfl,proto3" json:"pinfl,omitempty"`
	InternationalCode *wrapperspb.StringValue `protobuf:"bytes,20,opt,name=internationalCode,proto3" json:"internationalCode,omitempty"`
	BrandName         *wrapperspb.StringValue `protobuf:"bytes,21,opt,name=brandName,proto3" json:"brandName,omitempty"`
	AttributeName     *wrapperspb.StringValue `protobuf:"bytes,22,opt,name=attributeName,proto3" json:"attributeName,omitempty"`
	MxikFullname      string                  `protobuf:"bytes,23,opt,name=mxikFullname,proto3" json:"mxikFullname,omitempty"`
	UsePackage2       string                  `protobuf:"bytes,24,opt,name=usePackage2,proto3" json:"usePackage2,omitempty"`
	Lang              string                  `protobuf:"bytes,25,opt,name=lang,proto3" json:"lang,omitempty"`
}

func (x *ReloadData) Reset() {
	*x = ReloadData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReloadData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReloadData) ProtoMessage() {}

func (x *ReloadData) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReloadData.ProtoReflect.Descriptor instead.
func (*ReloadData) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{7}
}

func (x *ReloadData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ReloadData) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *ReloadData) GetCommonUnitCode() int64 {
	if x != nil {
		return x.CommonUnitCode
	}
	return 0
}

func (x *ReloadData) GetCommonUnitName() string {
	if x != nil {
		return x.CommonUnitName
	}
	return ""
}

func (x *ReloadData) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *ReloadData) GetIsActive() int64 {
	if x != nil {
		return x.IsActive
	}
	return 0
}

func (x *ReloadData) GetLabel() int64 {
	if x != nil {
		return x.Label
	}
	return 0
}

func (x *ReloadData) GetMxikCode() string {
	if x != nil {
		return x.MxikCode
	}
	return ""
}

func (x *ReloadData) GetPkey() string {
	if x != nil {
		return x.Pkey
	}
	return ""
}

func (x *ReloadData) GetPositionName() string {
	if x != nil {
		return x.PositionName
	}
	return ""
}

func (x *ReloadData) GetSubPositionName() string {
	if x != nil {
		return x.SubPositionName
	}
	return ""
}

func (x *ReloadData) GetPackageNames() []*PackageNames {
	if x != nil {
		return x.PackageNames
	}
	return nil
}

func (x *ReloadData) GetTin() string {
	if x != nil {
		return x.Tin
	}
	return ""
}

func (x *ReloadData) GetUnitCode() int64 {
	if x != nil {
		return x.UnitCode
	}
	return 0
}

func (x *ReloadData) GetUnitName() string {
	if x != nil {
		return x.UnitName
	}
	return ""
}

func (x *ReloadData) GetUnitValue() string {
	if x != nil {
		return x.UnitValue
	}
	return ""
}

func (x *ReloadData) GetUsePackage() string {
	if x != nil {
		return x.UsePackage
	}
	return ""
}

func (x *ReloadData) GetUnits() []*Units {
	if x != nil {
		return x.Units
	}
	return nil
}

func (x *ReloadData) GetPinfl() string {
	if x != nil {
		return x.Pinfl
	}
	return ""
}

func (x *ReloadData) GetInternationalCode() *wrapperspb.StringValue {
	if x != nil {
		return x.InternationalCode
	}
	return nil
}

func (x *ReloadData) GetBrandName() *wrapperspb.StringValue {
	if x != nil {
		return x.BrandName
	}
	return nil
}

func (x *ReloadData) GetAttributeName() *wrapperspb.StringValue {
	if x != nil {
		return x.AttributeName
	}
	return nil
}

func (x *ReloadData) GetMxikFullname() string {
	if x != nil {
		return x.MxikFullname
	}
	return ""
}

func (x *ReloadData) GetUsePackage2() string {
	if x != nil {
		return x.UsePackage2
	}
	return ""
}

func (x *ReloadData) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

type ProductRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClassName         string                  `protobuf:"bytes,1,opt,name=className,proto3" json:"className,omitempty"`
	CommonUnitCode    int64                   `protobuf:"varint,2,opt,name=commonUnitCode,proto3" json:"commonUnitCode,omitempty"`
	CommonUnitName    string                  `protobuf:"bytes,3,opt,name=commonUnitName,proto3" json:"commonUnitName,omitempty"`
	GroupName         string                  `protobuf:"bytes,4,opt,name=groupName,proto3" json:"groupName,omitempty"`
	IsActive          int64                   `protobuf:"varint,5,opt,name=isActive,proto3" json:"isActive,omitempty"`
	Label             int64                   `protobuf:"varint,6,opt,name=label,proto3" json:"label,omitempty"`
	MxikCode          string                  `protobuf:"bytes,7,opt,name=mxikCode,proto3" json:"mxikCode,omitempty"`
	Pkey              string                  `protobuf:"bytes,8,opt,name=pkey,proto3" json:"pkey,omitempty"`
	PositionName      string                  `protobuf:"bytes,9,opt,name=positionName,proto3" json:"positionName,omitempty"`
	SubPositionName   string                  `protobuf:"bytes,10,opt,name=subPositionName,proto3" json:"subPositionName,omitempty"`
	PackageNames      []*CreatePackageNames   `protobuf:"bytes,11,rep,name=packageNames,proto3" json:"packageNames,omitempty"`
	Tin               string                  `protobuf:"bytes,12,opt,name=tin,proto3" json:"tin,omitempty"`
	UnitCode          int64                   `protobuf:"varint,13,opt,name=unitCode,proto3" json:"unitCode,omitempty"`
	UnitName          string                  `protobuf:"bytes,14,opt,name=unitName,proto3" json:"unitName,omitempty"`
	UnitValue         string                  `protobuf:"bytes,15,opt,name=unitValue,proto3" json:"unitValue,omitempty"`
	UsePackage        string                  `protobuf:"bytes,16,opt,name=usePackage,proto3" json:"usePackage,omitempty"`
	Units             []*CreateUnit           `protobuf:"bytes,17,rep,name=units,proto3" json:"units,omitempty"`
	Pinfl             string                  `protobuf:"bytes,18,opt,name=pinfl,proto3" json:"pinfl,omitempty"`
	Lang              string                  `protobuf:"bytes,19,opt,name=lang,proto3" json:"lang,omitempty"`
	InternationalCode *wrapperspb.StringValue `protobuf:"bytes,20,opt,name=internationalCode,proto3" json:"internationalCode,omitempty"`
	BrandName         *wrapperspb.StringValue `protobuf:"bytes,21,opt,name=brand_name,json=brandName,proto3" json:"brand_name,omitempty"`
	AttributeName     *wrapperspb.StringValue `protobuf:"bytes,22,opt,name=attribute_name,json=attributeName,proto3" json:"attribute_name,omitempty"`
}

func (x *ProductRequest) Reset() {
	*x = ProductRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductRequest) ProtoMessage() {}

func (x *ProductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductRequest.ProtoReflect.Descriptor instead.
func (*ProductRequest) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{8}
}

func (x *ProductRequest) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *ProductRequest) GetCommonUnitCode() int64 {
	if x != nil {
		return x.CommonUnitCode
	}
	return 0
}

func (x *ProductRequest) GetCommonUnitName() string {
	if x != nil {
		return x.CommonUnitName
	}
	return ""
}

func (x *ProductRequest) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *ProductRequest) GetIsActive() int64 {
	if x != nil {
		return x.IsActive
	}
	return 0
}

func (x *ProductRequest) GetLabel() int64 {
	if x != nil {
		return x.Label
	}
	return 0
}

func (x *ProductRequest) GetMxikCode() string {
	if x != nil {
		return x.MxikCode
	}
	return ""
}

func (x *ProductRequest) GetPkey() string {
	if x != nil {
		return x.Pkey
	}
	return ""
}

func (x *ProductRequest) GetPositionName() string {
	if x != nil {
		return x.PositionName
	}
	return ""
}

func (x *ProductRequest) GetSubPositionName() string {
	if x != nil {
		return x.SubPositionName
	}
	return ""
}

func (x *ProductRequest) GetPackageNames() []*CreatePackageNames {
	if x != nil {
		return x.PackageNames
	}
	return nil
}

func (x *ProductRequest) GetTin() string {
	if x != nil {
		return x.Tin
	}
	return ""
}

func (x *ProductRequest) GetUnitCode() int64 {
	if x != nil {
		return x.UnitCode
	}
	return 0
}

func (x *ProductRequest) GetUnitName() string {
	if x != nil {
		return x.UnitName
	}
	return ""
}

func (x *ProductRequest) GetUnitValue() string {
	if x != nil {
		return x.UnitValue
	}
	return ""
}

func (x *ProductRequest) GetUsePackage() string {
	if x != nil {
		return x.UsePackage
	}
	return ""
}

func (x *ProductRequest) GetUnits() []*CreateUnit {
	if x != nil {
		return x.Units
	}
	return nil
}

func (x *ProductRequest) GetPinfl() string {
	if x != nil {
		return x.Pinfl
	}
	return ""
}

func (x *ProductRequest) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *ProductRequest) GetInternationalCode() *wrapperspb.StringValue {
	if x != nil {
		return x.InternationalCode
	}
	return nil
}

func (x *ProductRequest) GetBrandName() *wrapperspb.StringValue {
	if x != nil {
		return x.BrandName
	}
	return nil
}

func (x *ProductRequest) GetAttributeName() *wrapperspb.StringValue {
	if x != nil {
		return x.AttributeName
	}
	return nil
}

type Units struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonUnitsId int64  `protobuf:"varint,1,opt,name=commonUnitsId,proto3" json:"commonUnitsId,omitempty"`
	Description   string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Difference    string `protobuf:"bytes,3,opt,name=difference,proto3" json:"difference,omitempty"`
	Id            string `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	Name          string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	NameLatin     string `protobuf:"bytes,6,opt,name=nameLatin,proto3" json:"nameLatin,omitempty"`
	NameRu        string `protobuf:"bytes,7,opt,name=nameRu,proto3" json:"nameRu,omitempty"`
	NameUz        string `protobuf:"bytes,8,opt,name=nameUz,proto3" json:"nameUz,omitempty"`
	Unit          string `protobuf:"bytes,9,opt,name=unit,proto3" json:"unit,omitempty"`
	ProductId     string `protobuf:"bytes,10,opt,name=productId,proto3" json:"productId,omitempty"`
}

func (x *Units) Reset() {
	*x = Units{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Units) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Units) ProtoMessage() {}

func (x *Units) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Units.ProtoReflect.Descriptor instead.
func (*Units) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{9}
}

func (x *Units) GetCommonUnitsId() int64 {
	if x != nil {
		return x.CommonUnitsId
	}
	return 0
}

func (x *Units) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Units) GetDifference() string {
	if x != nil {
		return x.Difference
	}
	return ""
}

func (x *Units) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Units) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Units) GetNameLatin() string {
	if x != nil {
		return x.NameLatin
	}
	return ""
}

func (x *Units) GetNameRu() string {
	if x != nil {
		return x.NameRu
	}
	return ""
}

func (x *Units) GetNameUz() string {
	if x != nil {
		return x.NameUz
	}
	return ""
}

func (x *Units) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *Units) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

type CreateUnit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonUnitsId int64  `protobuf:"varint,1,opt,name=commonUnitsId,proto3" json:"commonUnitsId,omitempty"`
	Description   string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Difference    string `protobuf:"bytes,3,opt,name=difference,proto3" json:"difference,omitempty"`
	Name          string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	NameLatin     string `protobuf:"bytes,5,opt,name=nameLatin,proto3" json:"nameLatin,omitempty"`
	NameRu        string `protobuf:"bytes,6,opt,name=nameRu,proto3" json:"nameRu,omitempty"`
	NameUz        string `protobuf:"bytes,7,opt,name=nameUz,proto3" json:"nameUz,omitempty"`
	Unit          string `protobuf:"bytes,8,opt,name=unit,proto3" json:"unit,omitempty"`
}

func (x *CreateUnit) Reset() {
	*x = CreateUnit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUnit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUnit) ProtoMessage() {}

func (x *CreateUnit) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUnit.ProtoReflect.Descriptor instead.
func (*CreateUnit) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{10}
}

func (x *CreateUnit) GetCommonUnitsId() int64 {
	if x != nil {
		return x.CommonUnitsId
	}
	return 0
}

func (x *CreateUnit) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateUnit) GetDifference() string {
	if x != nil {
		return x.Difference
	}
	return ""
}

func (x *CreateUnit) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateUnit) GetNameLatin() string {
	if x != nil {
		return x.NameLatin
	}
	return ""
}

func (x *CreateUnit) GetNameRu() string {
	if x != nil {
		return x.NameRu
	}
	return ""
}

func (x *CreateUnit) GetNameUz() string {
	if x != nil {
		return x.NameUz
	}
	return ""
}

func (x *CreateUnit) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

type PackageNames struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code        int64  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	MxikCode    string `protobuf:"bytes,2,opt,name=mxikCode,proto3" json:"mxikCode,omitempty"`
	NameLat     string `protobuf:"bytes,3,opt,name=nameLat,proto3" json:"nameLat,omitempty"`
	NameRu      string `protobuf:"bytes,4,opt,name=nameRu,proto3" json:"nameRu,omitempty"`
	NameUz      string `protobuf:"bytes,5,opt,name=nameUz,proto3" json:"nameUz,omitempty"`
	PackageType string `protobuf:"bytes,6,opt,name=packageType,proto3" json:"packageType,omitempty"`
	Id          string `protobuf:"bytes,7,opt,name=id,proto3" json:"id,omitempty"`
	ProductId   string `protobuf:"bytes,8,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
}

func (x *PackageNames) Reset() {
	*x = PackageNames{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackageNames) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageNames) ProtoMessage() {}

func (x *PackageNames) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageNames.ProtoReflect.Descriptor instead.
func (*PackageNames) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{11}
}

func (x *PackageNames) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *PackageNames) GetMxikCode() string {
	if x != nil {
		return x.MxikCode
	}
	return ""
}

func (x *PackageNames) GetNameLat() string {
	if x != nil {
		return x.NameLat
	}
	return ""
}

func (x *PackageNames) GetNameRu() string {
	if x != nil {
		return x.NameRu
	}
	return ""
}

func (x *PackageNames) GetNameUz() string {
	if x != nil {
		return x.NameUz
	}
	return ""
}

func (x *PackageNames) GetPackageType() string {
	if x != nil {
		return x.PackageType
	}
	return ""
}

func (x *PackageNames) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PackageNames) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

type CreatePackageNames struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code        int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	MxikCode    string `protobuf:"bytes,2,opt,name=mxikCode,proto3" json:"mxikCode,omitempty"`
	NameLat     string `protobuf:"bytes,3,opt,name=nameLat,proto3" json:"nameLat,omitempty"`
	NameRu      string `protobuf:"bytes,4,opt,name=nameRu,proto3" json:"nameRu,omitempty"`
	NameUz      string `protobuf:"bytes,5,opt,name=nameUz,proto3" json:"nameUz,omitempty"`
	PackageType string `protobuf:"bytes,6,opt,name=packageType,proto3" json:"packageType,omitempty"`
}

func (x *CreatePackageNames) Reset() {
	*x = CreatePackageNames{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePackageNames) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePackageNames) ProtoMessage() {}

func (x *CreatePackageNames) ProtoReflect() protoreflect.Message {
	mi := &file_product_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePackageNames.ProtoReflect.Descriptor instead.
func (*CreatePackageNames) Descriptor() ([]byte, []int) {
	return file_product_proto_rawDescGZIP(), []int{12}
}

func (x *CreatePackageNames) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreatePackageNames) GetMxikCode() string {
	if x != nil {
		return x.MxikCode
	}
	return ""
}

func (x *CreatePackageNames) GetNameLat() string {
	if x != nil {
		return x.NameLat
	}
	return ""
}

func (x *CreatePackageNames) GetNameRu() string {
	if x != nil {
		return x.NameRu
	}
	return ""
}

func (x *CreatePackageNames) GetNameUz() string {
	if x != nil {
		return x.NameUz
	}
	return ""
}

func (x *CreatePackageNames) GetPackageType() string {
	if x != nil {
		return x.PackageType
	}
	return ""
}

var File_product_proto protoreflect.FileDescriptor

var file_product_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x10, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x78,
	0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74,
	0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x69, 0x6e, 0x66, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x70, 0x69, 0x6e, 0x66, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08,
	0x6d, 0x78, 0x69, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x78, 0x69, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x1b, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x82, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x74, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x22, 0x69, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x22, 0x46, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb7, 0x06,
	0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x55, 0x6e,
	0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x73,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08,
	0x6d, 0x78, 0x69, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x78, 0x69, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6b, 0x65, 0x79,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0c,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x75, 0x62, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x52, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x74, 0x69, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x69, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x6e, 0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x6e, 0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x6e, 0x69,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18,
	0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x05,
	0x75, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x69, 0x6e, 0x66, 0x6c, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x69, 0x6e, 0x66, 0x6c, 0x12, 0x4a, 0x0a, 0x11, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x58, 0x0a, 0x10, 0x52, 0x65, 0x6c, 0x6f, 0x61,
	0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6c,
	0x61, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12,
	0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x8f, 0x07, 0x0a, 0x0a, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x55, 0x6e,
	0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x55, 0x6e, 0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x6d, 0x78, 0x69, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6d, 0x78, 0x69, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6b,
	0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6b, 0x65, 0x79, 0x12, 0x22,
	0x0a, 0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x75, 0x62,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0c,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x52, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74,
	0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e,
	0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75,
	0x6e, 0x69, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73,
	0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74,
	0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x73,
	0x52, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x69, 0x6e, 0x66, 0x6c,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x69, 0x6e, 0x66, 0x6c, 0x12, 0x4a, 0x0a,
	0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x62, 0x72, 0x61,
	0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x62, 0x72, 0x61, 0x6e,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x78, 0x69,
	0x6b, 0x46, 0x75, 0x6c, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6d, 0x78, 0x69, 0x6b, 0x46, 0x75, 0x6c, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x75, 0x73, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x32, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x32, 0x12,
	0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c,
	0x61, 0x6e, 0x67, 0x22, 0xca, 0x06, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x55, 0x6e,
	0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x78, 0x69, 0x6b, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x78, 0x69, 0x6b, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x6b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x6b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x73, 0x75, 0x62, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x48, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x0c,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x74, 0x69, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x69, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e,
	0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x6e,
	0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x11, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x69,
	0x74, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x69, 0x6e, 0x66,
	0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x69, 0x6e, 0x66, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61,
	0x6e, 0x67, 0x12, 0x4a, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3b,
	0x0a, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x93, 0x02, 0x0a, 0x05, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x4c, 0x61,
	0x74, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x4c,
	0x61, 0x74, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x75, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x75, 0x12, 0x16, 0x0a, 0x06,
	0x6e, 0x61, 0x6d, 0x65, 0x55, 0x7a, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x61,
	0x6d, 0x65, 0x55, 0x7a, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x22, 0xea, 0x01, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x55,
	0x6e, 0x69, 0x74, 0x73, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a,
	0x0a, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x4c, 0x61, 0x74, 0x69, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x4c, 0x61, 0x74, 0x69, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x75, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x75, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x55,
	0x7a, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x55, 0x7a, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x6e, 0x69, 0x74, 0x22, 0xd9, 0x01, 0x0a, 0x0c, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x78, 0x69, 0x6b,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x78, 0x69, 0x6b,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x4c, 0x61, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x4c, 0x61, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x75, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6e, 0x61, 0x6d, 0x65, 0x52, 0x75, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x55, 0x7a,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x55, 0x7a, 0x12, 0x20,
	0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x22,
	0xb0, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x78,
	0x69, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x78,
	0x69, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x4c, 0x61,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x4c, 0x61, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x75, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x75, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x61, 0x6d, 0x65,
	0x55, 0x7a, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x55, 0x7a,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x32, 0xc6, 0x02, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12,
	0x20, 0x2e, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1b, 0x2e, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x22, 0x00,
	0x12, 0x5b, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x26, 0x2e, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x27, 0x2e, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x44, 0x0a,
	0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x20, 0x2e, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x06, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x22, 0x2e,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x1b, 0x5a, 0x19, 0x67,
	0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_product_proto_rawDescOnce sync.Once
	file_product_proto_rawDescData = file_product_proto_rawDesc
)

func file_product_proto_rawDescGZIP() []byte {
	file_product_proto_rawDescOnce.Do(func() {
		file_product_proto_rawDescData = protoimpl.X.CompressGZIP(file_product_proto_rawDescData)
	})
	return file_product_proto_rawDescData
}

var file_product_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_product_proto_goTypes = []interface{}{
	(*ProductDetails)(nil),         // 0: document_service.ProductDetails
	(*ProductId)(nil),              // 1: document_service.ProductId
	(*GetAllProductRequest)(nil),   // 2: document_service.GetAllProductRequest
	(*GetAllProductResponse)(nil),  // 3: document_service.GetAllProductResponse
	(*GetAllProducts)(nil),         // 4: document_service.GetAllProducts
	(*ProductsList)(nil),           // 5: document_service.ProductsList
	(*ReloadProductReq)(nil),       // 6: document_service.ReloadProductReq
	(*ReloadData)(nil),             // 7: document_service.ReloadData
	(*ProductRequest)(nil),         // 8: document_service.ProductRequest
	(*Units)(nil),                  // 9: document_service.Units
	(*CreateUnit)(nil),             // 10: document_service.CreateUnit
	(*PackageNames)(nil),           // 11: document_service.PackageNames
	(*CreatePackageNames)(nil),     // 12: document_service.CreatePackageNames
	(*wrapperspb.StringValue)(nil), // 13: google.protobuf.StringValue
	(*emptypb.Empty)(nil),          // 14: google.protobuf.Empty
}
var file_product_proto_depIdxs = []int32{
	5,  // 0: document_service.GetAllProductResponse.products:type_name -> document_service.ProductsList
	8,  // 1: document_service.GetAllProducts.data:type_name -> document_service.ProductRequest
	11, // 2: document_service.ProductsList.packageNames:type_name -> document_service.PackageNames
	9,  // 3: document_service.ProductsList.units:type_name -> document_service.Units
	13, // 4: document_service.ProductsList.internationalCode:type_name -> google.protobuf.StringValue
	13, // 5: document_service.ProductsList.brandName:type_name -> google.protobuf.StringValue
	13, // 6: document_service.ProductsList.attributeName:type_name -> google.protobuf.StringValue
	7,  // 7: document_service.ReloadProductReq.data:type_name -> document_service.ReloadData
	11, // 8: document_service.ReloadData.packageNames:type_name -> document_service.PackageNames
	9,  // 9: document_service.ReloadData.units:type_name -> document_service.Units
	13, // 10: document_service.ReloadData.internationalCode:type_name -> google.protobuf.StringValue
	13, // 11: document_service.ReloadData.brandName:type_name -> google.protobuf.StringValue
	13, // 12: document_service.ReloadData.attributeName:type_name -> google.protobuf.StringValue
	12, // 13: document_service.ProductRequest.packageNames:type_name -> document_service.CreatePackageNames
	10, // 14: document_service.ProductRequest.units:type_name -> document_service.CreateUnit
	13, // 15: document_service.ProductRequest.internationalCode:type_name -> google.protobuf.StringValue
	13, // 16: document_service.ProductRequest.brand_name:type_name -> google.protobuf.StringValue
	13, // 17: document_service.ProductRequest.attribute_name:type_name -> google.protobuf.StringValue
	8,  // 18: document_service.ProductService.Create:input_type -> document_service.ProductRequest
	2,  // 19: document_service.ProductService.GetAll:input_type -> document_service.GetAllProductRequest
	0,  // 20: document_service.ProductService.Delete:input_type -> document_service.ProductDetails
	6,  // 21: document_service.ProductService.Reload:input_type -> document_service.ReloadProductReq
	1,  // 22: document_service.ProductService.Create:output_type -> document_service.ProductId
	3,  // 23: document_service.ProductService.GetAll:output_type -> document_service.GetAllProductResponse
	14, // 24: document_service.ProductService.Delete:output_type -> google.protobuf.Empty
	14, // 25: document_service.ProductService.Reload:output_type -> google.protobuf.Empty
	22, // [22:26] is the sub-list for method output_type
	18, // [18:22] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_product_proto_init() }
func file_product_proto_init() {
	if File_product_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_product_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllProductRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllProductResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllProducts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductsList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReloadProductReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReloadData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Units); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUnit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackageNames); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePackageNames); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_product_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_product_proto_goTypes,
		DependencyIndexes: file_product_proto_depIdxs,
		MessageInfos:      file_product_proto_msgTypes,
	}.Build()
	File_product_proto = out.File
	file_product_proto_rawDesc = nil
	file_product_proto_goTypes = nil
	file_product_proto_depIdxs = nil
}
