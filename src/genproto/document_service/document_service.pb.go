// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: document_service.proto

package document_service

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DocumentData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DocumentJson string `protobuf:"bytes,2,opt,name=document_json,json=documentJson,proto3" json:"document_json,omitempty"`
	HtmlUz       string `protobuf:"bytes,3,opt,name=html_uz,json=htmlUz,proto3" json:"html_uz,omitempty"`
	HtmlRu       string `protobuf:"bytes,4,opt,name=html_ru,json=htmlRu,proto3" json:"html_ru,omitempty"`
	PdfUrlUz     string `protobuf:"bytes,5,opt,name=pdf_url_uz,json=pdfUrlUz,proto3" json:"pdf_url_uz,omitempty"`
	PdfUrlRu     string `protobuf:"bytes,6,opt,name=pdf_url_ru,json=pdfUrlRu,proto3" json:"pdf_url_ru,omitempty"`
	CreatedAt    string `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt    string `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Status       string `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
	PageStatus   string `protobuf:"bytes,10,opt,name=page_status,json=pageStatus,proto3" json:"page_status,omitempty"`
}

func (x *DocumentData) Reset() {
	*x = DocumentData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_document_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentData) ProtoMessage() {}

func (x *DocumentData) ProtoReflect() protoreflect.Message {
	mi := &file_document_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentData.ProtoReflect.Descriptor instead.
func (*DocumentData) Descriptor() ([]byte, []int) {
	return file_document_service_proto_rawDescGZIP(), []int{0}
}

func (x *DocumentData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DocumentData) GetDocumentJson() string {
	if x != nil {
		return x.DocumentJson
	}
	return ""
}

func (x *DocumentData) GetHtmlUz() string {
	if x != nil {
		return x.HtmlUz
	}
	return ""
}

func (x *DocumentData) GetHtmlRu() string {
	if x != nil {
		return x.HtmlRu
	}
	return ""
}

func (x *DocumentData) GetPdfUrlUz() string {
	if x != nil {
		return x.PdfUrlUz
	}
	return ""
}

func (x *DocumentData) GetPdfUrlRu() string {
	if x != nil {
		return x.PdfUrlRu
	}
	return ""
}

func (x *DocumentData) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *DocumentData) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *DocumentData) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *DocumentData) GetPageStatus() string {
	if x != nil {
		return x.PageStatus
	}
	return ""
}

type UpdateStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Id     string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Sign   string `protobuf:"bytes,3,opt,name=sign,proto3" json:"sign,omitempty"`
}

func (x *UpdateStatusReq) Reset() {
	*x = UpdateStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_document_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateStatusReq) ProtoMessage() {}

func (x *UpdateStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_document_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateStatusReq.ProtoReflect.Descriptor instead.
func (*UpdateStatusReq) Descriptor() ([]byte, []int) {
	return file_document_service_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateStatusReq) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *UpdateStatusReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateStatusReq) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

type Ids struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsArchive int32    `protobuf:"varint,1,opt,name=isArchive,proto3" json:"isArchive,omitempty"`
	Ids       []string `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *Ids) Reset() {
	*x = Ids{}
	if protoimpl.UnsafeEnabled {
		mi := &file_document_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ids) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ids) ProtoMessage() {}

func (x *Ids) ProtoReflect() protoreflect.Message {
	mi := &file_document_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ids.ProtoReflect.Descriptor instead.
func (*Ids) Descriptor() ([]byte, []int) {
	return file_document_service_proto_rawDescGZIP(), []int{2}
}

func (x *Ids) GetIsArchive() int32 {
	if x != nil {
		return x.IsArchive
	}
	return 0
}

func (x *Ids) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type ById struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ById) Reset() {
	*x = ById{}
	if protoimpl.UnsafeEnabled {
		mi := &file_document_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ById) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ById) ProtoMessage() {}

func (x *ById) ProtoReflect() protoreflect.Message {
	mi := &file_document_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ById.ProtoReflect.Descriptor instead.
func (*ById) Descriptor() ([]byte, []int) {
	return file_document_service_proto_rawDescGZIP(), []int{3}
}

func (x *ById) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type UpdateReadReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	IsRead      int32  `protobuf:"varint,2,opt,name=IsRead,proto3" json:"IsRead,omitempty"`
	IsReadAgent int32  `protobuf:"varint,3,opt,name=IsReadAgent,proto3" json:"IsReadAgent,omitempty"`
}

func (x *UpdateReadReq) Reset() {
	*x = UpdateReadReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_document_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateReadReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateReadReq) ProtoMessage() {}

func (x *UpdateReadReq) ProtoReflect() protoreflect.Message {
	mi := &file_document_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateReadReq.ProtoReflect.Descriptor instead.
func (*UpdateReadReq) Descriptor() ([]byte, []int) {
	return file_document_service_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateReadReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateReadReq) GetIsRead() int32 {
	if x != nil {
		return x.IsRead
	}
	return 0
}

func (x *UpdateReadReq) GetIsReadAgent() int32 {
	if x != nil {
		return x.IsReadAgent
	}
	return 0
}

type ListDocumentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page         int32    `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Limit        int32    `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	DocType      string   `protobuf:"bytes,3,opt,name=docType,proto3" json:"docType,omitempty"`
	OwnerTin     string   `protobuf:"bytes,4,opt,name=ownerTin,proto3" json:"ownerTin,omitempty"`
	PartnerTin   string   `protobuf:"bytes,5,opt,name=partnerTin,proto3" json:"partnerTin,omitempty"`
	AgentTin     string   `protobuf:"bytes,6,opt,name=agentTin,proto3" json:"agentTin,omitempty"`
	Search       string   `protobuf:"bytes,7,opt,name=search,proto3" json:"search,omitempty"`
	FromDate     string   `protobuf:"bytes,8,opt,name=fromDate,proto3" json:"fromDate,omitempty"`
	ToDate       string   `protobuf:"bytes,9,opt,name=toDate,proto3" json:"toDate,omitempty"`
	OwnerName    string   `protobuf:"bytes,10,opt,name=ownerName,proto3" json:"ownerName,omitempty"`
	PartnerName  string   `protobuf:"bytes,11,opt,name=partnerName,proto3" json:"partnerName,omitempty"`
	AgentName    string   `protobuf:"bytes,12,opt,name=agentName,proto3" json:"agentName,omitempty"`
	DocStatus    string   `protobuf:"bytes,13,opt,name=docStatus,proto3" json:"docStatus,omitempty"`
	Commission   bool     `protobuf:"varint,14,opt,name=commission,proto3" json:"commission,omitempty"`
	Unilateral   bool     `protobuf:"varint,15,opt,name=unilateral,proto3" json:"unilateral,omitempty"`
	Marked       bool     `protobuf:"varint,16,opt,name=marked,proto3" json:"marked,omitempty"`
	Hasbenefit   bool     `protobuf:"varint,17,opt,name=hasbenefit,proto3" json:"hasbenefit,omitempty"`
	IsSave       string   `protobuf:"bytes,18,opt,name=isSave,proto3" json:"isSave,omitempty"`
	TotalSum     string   `protobuf:"bytes,19,opt,name=totalSum,proto3" json:"totalSum,omitempty"`
	AgentPinfl   string   `protobuf:"bytes,20,opt,name=agentPinfl,proto3" json:"agentPinfl,omitempty"`
	PartnerPinfl string   `protobuf:"bytes,21,opt,name=partnerPinfl,proto3" json:"partnerPinfl,omitempty"`
	All          string   `protobuf:"bytes,22,opt,name=all,proto3" json:"all,omitempty"`
	BranchCodes  []string `protobuf:"bytes,23,rep,name=branchCodes,proto3" json:"branchCodes,omitempty"`
	FacturaType  int32    `protobuf:"varint,24,opt,name=facturaType,proto3" json:"facturaType,omitempty"`
}

func (x *ListDocumentReq) Reset() {
	*x = ListDocumentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_document_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDocumentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDocumentReq) ProtoMessage() {}

func (x *ListDocumentReq) ProtoReflect() protoreflect.Message {
	mi := &file_document_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDocumentReq.ProtoReflect.Descriptor instead.
func (*ListDocumentReq) Descriptor() ([]byte, []int) {
	return file_document_service_proto_rawDescGZIP(), []int{5}
}

func (x *ListDocumentReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListDocumentReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListDocumentReq) GetDocType() string {
	if x != nil {
		return x.DocType
	}
	return ""
}

func (x *ListDocumentReq) GetOwnerTin() string {
	if x != nil {
		return x.OwnerTin
	}
	return ""
}

func (x *ListDocumentReq) GetPartnerTin() string {
	if x != nil {
		return x.PartnerTin
	}
	return ""
}

func (x *ListDocumentReq) GetAgentTin() string {
	if x != nil {
		return x.AgentTin
	}
	return ""
}

func (x *ListDocumentReq) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *ListDocumentReq) GetFromDate() string {
	if x != nil {
		return x.FromDate
	}
	return ""
}

func (x *ListDocumentReq) GetToDate() string {
	if x != nil {
		return x.ToDate
	}
	return ""
}

func (x *ListDocumentReq) GetOwnerName() string {
	if x != nil {
		return x.OwnerName
	}
	return ""
}

func (x *ListDocumentReq) GetPartnerName() string {
	if x != nil {
		return x.PartnerName
	}
	return ""
}

func (x *ListDocumentReq) GetAgentName() string {
	if x != nil {
		return x.AgentName
	}
	return ""
}

func (x *ListDocumentReq) GetDocStatus() string {
	if x != nil {
		return x.DocStatus
	}
	return ""
}

func (x *ListDocumentReq) GetCommission() bool {
	if x != nil {
		return x.Commission
	}
	return false
}

func (x *ListDocumentReq) GetUnilateral() bool {
	if x != nil {
		return x.Unilateral
	}
	return false
}

func (x *ListDocumentReq) GetMarked() bool {
	if x != nil {
		return x.Marked
	}
	return false
}

func (x *ListDocumentReq) GetHasbenefit() bool {
	if x != nil {
		return x.Hasbenefit
	}
	return false
}

func (x *ListDocumentReq) GetIsSave() string {
	if x != nil {
		return x.IsSave
	}
	return ""
}

func (x *ListDocumentReq) GetTotalSum() string {
	if x != nil {
		return x.TotalSum
	}
	return ""
}

func (x *ListDocumentReq) GetAgentPinfl() string {
	if x != nil {
		return x.AgentPinfl
	}
	return ""
}

func (x *ListDocumentReq) GetPartnerPinfl() string {
	if x != nil {
		return x.PartnerPinfl
	}
	return ""
}

func (x *ListDocumentReq) GetAll() string {
	if x != nil {
		return x.All
	}
	return ""
}

func (x *ListDocumentReq) GetBranchCodes() []string {
	if x != nil {
		return x.BranchCodes
	}
	return nil
}

func (x *ListDocumentReq) GetFacturaType() int32 {
	if x != nil {
		return x.FacturaType
	}
	return 0
}

type ListDocumentResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Documents      []*Document    `protobuf:"bytes,1,rep,name=documents,proto3" json:"documents,omitempty"`
	Count          int32          `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	CountDocuments *CountDocument `protobuf:"bytes,3,opt,name=countDocuments,proto3" json:"countDocuments,omitempty"`
}

func (x *ListDocumentResp) Reset() {
	*x = ListDocumentResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_document_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDocumentResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDocumentResp) ProtoMessage() {}

func (x *ListDocumentResp) ProtoReflect() protoreflect.Message {
	mi := &file_document_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDocumentResp.ProtoReflect.Descriptor instead.
func (*ListDocumentResp) Descriptor() ([]byte, []int) {
	return file_document_service_proto_rawDescGZIP(), []int{6}
}

func (x *ListDocumentResp) GetDocuments() []*Document {
	if x != nil {
		return x.Documents
	}
	return nil
}

func (x *ListDocumentResp) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ListDocumentResp) GetCountDocuments() *CountDocument {
	if x != nil {
		return x.CountDocuments
	}
	return nil
}

type CountDocument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Act              int32 `protobuf:"varint,1,opt,name=act,proto3" json:"act,omitempty"`
	Factura          int32 `protobuf:"varint,2,opt,name=factura,proto3" json:"factura,omitempty"`
	BFactura         int32 `protobuf:"varint,3,opt,name=bFactura,proto3" json:"bFactura,omitempty"`
	Empowerment      int32 `protobuf:"varint,4,opt,name=empowerment,proto3" json:"empowerment,omitempty"`
	CalculationTable int32 `protobuf:"varint,5,opt,name=calculationTable,proto3" json:"calculationTable,omitempty"`
	VerificationAct  int32 `protobuf:"varint,6,opt,name=verificationAct,proto3" json:"verificationAct,omitempty"`
	Waybill          int32 `protobuf:"varint,7,opt,name=waybill,proto3" json:"waybill,omitempty"`
	Inbox            int32 `protobuf:"varint,8,opt,name=inbox,proto3" json:"inbox,omitempty"`
	Sends            int32 `protobuf:"varint,9,opt,name=sends,proto3" json:"sends,omitempty"`
	Agent            int32 `protobuf:"varint,10,opt,name=agent,proto3" json:"agent,omitempty"`
	Contract         int32 `protobuf:"varint,11,opt,name=contract,proto3" json:"contract,omitempty"`
}

func (x *CountDocument) Reset() {
	*x = CountDocument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_document_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountDocument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountDocument) ProtoMessage() {}

func (x *CountDocument) ProtoReflect() protoreflect.Message {
	mi := &file_document_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountDocument.ProtoReflect.Descriptor instead.
func (*CountDocument) Descriptor() ([]byte, []int) {
	return file_document_service_proto_rawDescGZIP(), []int{7}
}

func (x *CountDocument) GetAct() int32 {
	if x != nil {
		return x.Act
	}
	return 0
}

func (x *CountDocument) GetFactura() int32 {
	if x != nil {
		return x.Factura
	}
	return 0
}

func (x *CountDocument) GetBFactura() int32 {
	if x != nil {
		return x.BFactura
	}
	return 0
}

func (x *CountDocument) GetEmpowerment() int32 {
	if x != nil {
		return x.Empowerment
	}
	return 0
}

func (x *CountDocument) GetCalculationTable() int32 {
	if x != nil {
		return x.CalculationTable
	}
	return 0
}

func (x *CountDocument) GetVerificationAct() int32 {
	if x != nil {
		return x.VerificationAct
	}
	return 0
}

func (x *CountDocument) GetWaybill() int32 {
	if x != nil {
		return x.Waybill
	}
	return 0
}

func (x *CountDocument) GetInbox() int32 {
	if x != nil {
		return x.Inbox
	}
	return 0
}

func (x *CountDocument) GetSends() int32 {
	if x != nil {
		return x.Sends
	}
	return 0
}

func (x *CountDocument) GetAgent() int32 {
	if x != nil {
		return x.Agent
	}
	return 0
}

func (x *CountDocument) GetContract() int32 {
	if x != nil {
		return x.Contract
	}
	return 0
}

type Document struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocId                   string    `protobuf:"bytes,1,opt,name=docId,proto3" json:"docId,omitempty"`
	DocDate                 string    `protobuf:"bytes,2,opt,name=docDate,proto3" json:"docDate,omitempty"`
	DocNo                   string    `protobuf:"bytes,3,opt,name=docNo,proto3" json:"docNo,omitempty"`
	DocType                 string    `protobuf:"bytes,4,opt,name=docType,proto3" json:"docType,omitempty"`
	DocStatus               string    `protobuf:"bytes,5,opt,name=docStatus,proto3" json:"docStatus,omitempty"`
	ContractDocNo           string    `protobuf:"bytes,6,opt,name=contractDocNo,proto3" json:"contractDocNo,omitempty"`
	ContractDocDate         string    `protobuf:"bytes,7,opt,name=contractDocDate,proto3" json:"contractDocDate,omitempty"`
	TotalDeliverySum        float32   `protobuf:"fixed32,8,opt,name=totalDeliverySum,proto3" json:"totalDeliverySum,omitempty"`
	TotalDeliverySumWithVat float32   `protobuf:"fixed32,9,opt,name=totalDeliverySumWithVat,proto3" json:"totalDeliverySumWithVat,omitempty"`
	TotalSum                float32   `protobuf:"fixed32,10,opt,name=totalSum,proto3" json:"totalSum,omitempty"`
	TotalVatSum             float32   `protobuf:"fixed32,11,opt,name=totalVatSum,proto3" json:"totalVatSum,omitempty"`
	OwnerTin                string    `protobuf:"bytes,12,opt,name=ownerTin,proto3" json:"ownerTin,omitempty"`
	OwnerName               string    `protobuf:"bytes,13,opt,name=ownerName,proto3" json:"ownerName,omitempty"`
	OwnerBranchCode         string    `protobuf:"bytes,14,opt,name=ownerBranchCode,proto3" json:"ownerBranchCode,omitempty"`
	PartnerTin              string    `protobuf:"bytes,15,opt,name=partnerTin,proto3" json:"partnerTin,omitempty"`
	PartnerName             string    `protobuf:"bytes,16,opt,name=partnerName,proto3" json:"partnerName,omitempty"`
	PartnerBranchCode       string    `protobuf:"bytes,17,opt,name=partnerBranchCode,proto3" json:"partnerBranchCode,omitempty"`
	AgentTin                string    `protobuf:"bytes,18,opt,name=agentTin,proto3" json:"agentTin,omitempty"`
	AgentName               string    `protobuf:"bytes,19,opt,name=agentName,proto3" json:"agentName,omitempty"`
	AgentBranchCode         string    `protobuf:"bytes,20,opt,name=agentBranchCode,proto3" json:"agentBranchCode,omitempty"`
	IsSave                  string    `protobuf:"bytes,21,opt,name=isSave,proto3" json:"isSave,omitempty"`
	CreatedAt               string    `protobuf:"bytes,22,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt               string    `protobuf:"bytes,23,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	Commission              bool      `protobuf:"varint,24,opt,name=commission,proto3" json:"commission,omitempty"`
	Unilateral              bool      `protobuf:"varint,25,opt,name=unilateral,proto3" json:"unilateral,omitempty"`
	Marked                  bool      `protobuf:"varint,26,opt,name=marked,proto3" json:"marked,omitempty"`
	Hasbenefit              bool      `protobuf:"varint,27,opt,name=hasbenefit,proto3" json:"hasbenefit,omitempty"`
	IsRead                  int32     `protobuf:"varint,28,opt,name=isRead,proto3" json:"isRead,omitempty"`
	IsReadAgent             int32     `protobuf:"varint,29,opt,name=isReadAgent,proto3" json:"isReadAgent,omitempty"`
	Clients                 []*Client `protobuf:"bytes,30,rep,name=clients,proto3" json:"clients,omitempty"`
	FacturaType             int32     `protobuf:"varint,31,opt,name=facturaType,proto3" json:"facturaType,omitempty"`
}

func (x *Document) Reset() {
	*x = Document{}
	if protoimpl.UnsafeEnabled {
		mi := &file_document_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Document) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Document) ProtoMessage() {}

func (x *Document) ProtoReflect() protoreflect.Message {
	mi := &file_document_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Document.ProtoReflect.Descriptor instead.
func (*Document) Descriptor() ([]byte, []int) {
	return file_document_service_proto_rawDescGZIP(), []int{8}
}

func (x *Document) GetDocId() string {
	if x != nil {
		return x.DocId
	}
	return ""
}

func (x *Document) GetDocDate() string {
	if x != nil {
		return x.DocDate
	}
	return ""
}

func (x *Document) GetDocNo() string {
	if x != nil {
		return x.DocNo
	}
	return ""
}

func (x *Document) GetDocType() string {
	if x != nil {
		return x.DocType
	}
	return ""
}

func (x *Document) GetDocStatus() string {
	if x != nil {
		return x.DocStatus
	}
	return ""
}

func (x *Document) GetContractDocNo() string {
	if x != nil {
		return x.ContractDocNo
	}
	return ""
}

func (x *Document) GetContractDocDate() string {
	if x != nil {
		return x.ContractDocDate
	}
	return ""
}

func (x *Document) GetTotalDeliverySum() float32 {
	if x != nil {
		return x.TotalDeliverySum
	}
	return 0
}

func (x *Document) GetTotalDeliverySumWithVat() float32 {
	if x != nil {
		return x.TotalDeliverySumWithVat
	}
	return 0
}

func (x *Document) GetTotalSum() float32 {
	if x != nil {
		return x.TotalSum
	}
	return 0
}

func (x *Document) GetTotalVatSum() float32 {
	if x != nil {
		return x.TotalVatSum
	}
	return 0
}

func (x *Document) GetOwnerTin() string {
	if x != nil {
		return x.OwnerTin
	}
	return ""
}

func (x *Document) GetOwnerName() string {
	if x != nil {
		return x.OwnerName
	}
	return ""
}

func (x *Document) GetOwnerBranchCode() string {
	if x != nil {
		return x.OwnerBranchCode
	}
	return ""
}

func (x *Document) GetPartnerTin() string {
	if x != nil {
		return x.PartnerTin
	}
	return ""
}

func (x *Document) GetPartnerName() string {
	if x != nil {
		return x.PartnerName
	}
	return ""
}

func (x *Document) GetPartnerBranchCode() string {
	if x != nil {
		return x.PartnerBranchCode
	}
	return ""
}

func (x *Document) GetAgentTin() string {
	if x != nil {
		return x.AgentTin
	}
	return ""
}

func (x *Document) GetAgentName() string {
	if x != nil {
		return x.AgentName
	}
	return ""
}

func (x *Document) GetAgentBranchCode() string {
	if x != nil {
		return x.AgentBranchCode
	}
	return ""
}

func (x *Document) GetIsSave() string {
	if x != nil {
		return x.IsSave
	}
	return ""
}

func (x *Document) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Document) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *Document) GetCommission() bool {
	if x != nil {
		return x.Commission
	}
	return false
}

func (x *Document) GetUnilateral() bool {
	if x != nil {
		return x.Unilateral
	}
	return false
}

func (x *Document) GetMarked() bool {
	if x != nil {
		return x.Marked
	}
	return false
}

func (x *Document) GetHasbenefit() bool {
	if x != nil {
		return x.Hasbenefit
	}
	return false
}

func (x *Document) GetIsRead() int32 {
	if x != nil {
		return x.IsRead
	}
	return 0
}

func (x *Document) GetIsReadAgent() int32 {
	if x != nil {
		return x.IsReadAgent
	}
	return 0
}

func (x *Document) GetClients() []*Client {
	if x != nil {
		return x.Clients
	}
	return nil
}

func (x *Document) GetFacturaType() int32 {
	if x != nil {
		return x.FacturaType
	}
	return 0
}

type Client struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tin        string `protobuf:"bytes,1,opt,name=tin,proto3" json:"tin,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	BranchCode string `protobuf:"bytes,3,opt,name=branchCode,proto3" json:"branchCode,omitempty"`
	DocId      string `protobuf:"bytes,5,opt,name=docId,proto3" json:"docId,omitempty"`
	Status     bool   `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`
	IsRead     bool   `protobuf:"varint,7,opt,name=isRead,proto3" json:"isRead,omitempty"`
}

func (x *Client) Reset() {
	*x = Client{}
	if protoimpl.UnsafeEnabled {
		mi := &file_document_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Client) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Client) ProtoMessage() {}

func (x *Client) ProtoReflect() protoreflect.Message {
	mi := &file_document_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Client.ProtoReflect.Descriptor instead.
func (*Client) Descriptor() ([]byte, []int) {
	return file_document_service_proto_rawDescGZIP(), []int{9}
}

func (x *Client) GetTin() string {
	if x != nil {
		return x.Tin
	}
	return ""
}

func (x *Client) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Client) GetBranchCode() string {
	if x != nil {
		return x.BranchCode
	}
	return ""
}

func (x *Client) GetDocId() string {
	if x != nil {
		return x.DocId
	}
	return ""
}

func (x *Client) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *Client) GetIsRead() bool {
	if x != nil {
		return x.IsRead
	}
	return false
}

var File_document_service_proto protoreflect.FileDescriptor

var file_document_service_proto_rawDesc = []byte{
	0x0a, 0x16, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa8, 0x02, 0x0a, 0x0c, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x17, 0x0a,
	0x07, 0x68, 0x74, 0x6d, 0x6c, 0x5f, 0x75, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x68, 0x74, 0x6d, 0x6c, 0x55, 0x7a, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x74, 0x6d, 0x6c, 0x5f, 0x72,
	0x75, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x74, 0x6d, 0x6c, 0x52, 0x75, 0x12,
	0x1c, 0x0a, 0x0a, 0x70, 0x64, 0x66, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x75, 0x7a, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x64, 0x66, 0x55, 0x72, 0x6c, 0x55, 0x7a, 0x12, 0x1c, 0x0a,
	0x0a, 0x70, 0x64, 0x66, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x72, 0x75, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x64, 0x66, 0x55, 0x72, 0x6c, 0x52, 0x75, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x4d, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x67,
	0x6e, 0x22, 0x35, 0x0a, 0x03, 0x49, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x73, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x16, 0x0a, 0x04, 0x42, 0x79, 0x49, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x59, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65,
	0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x52, 0x65, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x49, 0x73, 0x52, 0x65, 0x61, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x73, 0x52,
	0x65, 0x61, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x49, 0x73, 0x52, 0x65, 0x61, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x22, 0xbb, 0x05, 0x0a, 0x0f,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6f, 0x63,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6f, 0x63, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x69, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x69, 0x6e, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x54, 0x69, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x54, 0x69, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x6f, 0x63, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x6f, 0x63, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61,
	0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x75, 0x6e, 0x69, 0x6c, 0x61, 0x74, 0x65,
	0x72, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x68,
	0x61, 0x73, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x68, 0x61, 0x73, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x69,
	0x73, 0x53, 0x61, 0x76, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x53,
	0x61, 0x76, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x6d, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x6d, 0x12,
	0x1e, 0x0a, 0x0a, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x69, 0x6e, 0x66, 0x6c, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x69, 0x6e, 0x66, 0x6c, 0x12,
	0x22, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x50, 0x69, 0x6e, 0x66, 0x6c, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x50, 0x69,
	0x6e, 0x66, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x61, 0x6c, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x43,
	0x6f, 0x64, 0x65, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x61, 0x63, 0x74, 0x75,
	0x72, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x66, 0x61,
	0x63, 0x74, 0x75, 0x72, 0x61, 0x54, 0x79, 0x70, 0x65, 0x22, 0xab, 0x01, 0x0a, 0x10, 0x4c, 0x69,
	0x73, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x38,
	0x0a, 0x09, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x47,
	0x0a, 0x0e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xc7, 0x02, 0x0a, 0x0d, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x63, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x61, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66,
	0x61, 0x63, 0x74, 0x75, 0x72, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x66, 0x61,
	0x63, 0x74, 0x75, 0x72, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x46, 0x61, 0x63, 0x74, 0x75, 0x72,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x46, 0x61, 0x63, 0x74, 0x75, 0x72,
	0x61, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x65, 0x6d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x63,
	0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x61, 0x79,
	0x62, 0x69, 0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x77, 0x61, 0x79, 0x62,
	0x69, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x65, 0x6e,
	0x64, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x65, 0x6e, 0x64, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x22, 0x90, 0x08, 0x0a, 0x08, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x64, 0x6f, 0x63, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64,
	0x6f, 0x63, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6f, 0x63, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6f, 0x63, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x64, 0x6f, 0x63, 0x4e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64,
	0x6f, 0x63, 0x4e, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6f, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6f, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x64, 0x6f, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x64, 0x6f, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x6f, 0x63, 0x4e, 0x6f, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x6f, 0x63,
	0x4e, 0x6f, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x6f,
	0x63, 0x44, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x6f, 0x63, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x10,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x75, 0x6d,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x75, 0x6d, 0x12, 0x38, 0x0a, 0x17, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x75, 0x6d, 0x57, 0x69, 0x74, 0x68,
	0x56, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x75, 0x6d, 0x57, 0x69, 0x74, 0x68, 0x56,
	0x61, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x6d, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x6d, 0x12, 0x20,
	0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x61, 0x74, 0x53, 0x75, 0x6d, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x61, 0x74, 0x53, 0x75, 0x6d,
	0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x69, 0x6e, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x54,
	0x69, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x54, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6e,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x53, 0x61,
	0x76, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x53, 0x61, 0x76, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a,
	0x75, 0x6e, 0x69, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x75, 0x6e, 0x69, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x61, 0x73, 0x62, 0x65, 0x6e, 0x65, 0x66,
	0x69, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x62, 0x65, 0x6e,
	0x65, 0x66, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x52, 0x65, 0x61, 0x64, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x73, 0x52, 0x65, 0x61, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x69, 0x73, 0x52, 0x65, 0x61, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x69, 0x73, 0x52, 0x65, 0x61, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x32,
	0x0a, 0x07, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x06, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x74, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x69,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x6f, 0x63, 0x49, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x52, 0x65, 0x61, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x52, 0x65, 0x61, 0x64, 0x32, 0xa1, 0x03, 0x0a, 0x0f,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x3e, 0x0a, 0x06, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x12, 0x1a, 0x2e, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x51, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x21, 0x2e, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x45, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61, 0x64,
	0x12, 0x1f, 0x2e, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65,
	0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x39, 0x0a, 0x06, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x15, 0x2e, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x64, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x16,
	0x2e, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x42, 0x79, 0x49, 0x64, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x3d, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x16, 0x2e, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x79, 0x49, 0x64, 0x1a,
	0x1e, 0x2e, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42,
	0x1b, 0x5a, 0x19, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_document_service_proto_rawDescOnce sync.Once
	file_document_service_proto_rawDescData = file_document_service_proto_rawDesc
)

func file_document_service_proto_rawDescGZIP() []byte {
	file_document_service_proto_rawDescOnce.Do(func() {
		file_document_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_document_service_proto_rawDescData)
	})
	return file_document_service_proto_rawDescData
}

var file_document_service_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_document_service_proto_goTypes = []interface{}{
	(*DocumentData)(nil),     // 0: document_service.DocumentData
	(*UpdateStatusReq)(nil),  // 1: document_service.UpdateStatusReq
	(*Ids)(nil),              // 2: document_service.Ids
	(*ById)(nil),             // 3: document_service.ById
	(*UpdateReadReq)(nil),    // 4: document_service.UpdateReadReq
	(*ListDocumentReq)(nil),  // 5: document_service.ListDocumentReq
	(*ListDocumentResp)(nil), // 6: document_service.ListDocumentResp
	(*CountDocument)(nil),    // 7: document_service.CountDocument
	(*Document)(nil),         // 8: document_service.Document
	(*Client)(nil),           // 9: document_service.Client
	(*emptypb.Empty)(nil),    // 10: google.protobuf.Empty
}
var file_document_service_proto_depIdxs = []int32{
	8,  // 0: document_service.ListDocumentResp.documents:type_name -> document_service.Document
	7,  // 1: document_service.ListDocumentResp.countDocuments:type_name -> document_service.CountDocument
	9,  // 2: document_service.Document.clients:type_name -> document_service.Client
	8,  // 3: document_service.DocumentService.Upsert:input_type -> document_service.Document
	5,  // 4: document_service.DocumentService.GetAll:input_type -> document_service.ListDocumentReq
	4,  // 5: document_service.DocumentService.UpdateRead:input_type -> document_service.UpdateReadReq
	2,  // 6: document_service.DocumentService.Update:input_type -> document_service.Ids
	3,  // 7: document_service.DocumentService.Delete:input_type -> document_service.ById
	3,  // 8: document_service.DocumentService.Get:input_type -> document_service.ById
	10, // 9: document_service.DocumentService.Upsert:output_type -> google.protobuf.Empty
	6,  // 10: document_service.DocumentService.GetAll:output_type -> document_service.ListDocumentResp
	10, // 11: document_service.DocumentService.UpdateRead:output_type -> google.protobuf.Empty
	10, // 12: document_service.DocumentService.Update:output_type -> google.protobuf.Empty
	10, // 13: document_service.DocumentService.Delete:output_type -> google.protobuf.Empty
	0,  // 14: document_service.DocumentService.Get:output_type -> document_service.DocumentData
	9,  // [9:15] is the sub-list for method output_type
	3,  // [3:9] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_document_service_proto_init() }
func file_document_service_proto_init() {
	if File_document_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_document_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_document_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_document_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ids); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_document_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ById); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_document_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateReadReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_document_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDocumentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_document_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDocumentResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_document_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountDocument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_document_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Document); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_document_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Client); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_document_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_document_service_proto_goTypes,
		DependencyIndexes: file_document_service_proto_depIdxs,
		MessageInfos:      file_document_service_proto_msgTypes,
	}.Build()
	File_document_service_proto = out.File
	file_document_service_proto_rawDesc = nil
	file_document_service_proto_goTypes = nil
	file_document_service_proto_depIdxs = nil
}
