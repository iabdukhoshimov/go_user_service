// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: district.proto

package document_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DistrictServiceClient is the client API for DistrictService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DistrictServiceClient interface {
	Create(ctx context.Context, in *CreateDistrict, opts ...grpc.CallOption) (*DistrictGet, error)
	GetList(ctx context.Context, in *GetListDistrictsRequest, opts ...grpc.CallOption) (*GetListDistrictsResponse, error)
	Get(ctx context.Context, in *DistrictId, opts ...grpc.CallOption) (*DistrictGet, error)
	Reload(ctx context.Context, in *ReloadDistrictsListRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Delete(ctx context.Context, in *DeleteDistrictRequest, opts ...grpc.CallOption) (*DeleteDistrict, error)
}

type districtServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDistrictServiceClient(cc grpc.ClientConnInterface) DistrictServiceClient {
	return &districtServiceClient{cc}
}

func (c *districtServiceClient) Create(ctx context.Context, in *CreateDistrict, opts ...grpc.CallOption) (*DistrictGet, error) {
	out := new(DistrictGet)
	err := c.cc.Invoke(ctx, "/document_service.DistrictService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *districtServiceClient) GetList(ctx context.Context, in *GetListDistrictsRequest, opts ...grpc.CallOption) (*GetListDistrictsResponse, error) {
	out := new(GetListDistrictsResponse)
	err := c.cc.Invoke(ctx, "/document_service.DistrictService/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *districtServiceClient) Get(ctx context.Context, in *DistrictId, opts ...grpc.CallOption) (*DistrictGet, error) {
	out := new(DistrictGet)
	err := c.cc.Invoke(ctx, "/document_service.DistrictService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *districtServiceClient) Reload(ctx context.Context, in *ReloadDistrictsListRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/document_service.DistrictService/Reload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *districtServiceClient) Delete(ctx context.Context, in *DeleteDistrictRequest, opts ...grpc.CallOption) (*DeleteDistrict, error) {
	out := new(DeleteDistrict)
	err := c.cc.Invoke(ctx, "/document_service.DistrictService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DistrictServiceServer is the server API for DistrictService service.
// All implementations must embed UnimplementedDistrictServiceServer
// for forward compatibility
type DistrictServiceServer interface {
	Create(context.Context, *CreateDistrict) (*DistrictGet, error)
	GetList(context.Context, *GetListDistrictsRequest) (*GetListDistrictsResponse, error)
	Get(context.Context, *DistrictId) (*DistrictGet, error)
	Reload(context.Context, *ReloadDistrictsListRequest) (*emptypb.Empty, error)
	Delete(context.Context, *DeleteDistrictRequest) (*DeleteDistrict, error)
	mustEmbedUnimplementedDistrictServiceServer()
}

// UnimplementedDistrictServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDistrictServiceServer struct {
}

func (UnimplementedDistrictServiceServer) Create(context.Context, *CreateDistrict) (*DistrictGet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedDistrictServiceServer) GetList(context.Context, *GetListDistrictsRequest) (*GetListDistrictsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedDistrictServiceServer) Get(context.Context, *DistrictId) (*DistrictGet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDistrictServiceServer) Reload(context.Context, *ReloadDistrictsListRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reload not implemented")
}
func (UnimplementedDistrictServiceServer) Delete(context.Context, *DeleteDistrictRequest) (*DeleteDistrict, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDistrictServiceServer) mustEmbedUnimplementedDistrictServiceServer() {}

// UnsafeDistrictServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DistrictServiceServer will
// result in compilation errors.
type UnsafeDistrictServiceServer interface {
	mustEmbedUnimplementedDistrictServiceServer()
}

func RegisterDistrictServiceServer(s grpc.ServiceRegistrar, srv DistrictServiceServer) {
	s.RegisterService(&DistrictService_ServiceDesc, srv)
}

func _DistrictService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDistrict)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistrictServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/document_service.DistrictService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistrictServiceServer).Create(ctx, req.(*CreateDistrict))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistrictService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListDistrictsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistrictServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/document_service.DistrictService/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistrictServiceServer).GetList(ctx, req.(*GetListDistrictsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistrictService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DistrictId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistrictServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/document_service.DistrictService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistrictServiceServer).Get(ctx, req.(*DistrictId))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistrictService_Reload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReloadDistrictsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistrictServiceServer).Reload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/document_service.DistrictService/Reload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistrictServiceServer).Reload(ctx, req.(*ReloadDistrictsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistrictService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDistrictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistrictServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/document_service.DistrictService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistrictServiceServer).Delete(ctx, req.(*DeleteDistrictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DistrictService_ServiceDesc is the grpc.ServiceDesc for DistrictService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DistrictService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "document_service.DistrictService",
	HandlerType: (*DistrictServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _DistrictService_Create_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _DistrictService_GetList_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _DistrictService_Get_Handler,
		},
		{
			MethodName: "Reload",
			Handler:    _DistrictService_Reload_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _DistrictService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "district.proto",
}
