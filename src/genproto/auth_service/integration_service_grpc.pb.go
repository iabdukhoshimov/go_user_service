// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: integration_service.proto

package auth_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IntegrationServiceClient is the client API for IntegrationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IntegrationServiceClient interface {
	CreateIntegration(ctx context.Context, in *CreateIntegrationRequest, opts ...grpc.CallOption) (*Integration, error)
	GetIntegrationByID(ctx context.Context, in *IntegrationPrimaryKey, opts ...grpc.CallOption) (*Integration, error)
	GetIntegrationListByIDs(ctx context.Context, in *IntegrationPrimaryKeyList, opts ...grpc.CallOption) (*GetIntegrationListResponse, error)
	GetIntegrationList(ctx context.Context, in *GetIntegrationListRequest, opts ...grpc.CallOption) (*GetIntegrationListResponse, error)
	UpdateIntegration(ctx context.Context, in *UpdateIntegrationRequest, opts ...grpc.CallOption) (*Integration, error)
	DeleteIntegration(ctx context.Context, in *IntegrationPrimaryKey, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetIntegrationSessions(ctx context.Context, in *IntegrationPrimaryKey, opts ...grpc.CallOption) (*GetIntegrationSessionsResponse, error)
	AddSessionToIntegration(ctx context.Context, in *AddSessionToIntegrationRequest, opts ...grpc.CallOption) (*AddSessionToIntegrationResponse, error)
	GetIntegrationToken(ctx context.Context, in *GetIntegrationTokenRequest, opts ...grpc.CallOption) (*Token, error)
	DeleteSessionFromIntegration(ctx context.Context, in *GetIntegrationTokenRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type integrationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIntegrationServiceClient(cc grpc.ClientConnInterface) IntegrationServiceClient {
	return &integrationServiceClient{cc}
}

func (c *integrationServiceClient) CreateIntegration(ctx context.Context, in *CreateIntegrationRequest, opts ...grpc.CallOption) (*Integration, error) {
	out := new(Integration)
	err := c.cc.Invoke(ctx, "/auth_service.IntegrationService/CreateIntegration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationServiceClient) GetIntegrationByID(ctx context.Context, in *IntegrationPrimaryKey, opts ...grpc.CallOption) (*Integration, error) {
	out := new(Integration)
	err := c.cc.Invoke(ctx, "/auth_service.IntegrationService/GetIntegrationByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationServiceClient) GetIntegrationListByIDs(ctx context.Context, in *IntegrationPrimaryKeyList, opts ...grpc.CallOption) (*GetIntegrationListResponse, error) {
	out := new(GetIntegrationListResponse)
	err := c.cc.Invoke(ctx, "/auth_service.IntegrationService/GetIntegrationListByIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationServiceClient) GetIntegrationList(ctx context.Context, in *GetIntegrationListRequest, opts ...grpc.CallOption) (*GetIntegrationListResponse, error) {
	out := new(GetIntegrationListResponse)
	err := c.cc.Invoke(ctx, "/auth_service.IntegrationService/GetIntegrationList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationServiceClient) UpdateIntegration(ctx context.Context, in *UpdateIntegrationRequest, opts ...grpc.CallOption) (*Integration, error) {
	out := new(Integration)
	err := c.cc.Invoke(ctx, "/auth_service.IntegrationService/UpdateIntegration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationServiceClient) DeleteIntegration(ctx context.Context, in *IntegrationPrimaryKey, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/auth_service.IntegrationService/DeleteIntegration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationServiceClient) GetIntegrationSessions(ctx context.Context, in *IntegrationPrimaryKey, opts ...grpc.CallOption) (*GetIntegrationSessionsResponse, error) {
	out := new(GetIntegrationSessionsResponse)
	err := c.cc.Invoke(ctx, "/auth_service.IntegrationService/GetIntegrationSessions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationServiceClient) AddSessionToIntegration(ctx context.Context, in *AddSessionToIntegrationRequest, opts ...grpc.CallOption) (*AddSessionToIntegrationResponse, error) {
	out := new(AddSessionToIntegrationResponse)
	err := c.cc.Invoke(ctx, "/auth_service.IntegrationService/AddSessionToIntegration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationServiceClient) GetIntegrationToken(ctx context.Context, in *GetIntegrationTokenRequest, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := c.cc.Invoke(ctx, "/auth_service.IntegrationService/GetIntegrationToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationServiceClient) DeleteSessionFromIntegration(ctx context.Context, in *GetIntegrationTokenRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/auth_service.IntegrationService/DeleteSessionFromIntegration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IntegrationServiceServer is the server API for IntegrationService service.
// All implementations must embed UnimplementedIntegrationServiceServer
// for forward compatibility
type IntegrationServiceServer interface {
	CreateIntegration(context.Context, *CreateIntegrationRequest) (*Integration, error)
	GetIntegrationByID(context.Context, *IntegrationPrimaryKey) (*Integration, error)
	GetIntegrationListByIDs(context.Context, *IntegrationPrimaryKeyList) (*GetIntegrationListResponse, error)
	GetIntegrationList(context.Context, *GetIntegrationListRequest) (*GetIntegrationListResponse, error)
	UpdateIntegration(context.Context, *UpdateIntegrationRequest) (*Integration, error)
	DeleteIntegration(context.Context, *IntegrationPrimaryKey) (*emptypb.Empty, error)
	GetIntegrationSessions(context.Context, *IntegrationPrimaryKey) (*GetIntegrationSessionsResponse, error)
	AddSessionToIntegration(context.Context, *AddSessionToIntegrationRequest) (*AddSessionToIntegrationResponse, error)
	GetIntegrationToken(context.Context, *GetIntegrationTokenRequest) (*Token, error)
	DeleteSessionFromIntegration(context.Context, *GetIntegrationTokenRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedIntegrationServiceServer()
}

// UnimplementedIntegrationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIntegrationServiceServer struct {
}

func (UnimplementedIntegrationServiceServer) CreateIntegration(context.Context, *CreateIntegrationRequest) (*Integration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIntegration not implemented")
}
func (UnimplementedIntegrationServiceServer) GetIntegrationByID(context.Context, *IntegrationPrimaryKey) (*Integration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIntegrationByID not implemented")
}
func (UnimplementedIntegrationServiceServer) GetIntegrationListByIDs(context.Context, *IntegrationPrimaryKeyList) (*GetIntegrationListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIntegrationListByIDs not implemented")
}
func (UnimplementedIntegrationServiceServer) GetIntegrationList(context.Context, *GetIntegrationListRequest) (*GetIntegrationListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIntegrationList not implemented")
}
func (UnimplementedIntegrationServiceServer) UpdateIntegration(context.Context, *UpdateIntegrationRequest) (*Integration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIntegration not implemented")
}
func (UnimplementedIntegrationServiceServer) DeleteIntegration(context.Context, *IntegrationPrimaryKey) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIntegration not implemented")
}
func (UnimplementedIntegrationServiceServer) GetIntegrationSessions(context.Context, *IntegrationPrimaryKey) (*GetIntegrationSessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIntegrationSessions not implemented")
}
func (UnimplementedIntegrationServiceServer) AddSessionToIntegration(context.Context, *AddSessionToIntegrationRequest) (*AddSessionToIntegrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSessionToIntegration not implemented")
}
func (UnimplementedIntegrationServiceServer) GetIntegrationToken(context.Context, *GetIntegrationTokenRequest) (*Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIntegrationToken not implemented")
}
func (UnimplementedIntegrationServiceServer) DeleteSessionFromIntegration(context.Context, *GetIntegrationTokenRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSessionFromIntegration not implemented")
}
func (UnimplementedIntegrationServiceServer) mustEmbedUnimplementedIntegrationServiceServer() {}

// UnsafeIntegrationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IntegrationServiceServer will
// result in compilation errors.
type UnsafeIntegrationServiceServer interface {
	mustEmbedUnimplementedIntegrationServiceServer()
}

func RegisterIntegrationServiceServer(s grpc.ServiceRegistrar, srv IntegrationServiceServer) {
	s.RegisterService(&IntegrationService_ServiceDesc, srv)
}

func _IntegrationService_CreateIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationServiceServer).CreateIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_service.IntegrationService/CreateIntegration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationServiceServer).CreateIntegration(ctx, req.(*CreateIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationService_GetIntegrationByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntegrationPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationServiceServer).GetIntegrationByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_service.IntegrationService/GetIntegrationByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationServiceServer).GetIntegrationByID(ctx, req.(*IntegrationPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationService_GetIntegrationListByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntegrationPrimaryKeyList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationServiceServer).GetIntegrationListByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_service.IntegrationService/GetIntegrationListByIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationServiceServer).GetIntegrationListByIDs(ctx, req.(*IntegrationPrimaryKeyList))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationService_GetIntegrationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIntegrationListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationServiceServer).GetIntegrationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_service.IntegrationService/GetIntegrationList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationServiceServer).GetIntegrationList(ctx, req.(*GetIntegrationListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationService_UpdateIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationServiceServer).UpdateIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_service.IntegrationService/UpdateIntegration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationServiceServer).UpdateIntegration(ctx, req.(*UpdateIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationService_DeleteIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntegrationPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationServiceServer).DeleteIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_service.IntegrationService/DeleteIntegration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationServiceServer).DeleteIntegration(ctx, req.(*IntegrationPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationService_GetIntegrationSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntegrationPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationServiceServer).GetIntegrationSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_service.IntegrationService/GetIntegrationSessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationServiceServer).GetIntegrationSessions(ctx, req.(*IntegrationPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationService_AddSessionToIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSessionToIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationServiceServer).AddSessionToIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_service.IntegrationService/AddSessionToIntegration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationServiceServer).AddSessionToIntegration(ctx, req.(*AddSessionToIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationService_GetIntegrationToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIntegrationTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationServiceServer).GetIntegrationToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_service.IntegrationService/GetIntegrationToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationServiceServer).GetIntegrationToken(ctx, req.(*GetIntegrationTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationService_DeleteSessionFromIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIntegrationTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationServiceServer).DeleteSessionFromIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_service.IntegrationService/DeleteSessionFromIntegration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationServiceServer).DeleteSessionFromIntegration(ctx, req.(*GetIntegrationTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IntegrationService_ServiceDesc is the grpc.ServiceDesc for IntegrationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IntegrationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth_service.IntegrationService",
	HandlerType: (*IntegrationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateIntegration",
			Handler:    _IntegrationService_CreateIntegration_Handler,
		},
		{
			MethodName: "GetIntegrationByID",
			Handler:    _IntegrationService_GetIntegrationByID_Handler,
		},
		{
			MethodName: "GetIntegrationListByIDs",
			Handler:    _IntegrationService_GetIntegrationListByIDs_Handler,
		},
		{
			MethodName: "GetIntegrationList",
			Handler:    _IntegrationService_GetIntegrationList_Handler,
		},
		{
			MethodName: "UpdateIntegration",
			Handler:    _IntegrationService_UpdateIntegration_Handler,
		},
		{
			MethodName: "DeleteIntegration",
			Handler:    _IntegrationService_DeleteIntegration_Handler,
		},
		{
			MethodName: "GetIntegrationSessions",
			Handler:    _IntegrationService_GetIntegrationSessions_Handler,
		},
		{
			MethodName: "AddSessionToIntegration",
			Handler:    _IntegrationService_AddSessionToIntegration_Handler,
		},
		{
			MethodName: "GetIntegrationToken",
			Handler:    _IntegrationService_GetIntegrationToken_Handler,
		},
		{
			MethodName: "DeleteSessionFromIntegration",
			Handler:    _IntegrationService_DeleteSessionFromIntegration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "integration_service.proto",
}
