// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: permission_service.proto

package auth_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PermissionServiceClient is the client API for PermissionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PermissionServiceClient interface {
	GetRoleById(ctx context.Context, in *RolePrimaryKey, opts ...grpc.CallOption) (*GetRoleByIdResponse, error)
	GetRolesList(ctx context.Context, in *GetRolesListRequest, opts ...grpc.CallOption) (*GetRolesResponse, error)
	AddRole(ctx context.Context, in *AddRoleRequest, opts ...grpc.CallOption) (*Role, error)
	UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*Role, error)
	RemoveRole(ctx context.Context, in *RolePrimaryKey, opts ...grpc.CallOption) (*Role, error)
	CreatePermission(ctx context.Context, in *CreatePermissionRequest, opts ...grpc.CallOption) (*GetPermissionByIDResponse, error)
	GetPermissionByID(ctx context.Context, in *PermissionPrimaryKey, opts ...grpc.CallOption) (*GetPermissionByIDResponse, error)
	GetPermissionList(ctx context.Context, in *GetPermissionListRequest, opts ...grpc.CallOption) (*GetPermissionListResponse, error)
	UpdatePermission(ctx context.Context, in *UpdatePermissionRequest, opts ...grpc.CallOption) (*GetPermissionByIDResponse, error)
	DeletePermission(ctx context.Context, in *PermissionPrimaryKey, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpsertScope(ctx context.Context, in *UpsertScopeRequest, opts ...grpc.CallOption) (*Scope, error)
	GetScopeList(ctx context.Context, in *GetScopeListRequest, opts ...grpc.CallOption) (*GetScopesResponse, error)
	AddPermissionScope(ctx context.Context, in *AddPermissionScopeRequest, opts ...grpc.CallOption) (*PermissionScope, error)
	RemovePermissionScope(ctx context.Context, in *PermissionScopePrimaryKey, opts ...grpc.CallOption) (*PermissionScope, error)
	AddRolePermission(ctx context.Context, in *AddRolePermissionRequest, opts ...grpc.CallOption) (*RolePermission, error)
	AddRolePermissions(ctx context.Context, in *AddRolePermissionsRequest, opts ...grpc.CallOption) (*AddRolePermissionsResponse, error)
	RemoveRolePermission(ctx context.Context, in *RolePermissionPrimaryKey, opts ...grpc.CallOption) (*RolePermission, error)
	PermissionList(ctx context.Context, in *PermissionGenerated, opts ...grpc.CallOption) (*emptypb.Empty, error)
	//V2
	V2GetRoleById(ctx context.Context, in *RolePrimaryKey, opts ...grpc.CallOption) (*CommonMessage, error)
	V2GetRolesList(ctx context.Context, in *GetRolesListRequest, opts ...grpc.CallOption) (*CommonMessage, error)
	V2AddRole(ctx context.Context, in *AddRoleRequest, opts ...grpc.CallOption) (*CommonMessage, error)
	V2UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*CommonMessage, error)
	V2RemoveRole(ctx context.Context, in *RolePrimaryKey, opts ...grpc.CallOption) (*CommonMessage, error)
	V2CreatePermission(ctx context.Context, in *CreatePermissionRequest, opts ...grpc.CallOption) (*CommonMessage, error)
	V2GetPermissionByID(ctx context.Context, in *PermissionPrimaryKey, opts ...grpc.CallOption) (*CommonMessage, error)
	V2GetPermissionList(ctx context.Context, in *GetPermissionListRequest, opts ...grpc.CallOption) (*CommonMessage, error)
	V2UpdatePermission(ctx context.Context, in *UpdatePermissionRequest, opts ...grpc.CallOption) (*CommonMessage, error)
	V2DeletePermission(ctx context.Context, in *PermissionPrimaryKey, opts ...grpc.CallOption) (*emptypb.Empty, error)
	V2UpsertScope(ctx context.Context, in *UpsertScopeRequest, opts ...grpc.CallOption) (*Scope, error)
	V2GetScopeList(ctx context.Context, in *GetScopeListRequest, opts ...grpc.CallOption) (*CommonMessage, error)
	V2AddPermissionScope(ctx context.Context, in *AddPermissionScopeRequest, opts ...grpc.CallOption) (*CommonMessage, error)
	V2RemovePermissionScope(ctx context.Context, in *PermissionScopePrimaryKey, opts ...grpc.CallOption) (*CommonMessage, error)
	V2AddRolePermission(ctx context.Context, in *AddRolePermissionRequest, opts ...grpc.CallOption) (*CommonMessage, error)
	V2AddRolePermissions(ctx context.Context, in *AddRolePermissionsRequest, opts ...grpc.CallOption) (*AddRolePermissionsResponse, error)
	V2RemoveRolePermission(ctx context.Context, in *RolePermissionPrimaryKey, opts ...grpc.CallOption) (*CommonMessage, error)
	V2PermissionList(ctx context.Context, in *PermissionGenerated, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type permissionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPermissionServiceClient(cc grpc.ClientConnInterface) PermissionServiceClient {
	return &permissionServiceClient{cc}
}

func (c *permissionServiceClient) GetRoleById(ctx context.Context, in *RolePrimaryKey, opts ...grpc.CallOption) (*GetRoleByIdResponse, error) {
	out := new(GetRoleByIdResponse)
	err := c.cc.Invoke(ctx, "/auth_service.PermissionService/GetRoleById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceClient) GetRolesList(ctx context.Context, in *GetRolesListRequest, opts ...grpc.CallOption) (*GetRolesResponse, error) {
	out := new(GetRolesResponse)
	err := c.cc.Invoke(ctx, "/auth_service.PermissionService/GetRolesList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceClient) AddRole(ctx context.Context, in *AddRoleRequest, opts ...grpc.CallOption) (*Role, error) {
	out := new(Role)
	err := c.cc.Invoke(ctx, "/auth_service.PermissionService/AddRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceClient) UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*Role, error) {
	out := new(Role)
	err := c.cc.Invoke(ctx, "/auth_service.PermissionService/UpdateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceClient) RemoveRole(ctx context.Context, in *RolePrimaryKey, opts ...grpc.CallOption) (*Role, error) {
	out := new(Role)
	err := c.cc.Invoke(ctx, "/auth_service.PermissionService/RemoveRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceClient) CreatePermission(ctx context.Context, in *CreatePermissionRequest, opts ...grpc.CallOption) (*GetPermissionByIDResponse, error) {
	out := new(GetPermissionByIDResponse)
	err := c.cc.Invoke(ctx, "/auth_service.PermissionService/CreatePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceClient) GetPermissionByID(ctx context.Context, in *PermissionPrimaryKey, opts ...grpc.CallOption) (*GetPermissionByIDResponse, error) {
	out := new(GetPermissionByIDResponse)
	err := c.cc.Invoke(ctx, "/auth_service.PermissionService/GetPermissionByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceClient) GetPermissionList(ctx context.Context, in *GetPermissionListRequest, opts ...grpc.CallOption) (*GetPermissionListResponse, error) {
	out := new(GetPermissionListResponse)
	err := c.cc.Invoke(ctx, "/auth_service.PermissionService/GetPermissionList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceClient) UpdatePermission(ctx context.Context, in *UpdatePermissionRequest, opts ...grpc.CallOption) (*GetPermissionByIDResponse, error) {
	out := new(GetPermissionByIDResponse)
	err := c.cc.Invoke(ctx, "/auth_service.PermissionService/UpdatePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceClient) DeletePermission(ctx context.Context, in *PermissionPrimaryKey, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/auth_service.PermissionService/DeletePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceClient) UpsertScope(ctx context.Context, in *UpsertScopeRequest, opts ...grpc.CallOption) (*Scope, error) {
	out := new(Scope)
	err := c.cc.Invoke(ctx, "/auth_service.PermissionService/UpsertScope", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceClient) GetScopeList(ctx context.Context, in *GetScopeListRequest, opts ...grpc.CallOption) (*GetScopesResponse, error) {
	out := new(GetScopesResponse)
	err := c.cc.Invoke(ctx, "/auth_service.PermissionService/GetScopeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceClient) AddPermissionScope(ctx context.Context, in *AddPermissionScopeRequest, opts ...grpc.CallOption) (*PermissionScope, error) {
	out := new(PermissionScope)
	err := c.cc.Invoke(ctx, "/auth_service.PermissionService/AddPermissionScope", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceClient) RemovePermissionScope(ctx context.Context, in *PermissionScopePrimaryKey, opts ...grpc.CallOption) (*PermissionScope, error) {
	out := new(PermissionScope)
	err := c.cc.Invoke(ctx, "/auth_service.PermissionService/RemovePermissionScope", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceClient) AddRolePermission(ctx context.Context, in *AddRolePermissionRequest, opts ...grpc.CallOption) (*RolePermission, error) {
	out := new(RolePermission)
	err := c.cc.Invoke(ctx, "/auth_service.PermissionService/AddRolePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceClient) AddRolePermissions(ctx context.Context, in *AddRolePermissionsRequest, opts ...grpc.CallOption) (*AddRolePermissionsResponse, error) {
	out := new(AddRolePermissionsResponse)
	err := c.cc.Invoke(ctx, "/auth_service.PermissionService/AddRolePermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceClient) RemoveRolePermission(ctx context.Context, in *RolePermissionPrimaryKey, opts ...grpc.CallOption) (*RolePermission, error) {
	out := new(RolePermission)
	err := c.cc.Invoke(ctx, "/auth_service.PermissionService/RemoveRolePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceClient) PermissionList(ctx context.Context, in *PermissionGenerated, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/auth_service.PermissionService/PermissionList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceClient) V2GetRoleById(ctx context.Context, in *RolePrimaryKey, opts ...grpc.CallOption) (*CommonMessage, error) {
	out := new(CommonMessage)
	err := c.cc.Invoke(ctx, "/auth_service.PermissionService/V2GetRoleById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceClient) V2GetRolesList(ctx context.Context, in *GetRolesListRequest, opts ...grpc.CallOption) (*CommonMessage, error) {
	out := new(CommonMessage)
	err := c.cc.Invoke(ctx, "/auth_service.PermissionService/V2GetRolesList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceClient) V2AddRole(ctx context.Context, in *AddRoleRequest, opts ...grpc.CallOption) (*CommonMessage, error) {
	out := new(CommonMessage)
	err := c.cc.Invoke(ctx, "/auth_service.PermissionService/V2AddRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceClient) V2UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*CommonMessage, error) {
	out := new(CommonMessage)
	err := c.cc.Invoke(ctx, "/auth_service.PermissionService/V2UpdateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceClient) V2RemoveRole(ctx context.Context, in *RolePrimaryKey, opts ...grpc.CallOption) (*CommonMessage, error) {
	out := new(CommonMessage)
	err := c.cc.Invoke(ctx, "/auth_service.PermissionService/V2RemoveRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceClient) V2CreatePermission(ctx context.Context, in *CreatePermissionRequest, opts ...grpc.CallOption) (*CommonMessage, error) {
	out := new(CommonMessage)
	err := c.cc.Invoke(ctx, "/auth_service.PermissionService/V2CreatePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceClient) V2GetPermissionByID(ctx context.Context, in *PermissionPrimaryKey, opts ...grpc.CallOption) (*CommonMessage, error) {
	out := new(CommonMessage)
	err := c.cc.Invoke(ctx, "/auth_service.PermissionService/V2GetPermissionByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceClient) V2GetPermissionList(ctx context.Context, in *GetPermissionListRequest, opts ...grpc.CallOption) (*CommonMessage, error) {
	out := new(CommonMessage)
	err := c.cc.Invoke(ctx, "/auth_service.PermissionService/V2GetPermissionList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceClient) V2UpdatePermission(ctx context.Context, in *UpdatePermissionRequest, opts ...grpc.CallOption) (*CommonMessage, error) {
	out := new(CommonMessage)
	err := c.cc.Invoke(ctx, "/auth_service.PermissionService/V2UpdatePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceClient) V2DeletePermission(ctx context.Context, in *PermissionPrimaryKey, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/auth_service.PermissionService/V2DeletePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceClient) V2UpsertScope(ctx context.Context, in *UpsertScopeRequest, opts ...grpc.CallOption) (*Scope, error) {
	out := new(Scope)
	err := c.cc.Invoke(ctx, "/auth_service.PermissionService/V2UpsertScope", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceClient) V2GetScopeList(ctx context.Context, in *GetScopeListRequest, opts ...grpc.CallOption) (*CommonMessage, error) {
	out := new(CommonMessage)
	err := c.cc.Invoke(ctx, "/auth_service.PermissionService/V2GetScopeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceClient) V2AddPermissionScope(ctx context.Context, in *AddPermissionScopeRequest, opts ...grpc.CallOption) (*CommonMessage, error) {
	out := new(CommonMessage)
	err := c.cc.Invoke(ctx, "/auth_service.PermissionService/V2AddPermissionScope", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceClient) V2RemovePermissionScope(ctx context.Context, in *PermissionScopePrimaryKey, opts ...grpc.CallOption) (*CommonMessage, error) {
	out := new(CommonMessage)
	err := c.cc.Invoke(ctx, "/auth_service.PermissionService/V2RemovePermissionScope", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceClient) V2AddRolePermission(ctx context.Context, in *AddRolePermissionRequest, opts ...grpc.CallOption) (*CommonMessage, error) {
	out := new(CommonMessage)
	err := c.cc.Invoke(ctx, "/auth_service.PermissionService/V2AddRolePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceClient) V2AddRolePermissions(ctx context.Context, in *AddRolePermissionsRequest, opts ...grpc.CallOption) (*AddRolePermissionsResponse, error) {
	out := new(AddRolePermissionsResponse)
	err := c.cc.Invoke(ctx, "/auth_service.PermissionService/V2AddRolePermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceClient) V2RemoveRolePermission(ctx context.Context, in *RolePermissionPrimaryKey, opts ...grpc.CallOption) (*CommonMessage, error) {
	out := new(CommonMessage)
	err := c.cc.Invoke(ctx, "/auth_service.PermissionService/V2RemoveRolePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceClient) V2PermissionList(ctx context.Context, in *PermissionGenerated, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/auth_service.PermissionService/V2PermissionList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PermissionServiceServer is the server API for PermissionService service.
// All implementations must embed UnimplementedPermissionServiceServer
// for forward compatibility
type PermissionServiceServer interface {
	GetRoleById(context.Context, *RolePrimaryKey) (*GetRoleByIdResponse, error)
	GetRolesList(context.Context, *GetRolesListRequest) (*GetRolesResponse, error)
	AddRole(context.Context, *AddRoleRequest) (*Role, error)
	UpdateRole(context.Context, *UpdateRoleRequest) (*Role, error)
	RemoveRole(context.Context, *RolePrimaryKey) (*Role, error)
	CreatePermission(context.Context, *CreatePermissionRequest) (*GetPermissionByIDResponse, error)
	GetPermissionByID(context.Context, *PermissionPrimaryKey) (*GetPermissionByIDResponse, error)
	GetPermissionList(context.Context, *GetPermissionListRequest) (*GetPermissionListResponse, error)
	UpdatePermission(context.Context, *UpdatePermissionRequest) (*GetPermissionByIDResponse, error)
	DeletePermission(context.Context, *PermissionPrimaryKey) (*emptypb.Empty, error)
	UpsertScope(context.Context, *UpsertScopeRequest) (*Scope, error)
	GetScopeList(context.Context, *GetScopeListRequest) (*GetScopesResponse, error)
	AddPermissionScope(context.Context, *AddPermissionScopeRequest) (*PermissionScope, error)
	RemovePermissionScope(context.Context, *PermissionScopePrimaryKey) (*PermissionScope, error)
	AddRolePermission(context.Context, *AddRolePermissionRequest) (*RolePermission, error)
	AddRolePermissions(context.Context, *AddRolePermissionsRequest) (*AddRolePermissionsResponse, error)
	RemoveRolePermission(context.Context, *RolePermissionPrimaryKey) (*RolePermission, error)
	PermissionList(context.Context, *PermissionGenerated) (*emptypb.Empty, error)
	//V2
	V2GetRoleById(context.Context, *RolePrimaryKey) (*CommonMessage, error)
	V2GetRolesList(context.Context, *GetRolesListRequest) (*CommonMessage, error)
	V2AddRole(context.Context, *AddRoleRequest) (*CommonMessage, error)
	V2UpdateRole(context.Context, *UpdateRoleRequest) (*CommonMessage, error)
	V2RemoveRole(context.Context, *RolePrimaryKey) (*CommonMessage, error)
	V2CreatePermission(context.Context, *CreatePermissionRequest) (*CommonMessage, error)
	V2GetPermissionByID(context.Context, *PermissionPrimaryKey) (*CommonMessage, error)
	V2GetPermissionList(context.Context, *GetPermissionListRequest) (*CommonMessage, error)
	V2UpdatePermission(context.Context, *UpdatePermissionRequest) (*CommonMessage, error)
	V2DeletePermission(context.Context, *PermissionPrimaryKey) (*emptypb.Empty, error)
	V2UpsertScope(context.Context, *UpsertScopeRequest) (*Scope, error)
	V2GetScopeList(context.Context, *GetScopeListRequest) (*CommonMessage, error)
	V2AddPermissionScope(context.Context, *AddPermissionScopeRequest) (*CommonMessage, error)
	V2RemovePermissionScope(context.Context, *PermissionScopePrimaryKey) (*CommonMessage, error)
	V2AddRolePermission(context.Context, *AddRolePermissionRequest) (*CommonMessage, error)
	V2AddRolePermissions(context.Context, *AddRolePermissionsRequest) (*AddRolePermissionsResponse, error)
	V2RemoveRolePermission(context.Context, *RolePermissionPrimaryKey) (*CommonMessage, error)
	V2PermissionList(context.Context, *PermissionGenerated) (*emptypb.Empty, error)
	mustEmbedUnimplementedPermissionServiceServer()
}

// UnimplementedPermissionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPermissionServiceServer struct {
}

func (UnimplementedPermissionServiceServer) GetRoleById(context.Context, *RolePrimaryKey) (*GetRoleByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleById not implemented")
}
func (UnimplementedPermissionServiceServer) GetRolesList(context.Context, *GetRolesListRequest) (*GetRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRolesList not implemented")
}
func (UnimplementedPermissionServiceServer) AddRole(context.Context, *AddRoleRequest) (*Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRole not implemented")
}
func (UnimplementedPermissionServiceServer) UpdateRole(context.Context, *UpdateRoleRequest) (*Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedPermissionServiceServer) RemoveRole(context.Context, *RolePrimaryKey) (*Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRole not implemented")
}
func (UnimplementedPermissionServiceServer) CreatePermission(context.Context, *CreatePermissionRequest) (*GetPermissionByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePermission not implemented")
}
func (UnimplementedPermissionServiceServer) GetPermissionByID(context.Context, *PermissionPrimaryKey) (*GetPermissionByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermissionByID not implemented")
}
func (UnimplementedPermissionServiceServer) GetPermissionList(context.Context, *GetPermissionListRequest) (*GetPermissionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermissionList not implemented")
}
func (UnimplementedPermissionServiceServer) UpdatePermission(context.Context, *UpdatePermissionRequest) (*GetPermissionByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePermission not implemented")
}
func (UnimplementedPermissionServiceServer) DeletePermission(context.Context, *PermissionPrimaryKey) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePermission not implemented")
}
func (UnimplementedPermissionServiceServer) UpsertScope(context.Context, *UpsertScopeRequest) (*Scope, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertScope not implemented")
}
func (UnimplementedPermissionServiceServer) GetScopeList(context.Context, *GetScopeListRequest) (*GetScopesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScopeList not implemented")
}
func (UnimplementedPermissionServiceServer) AddPermissionScope(context.Context, *AddPermissionScopeRequest) (*PermissionScope, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPermissionScope not implemented")
}
func (UnimplementedPermissionServiceServer) RemovePermissionScope(context.Context, *PermissionScopePrimaryKey) (*PermissionScope, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePermissionScope not implemented")
}
func (UnimplementedPermissionServiceServer) AddRolePermission(context.Context, *AddRolePermissionRequest) (*RolePermission, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRolePermission not implemented")
}
func (UnimplementedPermissionServiceServer) AddRolePermissions(context.Context, *AddRolePermissionsRequest) (*AddRolePermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRolePermissions not implemented")
}
func (UnimplementedPermissionServiceServer) RemoveRolePermission(context.Context, *RolePermissionPrimaryKey) (*RolePermission, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRolePermission not implemented")
}
func (UnimplementedPermissionServiceServer) PermissionList(context.Context, *PermissionGenerated) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PermissionList not implemented")
}
func (UnimplementedPermissionServiceServer) V2GetRoleById(context.Context, *RolePrimaryKey) (*CommonMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method V2GetRoleById not implemented")
}
func (UnimplementedPermissionServiceServer) V2GetRolesList(context.Context, *GetRolesListRequest) (*CommonMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method V2GetRolesList not implemented")
}
func (UnimplementedPermissionServiceServer) V2AddRole(context.Context, *AddRoleRequest) (*CommonMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method V2AddRole not implemented")
}
func (UnimplementedPermissionServiceServer) V2UpdateRole(context.Context, *UpdateRoleRequest) (*CommonMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method V2UpdateRole not implemented")
}
func (UnimplementedPermissionServiceServer) V2RemoveRole(context.Context, *RolePrimaryKey) (*CommonMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method V2RemoveRole not implemented")
}
func (UnimplementedPermissionServiceServer) V2CreatePermission(context.Context, *CreatePermissionRequest) (*CommonMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method V2CreatePermission not implemented")
}
func (UnimplementedPermissionServiceServer) V2GetPermissionByID(context.Context, *PermissionPrimaryKey) (*CommonMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method V2GetPermissionByID not implemented")
}
func (UnimplementedPermissionServiceServer) V2GetPermissionList(context.Context, *GetPermissionListRequest) (*CommonMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method V2GetPermissionList not implemented")
}
func (UnimplementedPermissionServiceServer) V2UpdatePermission(context.Context, *UpdatePermissionRequest) (*CommonMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method V2UpdatePermission not implemented")
}
func (UnimplementedPermissionServiceServer) V2DeletePermission(context.Context, *PermissionPrimaryKey) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method V2DeletePermission not implemented")
}
func (UnimplementedPermissionServiceServer) V2UpsertScope(context.Context, *UpsertScopeRequest) (*Scope, error) {
	return nil, status.Errorf(codes.Unimplemented, "method V2UpsertScope not implemented")
}
func (UnimplementedPermissionServiceServer) V2GetScopeList(context.Context, *GetScopeListRequest) (*CommonMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method V2GetScopeList not implemented")
}
func (UnimplementedPermissionServiceServer) V2AddPermissionScope(context.Context, *AddPermissionScopeRequest) (*CommonMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method V2AddPermissionScope not implemented")
}
func (UnimplementedPermissionServiceServer) V2RemovePermissionScope(context.Context, *PermissionScopePrimaryKey) (*CommonMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method V2RemovePermissionScope not implemented")
}
func (UnimplementedPermissionServiceServer) V2AddRolePermission(context.Context, *AddRolePermissionRequest) (*CommonMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method V2AddRolePermission not implemented")
}
func (UnimplementedPermissionServiceServer) V2AddRolePermissions(context.Context, *AddRolePermissionsRequest) (*AddRolePermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method V2AddRolePermissions not implemented")
}
func (UnimplementedPermissionServiceServer) V2RemoveRolePermission(context.Context, *RolePermissionPrimaryKey) (*CommonMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method V2RemoveRolePermission not implemented")
}
func (UnimplementedPermissionServiceServer) V2PermissionList(context.Context, *PermissionGenerated) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method V2PermissionList not implemented")
}
func (UnimplementedPermissionServiceServer) mustEmbedUnimplementedPermissionServiceServer() {}

// UnsafePermissionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PermissionServiceServer will
// result in compilation errors.
type UnsafePermissionServiceServer interface {
	mustEmbedUnimplementedPermissionServiceServer()
}

func RegisterPermissionServiceServer(s grpc.ServiceRegistrar, srv PermissionServiceServer) {
	s.RegisterService(&PermissionService_ServiceDesc, srv)
}

func _PermissionService_GetRoleById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolePrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).GetRoleById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_service.PermissionService/GetRoleById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).GetRoleById(ctx, req.(*RolePrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionService_GetRolesList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRolesListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).GetRolesList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_service.PermissionService/GetRolesList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).GetRolesList(ctx, req.(*GetRolesListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionService_AddRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).AddRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_service.PermissionService/AddRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).AddRole(ctx, req.(*AddRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionService_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_service.PermissionService/UpdateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).UpdateRole(ctx, req.(*UpdateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionService_RemoveRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolePrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).RemoveRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_service.PermissionService/RemoveRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).RemoveRole(ctx, req.(*RolePrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionService_CreatePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).CreatePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_service.PermissionService/CreatePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).CreatePermission(ctx, req.(*CreatePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionService_GetPermissionByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).GetPermissionByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_service.PermissionService/GetPermissionByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).GetPermissionByID(ctx, req.(*PermissionPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionService_GetPermissionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPermissionListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).GetPermissionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_service.PermissionService/GetPermissionList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).GetPermissionList(ctx, req.(*GetPermissionListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionService_UpdatePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).UpdatePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_service.PermissionService/UpdatePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).UpdatePermission(ctx, req.(*UpdatePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionService_DeletePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).DeletePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_service.PermissionService/DeletePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).DeletePermission(ctx, req.(*PermissionPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionService_UpsertScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).UpsertScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_service.PermissionService/UpsertScope",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).UpsertScope(ctx, req.(*UpsertScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionService_GetScopeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScopeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).GetScopeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_service.PermissionService/GetScopeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).GetScopeList(ctx, req.(*GetScopeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionService_AddPermissionScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPermissionScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).AddPermissionScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_service.PermissionService/AddPermissionScope",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).AddPermissionScope(ctx, req.(*AddPermissionScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionService_RemovePermissionScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionScopePrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).RemovePermissionScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_service.PermissionService/RemovePermissionScope",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).RemovePermissionScope(ctx, req.(*PermissionScopePrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionService_AddRolePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRolePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).AddRolePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_service.PermissionService/AddRolePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).AddRolePermission(ctx, req.(*AddRolePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionService_AddRolePermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRolePermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).AddRolePermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_service.PermissionService/AddRolePermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).AddRolePermissions(ctx, req.(*AddRolePermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionService_RemoveRolePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolePermissionPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).RemoveRolePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_service.PermissionService/RemoveRolePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).RemoveRolePermission(ctx, req.(*RolePermissionPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionService_PermissionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionGenerated)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).PermissionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_service.PermissionService/PermissionList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).PermissionList(ctx, req.(*PermissionGenerated))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionService_V2GetRoleById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolePrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).V2GetRoleById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_service.PermissionService/V2GetRoleById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).V2GetRoleById(ctx, req.(*RolePrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionService_V2GetRolesList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRolesListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).V2GetRolesList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_service.PermissionService/V2GetRolesList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).V2GetRolesList(ctx, req.(*GetRolesListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionService_V2AddRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).V2AddRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_service.PermissionService/V2AddRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).V2AddRole(ctx, req.(*AddRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionService_V2UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).V2UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_service.PermissionService/V2UpdateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).V2UpdateRole(ctx, req.(*UpdateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionService_V2RemoveRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolePrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).V2RemoveRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_service.PermissionService/V2RemoveRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).V2RemoveRole(ctx, req.(*RolePrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionService_V2CreatePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).V2CreatePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_service.PermissionService/V2CreatePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).V2CreatePermission(ctx, req.(*CreatePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionService_V2GetPermissionByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).V2GetPermissionByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_service.PermissionService/V2GetPermissionByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).V2GetPermissionByID(ctx, req.(*PermissionPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionService_V2GetPermissionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPermissionListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).V2GetPermissionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_service.PermissionService/V2GetPermissionList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).V2GetPermissionList(ctx, req.(*GetPermissionListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionService_V2UpdatePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).V2UpdatePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_service.PermissionService/V2UpdatePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).V2UpdatePermission(ctx, req.(*UpdatePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionService_V2DeletePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).V2DeletePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_service.PermissionService/V2DeletePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).V2DeletePermission(ctx, req.(*PermissionPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionService_V2UpsertScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).V2UpsertScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_service.PermissionService/V2UpsertScope",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).V2UpsertScope(ctx, req.(*UpsertScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionService_V2GetScopeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScopeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).V2GetScopeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_service.PermissionService/V2GetScopeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).V2GetScopeList(ctx, req.(*GetScopeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionService_V2AddPermissionScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPermissionScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).V2AddPermissionScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_service.PermissionService/V2AddPermissionScope",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).V2AddPermissionScope(ctx, req.(*AddPermissionScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionService_V2RemovePermissionScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionScopePrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).V2RemovePermissionScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_service.PermissionService/V2RemovePermissionScope",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).V2RemovePermissionScope(ctx, req.(*PermissionScopePrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionService_V2AddRolePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRolePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).V2AddRolePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_service.PermissionService/V2AddRolePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).V2AddRolePermission(ctx, req.(*AddRolePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionService_V2AddRolePermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRolePermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).V2AddRolePermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_service.PermissionService/V2AddRolePermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).V2AddRolePermissions(ctx, req.(*AddRolePermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionService_V2RemoveRolePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolePermissionPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).V2RemoveRolePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_service.PermissionService/V2RemoveRolePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).V2RemoveRolePermission(ctx, req.(*RolePermissionPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionService_V2PermissionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionGenerated)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).V2PermissionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_service.PermissionService/V2PermissionList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).V2PermissionList(ctx, req.(*PermissionGenerated))
	}
	return interceptor(ctx, in, info, handler)
}

// PermissionService_ServiceDesc is the grpc.ServiceDesc for PermissionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PermissionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth_service.PermissionService",
	HandlerType: (*PermissionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRoleById",
			Handler:    _PermissionService_GetRoleById_Handler,
		},
		{
			MethodName: "GetRolesList",
			Handler:    _PermissionService_GetRolesList_Handler,
		},
		{
			MethodName: "AddRole",
			Handler:    _PermissionService_AddRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _PermissionService_UpdateRole_Handler,
		},
		{
			MethodName: "RemoveRole",
			Handler:    _PermissionService_RemoveRole_Handler,
		},
		{
			MethodName: "CreatePermission",
			Handler:    _PermissionService_CreatePermission_Handler,
		},
		{
			MethodName: "GetPermissionByID",
			Handler:    _PermissionService_GetPermissionByID_Handler,
		},
		{
			MethodName: "GetPermissionList",
			Handler:    _PermissionService_GetPermissionList_Handler,
		},
		{
			MethodName: "UpdatePermission",
			Handler:    _PermissionService_UpdatePermission_Handler,
		},
		{
			MethodName: "DeletePermission",
			Handler:    _PermissionService_DeletePermission_Handler,
		},
		{
			MethodName: "UpsertScope",
			Handler:    _PermissionService_UpsertScope_Handler,
		},
		{
			MethodName: "GetScopeList",
			Handler:    _PermissionService_GetScopeList_Handler,
		},
		{
			MethodName: "AddPermissionScope",
			Handler:    _PermissionService_AddPermissionScope_Handler,
		},
		{
			MethodName: "RemovePermissionScope",
			Handler:    _PermissionService_RemovePermissionScope_Handler,
		},
		{
			MethodName: "AddRolePermission",
			Handler:    _PermissionService_AddRolePermission_Handler,
		},
		{
			MethodName: "AddRolePermissions",
			Handler:    _PermissionService_AddRolePermissions_Handler,
		},
		{
			MethodName: "RemoveRolePermission",
			Handler:    _PermissionService_RemoveRolePermission_Handler,
		},
		{
			MethodName: "PermissionList",
			Handler:    _PermissionService_PermissionList_Handler,
		},
		{
			MethodName: "V2GetRoleById",
			Handler:    _PermissionService_V2GetRoleById_Handler,
		},
		{
			MethodName: "V2GetRolesList",
			Handler:    _PermissionService_V2GetRolesList_Handler,
		},
		{
			MethodName: "V2AddRole",
			Handler:    _PermissionService_V2AddRole_Handler,
		},
		{
			MethodName: "V2UpdateRole",
			Handler:    _PermissionService_V2UpdateRole_Handler,
		},
		{
			MethodName: "V2RemoveRole",
			Handler:    _PermissionService_V2RemoveRole_Handler,
		},
		{
			MethodName: "V2CreatePermission",
			Handler:    _PermissionService_V2CreatePermission_Handler,
		},
		{
			MethodName: "V2GetPermissionByID",
			Handler:    _PermissionService_V2GetPermissionByID_Handler,
		},
		{
			MethodName: "V2GetPermissionList",
			Handler:    _PermissionService_V2GetPermissionList_Handler,
		},
		{
			MethodName: "V2UpdatePermission",
			Handler:    _PermissionService_V2UpdatePermission_Handler,
		},
		{
			MethodName: "V2DeletePermission",
			Handler:    _PermissionService_V2DeletePermission_Handler,
		},
		{
			MethodName: "V2UpsertScope",
			Handler:    _PermissionService_V2UpsertScope_Handler,
		},
		{
			MethodName: "V2GetScopeList",
			Handler:    _PermissionService_V2GetScopeList_Handler,
		},
		{
			MethodName: "V2AddPermissionScope",
			Handler:    _PermissionService_V2AddPermissionScope_Handler,
		},
		{
			MethodName: "V2RemovePermissionScope",
			Handler:    _PermissionService_V2RemovePermissionScope_Handler,
		},
		{
			MethodName: "V2AddRolePermission",
			Handler:    _PermissionService_V2AddRolePermission_Handler,
		},
		{
			MethodName: "V2AddRolePermissions",
			Handler:    _PermissionService_V2AddRolePermissions_Handler,
		},
		{
			MethodName: "V2RemoveRolePermission",
			Handler:    _PermissionService_V2RemoveRolePermission_Handler,
		},
		{
			MethodName: "V2PermissionList",
			Handler:    _PermissionService_V2PermissionList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "permission_service.proto",
}
