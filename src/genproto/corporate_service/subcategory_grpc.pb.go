// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: subcategory.proto

package corporate_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SubcategoryServiceClient is the client API for SubcategoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubcategoryServiceClient interface {
	CreateMultiple(ctx context.Context, in *CreateSubcategoryRequest, opts ...grpc.CallOption) (*CreateSubcategoryRequest, error)
	GetAll(ctx context.Context, in *GetAllSubcategoriesRequest, opts ...grpc.CallOption) (*GetAllSubcategoriesResponse, error)
	DeleteByCategoryID(ctx context.Context, in *SubcategoryPrimaryKey, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type subcategoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSubcategoryServiceClient(cc grpc.ClientConnInterface) SubcategoryServiceClient {
	return &subcategoryServiceClient{cc}
}

func (c *subcategoryServiceClient) CreateMultiple(ctx context.Context, in *CreateSubcategoryRequest, opts ...grpc.CallOption) (*CreateSubcategoryRequest, error) {
	out := new(CreateSubcategoryRequest)
	err := c.cc.Invoke(ctx, "/corporate_service.SubcategoryService/CreateMultiple", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subcategoryServiceClient) GetAll(ctx context.Context, in *GetAllSubcategoriesRequest, opts ...grpc.CallOption) (*GetAllSubcategoriesResponse, error) {
	out := new(GetAllSubcategoriesResponse)
	err := c.cc.Invoke(ctx, "/corporate_service.SubcategoryService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subcategoryServiceClient) DeleteByCategoryID(ctx context.Context, in *SubcategoryPrimaryKey, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/corporate_service.SubcategoryService/DeleteByCategoryID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubcategoryServiceServer is the server API for SubcategoryService service.
// All implementations must embed UnimplementedSubcategoryServiceServer
// for forward compatibility
type SubcategoryServiceServer interface {
	CreateMultiple(context.Context, *CreateSubcategoryRequest) (*CreateSubcategoryRequest, error)
	GetAll(context.Context, *GetAllSubcategoriesRequest) (*GetAllSubcategoriesResponse, error)
	DeleteByCategoryID(context.Context, *SubcategoryPrimaryKey) (*emptypb.Empty, error)
	mustEmbedUnimplementedSubcategoryServiceServer()
}

// UnimplementedSubcategoryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSubcategoryServiceServer struct {
}

func (UnimplementedSubcategoryServiceServer) CreateMultiple(context.Context, *CreateSubcategoryRequest) (*CreateSubcategoryRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMultiple not implemented")
}
func (UnimplementedSubcategoryServiceServer) GetAll(context.Context, *GetAllSubcategoriesRequest) (*GetAllSubcategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedSubcategoryServiceServer) DeleteByCategoryID(context.Context, *SubcategoryPrimaryKey) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteByCategoryID not implemented")
}
func (UnimplementedSubcategoryServiceServer) mustEmbedUnimplementedSubcategoryServiceServer() {}

// UnsafeSubcategoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubcategoryServiceServer will
// result in compilation errors.
type UnsafeSubcategoryServiceServer interface {
	mustEmbedUnimplementedSubcategoryServiceServer()
}

func RegisterSubcategoryServiceServer(s grpc.ServiceRegistrar, srv SubcategoryServiceServer) {
	s.RegisterService(&SubcategoryService_ServiceDesc, srv)
}

func _SubcategoryService_CreateMultiple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubcategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubcategoryServiceServer).CreateMultiple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/corporate_service.SubcategoryService/CreateMultiple",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubcategoryServiceServer).CreateMultiple(ctx, req.(*CreateSubcategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubcategoryService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllSubcategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubcategoryServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/corporate_service.SubcategoryService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubcategoryServiceServer).GetAll(ctx, req.(*GetAllSubcategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubcategoryService_DeleteByCategoryID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubcategoryPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubcategoryServiceServer).DeleteByCategoryID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/corporate_service.SubcategoryService/DeleteByCategoryID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubcategoryServiceServer).DeleteByCategoryID(ctx, req.(*SubcategoryPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

// SubcategoryService_ServiceDesc is the grpc.ServiceDesc for SubcategoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubcategoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "corporate_service.SubcategoryService",
	HandlerType: (*SubcategoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMultiple",
			Handler:    _SubcategoryService_CreateMultiple_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _SubcategoryService_GetAll_Handler,
		},
		{
			MethodName: "DeleteByCategoryID",
			Handler:    _SubcategoryService_DeleteByCategoryID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "subcategory.proto",
}
