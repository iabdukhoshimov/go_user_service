// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: requisite.proto

package corporate_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RequisiteServiceClient is the client API for RequisiteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RequisiteServiceClient interface {
	Create(ctx context.Context, in *CreateRequisiteRequest, opts ...grpc.CallOption) (*Requisite, error)
	GetByID(ctx context.Context, in *RequisitePrimaryKey, opts ...grpc.CallOption) (*Requisite, error)
	GetAll(ctx context.Context, in *GetAllRequisitesRequest, opts ...grpc.CallOption) (*GetAllRequisitesResponse, error)
	Update(ctx context.Context, in *Requisite, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Delete(ctx context.Context, in *RequisitePrimaryKey, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type requisiteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRequisiteServiceClient(cc grpc.ClientConnInterface) RequisiteServiceClient {
	return &requisiteServiceClient{cc}
}

func (c *requisiteServiceClient) Create(ctx context.Context, in *CreateRequisiteRequest, opts ...grpc.CallOption) (*Requisite, error) {
	out := new(Requisite)
	err := c.cc.Invoke(ctx, "/corporate_service.RequisiteService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *requisiteServiceClient) GetByID(ctx context.Context, in *RequisitePrimaryKey, opts ...grpc.CallOption) (*Requisite, error) {
	out := new(Requisite)
	err := c.cc.Invoke(ctx, "/corporate_service.RequisiteService/GetByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *requisiteServiceClient) GetAll(ctx context.Context, in *GetAllRequisitesRequest, opts ...grpc.CallOption) (*GetAllRequisitesResponse, error) {
	out := new(GetAllRequisitesResponse)
	err := c.cc.Invoke(ctx, "/corporate_service.RequisiteService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *requisiteServiceClient) Update(ctx context.Context, in *Requisite, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/corporate_service.RequisiteService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *requisiteServiceClient) Delete(ctx context.Context, in *RequisitePrimaryKey, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/corporate_service.RequisiteService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RequisiteServiceServer is the server API for RequisiteService service.
// All implementations must embed UnimplementedRequisiteServiceServer
// for forward compatibility
type RequisiteServiceServer interface {
	Create(context.Context, *CreateRequisiteRequest) (*Requisite, error)
	GetByID(context.Context, *RequisitePrimaryKey) (*Requisite, error)
	GetAll(context.Context, *GetAllRequisitesRequest) (*GetAllRequisitesResponse, error)
	Update(context.Context, *Requisite) (*emptypb.Empty, error)
	Delete(context.Context, *RequisitePrimaryKey) (*emptypb.Empty, error)
	mustEmbedUnimplementedRequisiteServiceServer()
}

// UnimplementedRequisiteServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRequisiteServiceServer struct {
}

func (UnimplementedRequisiteServiceServer) Create(context.Context, *CreateRequisiteRequest) (*Requisite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedRequisiteServiceServer) GetByID(context.Context, *RequisitePrimaryKey) (*Requisite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedRequisiteServiceServer) GetAll(context.Context, *GetAllRequisitesRequest) (*GetAllRequisitesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedRequisiteServiceServer) Update(context.Context, *Requisite) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedRequisiteServiceServer) Delete(context.Context, *RequisitePrimaryKey) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedRequisiteServiceServer) mustEmbedUnimplementedRequisiteServiceServer() {}

// UnsafeRequisiteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RequisiteServiceServer will
// result in compilation errors.
type UnsafeRequisiteServiceServer interface {
	mustEmbedUnimplementedRequisiteServiceServer()
}

func RegisterRequisiteServiceServer(s grpc.ServiceRegistrar, srv RequisiteServiceServer) {
	s.RegisterService(&RequisiteService_ServiceDesc, srv)
}

func _RequisiteService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequisiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequisiteServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/corporate_service.RequisiteService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequisiteServiceServer).Create(ctx, req.(*CreateRequisiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RequisiteService_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequisitePrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequisiteServiceServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/corporate_service.RequisiteService/GetByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequisiteServiceServer).GetByID(ctx, req.(*RequisitePrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _RequisiteService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRequisitesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequisiteServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/corporate_service.RequisiteService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequisiteServiceServer).GetAll(ctx, req.(*GetAllRequisitesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RequisiteService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Requisite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequisiteServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/corporate_service.RequisiteService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequisiteServiceServer).Update(ctx, req.(*Requisite))
	}
	return interceptor(ctx, in, info, handler)
}

func _RequisiteService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequisitePrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequisiteServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/corporate_service.RequisiteService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequisiteServiceServer).Delete(ctx, req.(*RequisitePrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

// RequisiteService_ServiceDesc is the grpc.ServiceDesc for RequisiteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RequisiteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "corporate_service.RequisiteService",
	HandlerType: (*RequisiteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _RequisiteService_Create_Handler,
		},
		{
			MethodName: "GetByID",
			Handler:    _RequisiteService_GetByID_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _RequisiteService_GetAll_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _RequisiteService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _RequisiteService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "requisite.proto",
}
